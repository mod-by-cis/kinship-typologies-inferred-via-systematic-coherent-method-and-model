import{render as Oe}from"https://esm.sh/preact@10.26.8";import{useSignal as R}from"https://esm.sh/@preact/signals@2.2.0";import{useCallback as I,useEffect as Se,useRef as xe}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as Fe,jsx as A,jsxs as O}from"https://esm.sh/preact@10.26.8/jsx-runtime";var Me=A("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"}),Ee=O(Fe,{children:[A("rect",{x:"11",y:"5",width:"2",height:"14",rx:"1"}),A("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"})]}),g={baseViewBoxWidth:174,baseViewBoxHeight:72,buttons:{choose:{name:"btn-choose",paths:[{dataName:"btn-fill",d:"M115.75,71.62c-10.03,0-19.93-1.62-28.63-4.67l-.12-.04-.12.04c-8.7,3.06-18.59,4.67-28.63,4.67-13.06,0-25.81-2.75-36.02-7.75l26.96-15.21h75.61l26.96,15.21c-10.2,5-22.96,7.75-36.02,7.75Z",defaultFill:"#919191"},{dataName:"btn-border-fill",d:"M124.71,49.04l26.25,14.81c-10.04,4.78-22.48,7.4-35.21,7.4-9.99,0-19.84-1.61-28.5-4.65l-.25-.09-.25.09c-8.66,3.04-18.51,4.65-28.5,4.65-12.73,0-25.16-2.62-35.21-7.4l26.25-14.81h75.41M124.9,48.29H49.1l-27.66,15.6c10.03,5.06,22.85,8.11,36.82,8.11,10.46,0,20.27-1.71,28.75-4.69,8.48,2.98,18.29,4.69,28.75,4.69,13.97,0,26.78-3.04,36.82-8.11l-27.66-15.6h0Z",defaultFill:"#505050"}]},increment:{name:"btn-increment",paths:[{dataName:"btn-fill",d:"M127.38,43.51V1.1c26.83,3.37,46.25,18.01,46.25,34.9,0,9.19-5.68,17.91-16.01,24.57l-30.24-17.06Z",defaultFill:"#21597f"},{dataName:"btn-border-fill",d:"M127.75,1.53c26.42,3.45,45.5,17.86,45.5,34.47,0,9-5.55,17.56-15.65,24.13l-29.85-16.84V1.53M127,.68v43.05l30.63,17.28c10.13-6.48,16.37-15.29,16.37-25.01,0-17.5-20.21-32.08-47-35.32h0Z",defaultFill:"#104060"}],iconAnchorX:150,iconAnchorY:30},decrement:{name:"btn-decrement",paths:[{dataName:"btn-fill",d:"M16.38,60.57C6.06,53.91.38,45.19.38,36,.38,19.11,19.8,4.47,46.62,1.1v42.41l-30.24,17.06Z",defaultFill:"#b21010"},{dataName:"btn-border-fill",d:"M46.25,1.53v41.76h0s-29.85,16.84-29.85,16.84C6.3,53.56.75,45,.75,36,.75,19.39,19.83,4.97,46.25,1.53M47,.68C20.21,3.92,0,18.5,0,36c0,9.72,6.24,18.53,16.37,25.01l30.63-17.28V.68h0Z",defaultFill:"#800000"}],iconAnchorX:25,iconAnchorY:30}},inputArea:{name:"input",rect:{x:52.38,y:.38,width:69.25,height:42.54,defaultFill:"#fff"},borderPath:{d:"M121.25.75v41.79H52.75V.75h68.5M122,0H52v43.29h70V0h0Z",defaultFill:"#333"}}},Ce="inputnumber-container",ke="inputnumber-svg",re="inputnumber-svg-button",Ve="inputnumber-html-input";function ae(a){let{value:i,defaultValue:s,def:t=1,min:e,max:r,step:p=1,placeholder:h,required:y,disabled:l=!1,name:c,id:f,readOnly:d=!1,onChange:x,onValueChange:M,ratioSIZE:E=1,wrapperClassName:W,svgClassName:H,inputClassName:X,style:J,selectButtonStyle:F,incrementButtonStyle:_,decrementButtonStyle:G,inputAreaStyle:U,selectButtonFill:Y,incrementButtonFill:q,decrementButtonFill:Z,inputAreaRectFill:K,inputAreaBorderFill:Q,...B}=a,n=xe(null);Se(()=>{n.current&&(i!==void 0?n.current.value=String(i):s!==void 0?n.current.value=String(s):n.current.value="")},[i,s]);let u=I(v=>{if(n.current&&!l&&!d){v==="up"?n.current.stepUp():n.current.stepDown();let C=new Event("input",{bubbles:!0,cancelable:!0});n.current.dispatchEvent(C)}},[l,d]),o=I(()=>u("down"),[u]),N=I(()=>u("up"),[u]),T=I(()=>{if(n.current&&!l&&!d){let v=t??1;if(n.current.value=String(v),M&&M(v,c),x){let C=new Event("change",{bubbles:!0});Object.defineProperty(C,"target",{writable:!1,value:n.current}),Object.defineProperty(C,"currentTarget",{writable:!1,value:n.current}),x(C)}console.log("Choose button clicked, value set to 1")}},[l,d,c,M,x]),P=v=>{let se=v.currentTarget.value,ne;if(se==="")ne=void 0;else{let ue=parseFloat(se);ne=isNaN(ue)?void 0:ue}M&&M(ne,c),x&&x(v)},$=g.baseViewBoxWidth*E,Ae=g.baseViewBoxHeight*E,we={position:"absolute",left:`${g.inputArea.rect.x*E}px`,top:`${g.inputArea.rect.y*E}px`,width:`${g.inputArea.rect.width*E}px`,height:`${g.inputArea.rect.height*E}px`,border:"none",backgroundColor:"transparent",color:"#333",textAlign:"center",fontSize:`${Math.max(8,18*E)}px`,outline:"none",padding:`0 ${Math.max(1,2*E)}px`,margin:0,boxSizing:"border-box",MozAppearance:"textfield",WebkitAppearance:"none",appearance:"none",zIndex:2},w=24,oe=1.5*(g.baseViewBoxHeight*.25*(E>.5?1:E*2)/w),ee="";i!==void 0?ee=String(i):s!==void 0&&(ee=String(s));let te={cursor:l||d?"default":"pointer"};return O("div",{className:`${Ce} ${W||""}`,style:{width:`${$}px`,height:`${Ae}px`,position:"relative",overflow:"hidden",...J},...B,children:[O("svg",{className:`${ke} ${H||""}`,"data-name":"input-number",xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${g.baseViewBoxWidth} ${g.baseViewBoxHeight}`,style:{display:"block",width:"100%",height:"100%",position:"absolute",top:0,left:0},"aria-hidden":"true",children:[A("g",{className:re,"data-name":g.buttons.choose.name,onClick:l?void 0:T,style:{...te,...F||{}},pointerEvents:l?"none":"auto",children:g.buttons.choose.paths.map((v,C)=>A("path",{"data-name":v.dataName,d:v.d,fill:Y||v.defaultFill},`choose-path-${C}`))}),O("g",{"data-name":g.inputArea.name,style:U||{},children:[A("rect",{x:g.inputArea.rect.x,y:g.inputArea.rect.y,width:g.inputArea.rect.width,height:g.inputArea.rect.height,fill:K||g.inputArea.rect.defaultFill}),A("path",{d:g.inputArea.borderPath.d,fill:Q||g.inputArea.borderPath.defaultFill})]}),O("g",{className:re,"data-name":g.buttons.decrement.name,onClick:!l&&!d?o:void 0,style:{...te,...G||{}},pointerEvents:l||d?"none":"auto",children:[g.buttons.decrement.paths.map((v,C)=>A("path",{"data-name":v.dataName,d:v.d,fill:Z||v.defaultFill},`dec-path-${C}`)),A("g",{transform:`translate(${g.buttons.decrement.iconAnchorX}, ${g.buttons.decrement.iconAnchorY}) scale(${oe}) translate(-${w/2}, -${w/2})`,style:{pointerEvents:"none"},children:A("svg",{viewBox:`0 0 ${w} ${w}`,width:w,height:w,fill:"white",overflow:"visible",children:Me})})]}),O("g",{className:re,"data-name":g.buttons.increment.name,onClick:!l&&!d?N:void 0,style:{...te,..._||{}},pointerEvents:l||d?"none":"auto",children:[g.buttons.increment.paths.map((v,C)=>A("path",{"data-name":v.dataName,d:v.d,fill:q||v.defaultFill},`inc-path-${C}`)),A("g",{transform:`translate(${g.buttons.increment.iconAnchorX}, ${g.buttons.increment.iconAnchorY}) scale(${oe}) translate(-${w/2}, -${w/2})`,style:{pointerEvents:"none"},children:A("svg",{viewBox:`0 0 ${w} ${w}`,width:w,height:w,fill:"white",overflow:"visible",children:Ee})})]})]}),A("input",{ref:n,className:`${Ve} ${X||""}`,type:"number",name:c,id:f,value:ee,min:e,max:r,step:p,placeholder:h,required:y,disabled:l,readOnly:d,onInput:P,style:we,"aria-label":a["aria-label"]||"Warto\u015B\u0107 liczbowa",...B})]})}import{useEffect as De,useRef as ce,useState as pe}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as de,jsx as k,jsxs as j}from"https://esm.sh/preact@10.26.8/jsx-runtime";function _e(a="View",i="Drag",s="Click"){return new Map([["View",a],["Drag",i],["Click",s]])}function me(a){let{titleAvailable:i,titleSelected:s,titleModeButton:t="Mode",titleMode:e=_e(),availableValues:r,values:p,defaultValues:h=[],onChange:y=()=>{}}=a,[l,c]=pe("View"),[f,d]=pe([...h]),M=(()=>{let n=new Map;f.forEach(o=>{n.set(o,(n.get(o)??0)+1)});let u=[];for(let[o,N]of r.entries()){let T=n.get(o)??0,P=N-T;for(let $=0;$<P;$++)u.push(o)}return u})();De(()=>{y([...f])},[f]);let E=()=>{c(n=>n==="View"?"Drag":n==="Drag"?"Click":"View")},W=n=>{l==="Click"&&d([...f,n])},H=n=>{l==="Click"&&d(u=>{let o=[...u];return o.splice(n,1),o})},X=n=>{l==="Click"&&(n<=0||d(u=>{let o=[...u];return[o[n-1],o[n]]=[o[n],o[n-1]],o}))},J=n=>{l==="Click"&&(n>=f.length-1||d(u=>{let o=[...u];return[o[n],o[n+1]]=[o[n+1],o[n]],o}))},F=ce(null),_=ce(null),G=(n,u)=>{if(l!=="Drag"){n.preventDefault();return}_.current=u,n.dataTransfer?.setData("text/plain",u),n.dataTransfer.effectAllowed="copy"},U=n=>{_.current=null},Y=(n,u)=>{if(l!=="Drag"){n.preventDefault();return}F.current=u,n.dataTransfer?.setData("text/plain",f[u]),n.dataTransfer.effectAllowed="move"},q=n=>{F.current=null},Z=(n,u=null)=>{if(n.preventDefault(),l==="Drag"){if(_.current!==null){d(o=>{let N=[...o];return u===null||u>=N.length?N.push(_.current):N.splice(u,0,_.current),N}),_.current=null;return}if(F.current!==null){let o=F.current,N=u!==null?u:f.length-1;if(o===N)return;d(T=>{let P=[...T],[$]=P.splice(o,1);return P.splice(N,0,$),P}),F.current=null}}},K=n=>{l==="Drag"&&n.preventDefault()},Q=n=>{if(n.preventDefault(),l==="Drag"){if(F.current!==null){let u=F.current;d(o=>{let N=[...o];return N.splice(u,1),N}),F.current=null}_.current=null}},B=n=>{l==="Drag"&&n.preventDefault()};return j("div",{class:"inputchips-container",style:{maxWidth:"600px"},children:[k("div",{class:"inputchips-mode",children:j("button",{onClick:E,class:"inputchips-mode-button",children:[t,":",k("br",{}),e.get(l)]})}),j("div",{class:"inputchips-container-list",children:[j("div",{class:"inputchips-list",children:[i&&k("div",{class:"inputchips-list-title",children:i}),k("div",{class:"inputchips-list-box",onDrop:Q,onDragOver:B,children:M.map((n,u)=>j("span",{draggable:l==="Drag",onDragStart:o=>G(o,n),onDragEnd:o=>U(o),class:"inputchips-chips inputchips-chips-available",style:{cursor:l==="Click"?"pointer":l==="Drag"?"grabbing":"none"},children:[n,l==="Click"&&k("button",{onClick:()=>W(n),class:"inputchips-chips-button inputchips-chips-button-add",children:"+"})]},`rem-${n}-${u}`))})]}),j("div",{class:"inputchips-list",children:[s&&k("div",{class:"inputchips-list-title",children:s}),k("div",{class:"inputchips-list-box",onDrop:n=>Z(n),onDragOver:K,children:f.map((n,u)=>j("span",{draggable:l==="Drag",onDragStart:o=>Y(o,u),onDragEnd:o=>q(o),onDrop:o=>{l==="Drag"&&(o.preventDefault(),Z(o,u))},onDragOver:o=>{l==="Drag"&&o.preventDefault()},class:"inputchips-chips inputchips-chips-selected",children:[l==="Click"&&j(de,{children:[u>0&&k("button",{onClick:()=>X(u),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2190"}),u<f.length-1&&k("button",{onClick:()=>J(u),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2192"})]}),n,l==="Click"&&k(de,{children:k("button",{onClick:()=>H(u),class:"inputchips-chips-button inputchips-chips-button-del",children:"x"})})]},`sel-${n}-${u}`))})]})]})]})}function he(a,i){let s=new Map;return(Array.isArray(a)?a:[a]).forEach(e=>{s.set(e.var,e.val)}),i&&(Array.isArray(i)?i:[i]).forEach(r=>{try{let p=r.val(s);s.set(r.var,p)}catch(p){console.error(`B\u0142\u0105d podczas obliczania zmiennej "${r.var}":`,p instanceof Error?p.message:String(p)),s.set(r.var,void 0)}}),s}function ge(a,i,s){if(s<=0)return[];let t=[];for(let e=0;e<s;e++)t.push(a+e*i);return t}function fe(a,i,s){let t=[];if(i===0)return a===s&&t.push(a),t;if(i>0){if(a>s)return t;for(let e=a;e<=s;e+=i)t.push(e)}else{if(a<s)return t;for(let e=a;e>=s;e+=i)t.push(e)}return t}function be(a,i,s){let t=[],e=i.map(h=>h==="=||"?"":`\u3010${h}\u3011`);t.push(e);let r=Math.max(...i.map(h=>Array.isArray(s.get(h))?s.get(h).length:0));for(let h=0;h<r;h++){let y=[];for(let l of i)if(l==="=||")y.push("");else{let c=s.get(l);Array.isArray(c)?y.push(c[h]??""):y.push("")}t.push(y)}function p(h){if(h.length===0)return[];let y=h.length,l=h[0].length,c=Array.from({length:l},()=>new Array(y));for(let f=0;f<y;f++)for(let d=0;d<l;d++)c[d][f]=h[f][d];return c}return a!="COL"?p(t):t}import{Fragment as ve,jsx as D,jsxs as ie}from"https://esm.sh/preact@10.26.8/jsx-runtime";function ye(a){let{data:i,mode:s,tableClassName:t,caption:e,thClassName:r,tdClassName:p}=a,h=s==="COL";if(i.length===0)return D("table",{className:t??""});let y=h?i[0]:i.map(c=>c[0]),l=h?i.slice(1):i.map(c=>c.slice(1));return ie("table",{className:`${h?"plot-col-data1":"plot-row-data1"} ${t??""}`,children:[e&&D("caption",{children:e}),D("tbody",{children:h?ie(ve,{children:[D("tr",{children:y.map((c,f)=>{let d=typeof c=="string"&&c!=="=||"?c:"NNOONNEE";return D("th",{className:`table-val-type--${d} ${r??""}`,children:c},d)})}),l.map((c,f)=>D("tr",{children:c.map((d,x)=>{let M=typeof y[x]=="string"&&y[x]!=="=||"?y[x]:"NNOONNEE";return D("td",{className:`table-val-type--${M} ${p??""}`,children:d},`${M}-row-${f}`)})},`row-${f}`))]}):D(ve,{children:i.map((c,f)=>{let d=typeof c[0]=="string"&&c[0]!=="=||"?c[0]:"NNOONNEE";return ie("tr",{className:`table-val-type--${d}`,children:[D("th",{scope:"row",className:r,children:c[0]}),c.slice(1).map((x,M)=>D("td",{className:p,children:x},`${d}-col-${M}`))]},`series-row-${d}`)})})})]})}function le(a){return Math.floor(Math.log2(a))}function S(a,i,s,t,e){let r=e?e(t):t;return a*2**(r+i)+s}function V(a){if(a<=0||!Number.isInteger(a))throw new Error("Argument musi by\u0107 dodatni\u0105 liczb\u0105 ca\u0142kowit\u0105.");return Math.log2(a&-a)}function je(a){return typeof a!="number"||isNaN(a)||!Number.isInteger(a)||a<=0}function Pe(a){return typeof a!="number"||isNaN(a)||!Number.isInteger(a)||a<0}function b(a,i,s){if(!Array.isArray(i))throw new Error(`Zmienne ${a}  musz\u0105 by\u0107 tablicami.`);switch(s){case"isNotValNaturalPos":if(i.some(je))throw new Error(`Wszystkie elementy w tablicy ${a} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi (wi\u0119kszymi od 0).`);break;case"isNotValNaturalPosWithZero":if(i.some(Pe))throw new Error(`Wszystkie elementy w tablicy ${a} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi z zero (wi\u0119kszymi od -1).`);break}}function L(a){return he([{var:"i",val:a}],[{var:"h",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((r,p)=>le(r))}},{var:"hA",val:t=>{let e=t.get("h");return b("h",e,"isNotValNaturalPosWithZero"),e.map((r,p)=>S(1,0,0,r))}},{var:"hZ",val:t=>{let e=t.get("h");return b("h",e,"isNotValNaturalPosWithZero"),e.map((r,p)=>S(1,1,-1,r))}},{var:"hAZ",val:t=>{let e=t.get("h");return b("h",e,"isNotValNaturalPosWithZero"),e.map((r,p)=>S(1.5,1,-1,r))}},{var:"hi",val:t=>{let e=t.get("i");b("i",e,"isNotValNaturalPos");let r=t.get("hA");return b("hA",r,"isNotValNaturalPos"),e.map((p,h)=>p-r[h])}},{var:"hj",val:t=>{let e=t.get("i");b("i",e,"isNotValNaturalPos");let r=t.get("hZ");return b("hZ",r,"isNotValNaturalPos"),e.map((p,h)=>r[h]-p)}},{var:"j",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((r,p)=>S(1.5,1,-1,le(r))-r)}},{var:"ki",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((r,p)=>V(r))}},{var:"kj",val:t=>{let e=t.get("j");return b("j",e,"isNotValNaturalPos"),e.map((r,p)=>V(r))}},{var:"kiA",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((r,p)=>S(1,0,0,r,V))}},{var:"kjA",val:t=>{let e=t.get("j");return b("j",e,"isNotValNaturalPos"),e.map((r,p)=>S(1,0,0,r,V))}},{var:"kiZ",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((r,p)=>S(1,1,-1,r,V))}},{var:"kjZ",val:t=>{let e=t.get("j");return b("j",e,"isNotValNaturalPos"),e.map((r,p)=>S(1,1,-1,r,V))}},{var:"li",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((r,p)=>r/S(1,0,0,r,V))}},{var:"lj",val:t=>{let e=t.get("j");return b("j",e,"isNotValNaturalPos"),e.map((r,p)=>r/S(1,0,0,r,V))}},{var:"mi",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((r,p)=>r/S(1,0,0,r,V)+1)}},{var:"wj",val:t=>{let e=t.get("j");return b("j",e,"isNotValNaturalPos"),e.map((r,p)=>r/S(1,0,0,r,V)+2)}}])}import{Fragment as $e,jsx as m,jsxs as z}from"https://esm.sh/preact@10.26.8/jsx-runtime";function Ne(){let a=R(1),i=R(10),s=R(new Map),t=L(ge(1,1,15));console.log("RES_MAP",t);let e=R(!0),r=R([]),p=()=>{if(isNaN(Number(a.value))||isNaN(Number(i.value))){console.error("Warto\u015Bci 'from' lub 'to' nie s\u0105 liczbami."),s.value=new Map;return}s.value=L(fe(Number(a.value),1,Number(i.value)))},h=()=>{e.value=!e.value},y=c=>{c!==void 0?a.value=c:a.value=0},l=c=>{c!==void 0?i.value=c:i.value=0};return z("main",{children:[m("h1",{children:"Matematyka w genealogii."}),z("div",{style:{display:"flex",alignItems:"stretch",gap:"40px",marginBottom:"20px",flexFlow:"row nowrap"},children:[m("button",{onClick:p,style:{padding:"0.5rem 1rem",fontSize:"1rem"},children:"Policz"}),z("fieldset",{class:"fieldset-inputs-number",style:{border:"3px solid #6c757d",borderRadius:"8px",padding:"20px",marginTop:"0",marginBottom:"0",display:"flex",alignItems:"flex-start",gap:"40px"},children:[m("legend",{style:{backgroundColor:"#000",color:"#fff",padding:"3px 6px"},children:"Choose range of \u3010i\u3011"}),m(ae,{name:"input1",value:a.value,onValueChange:y,def:1,min:1,step:1,placeholder:"Od","aria-label":"Warto\u015B\u0107 pocz\u0105tkowa przedzia\u0142u"}),m(ae,{name:"input2",value:i.value,onValueChange:l,def:7,min:a.value>=1?a.value:1,step:1,placeholder:"Do","aria-label":"Warto\u015B\u0107 ko\u0144cowa przedzia\u0142u"})]}),m(me,{availableValues:new Map([["h",1],["i",1],["j",1],["hi",1],["hj",1],["ki",1],["mi",1],["li",1],["lj",1],["wj",1],["kj",1],["hA",1],["hZ",1],["hAZ",1],["kiA",1],["kjA",1],["kiZ",1],["kjZ",1],["=||",20]]),defaultValues:["ki","mi","li","i","hi","kiA","kiZ","=||","h","hA","hZ","hAZ","=||","kjZ","kjA","hj","j","lj","wj","kj"],values:r.value,titleAvailable:"Dost\u0119pne:",titleSelected:"Wybrane:",onChange:c=>{r.value=c,console.log(r.value)}})]}),z("div",{children:[m("input",{type:"checkbox",id:"PlotPosition",name:"PlotPosition",checked:e.value,onClick:h}),m("label",{for:"PlotPosition",children:e.value?"Row":"Col"})]}),m("br",{}),m("br",{}),m("br",{}),s.value.size>0&&z($e,{children:[m("h3",{children:"Rezultat oblicze\u0144:"}),m(ye,{data:be(e.value?"ROW":"COL",r.value,s.value),mode:e.value?"ROW":"COL",caption:"Wyniki oblicze\u0144."})]}),m("p",{children:z("ul",{children:[m("li",{children:"\u3010i\u3011"}),m("li",{children:"\u3010h\u3011 = floor(log\u2082(i)) ||| dla przedzia\u0142u [i]"}),m("li",{children:"\u3010hA\u3011 = 2**h ||| dla przedzia\u0142u [h]"}),m("li",{children:"\u3010hZ\u3011 = 2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),m("li",{children:"\u3010hAZ\u3011 =3*2**h-1 = 1.5*2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),m("li",{children:"\u3010hi\u3011 =\u3010i\u3011 -\u3010hA\u3011"}),m("li",{children:"\u3010hj\u3011 =\u3010hZ\u3011 -\u3010i\u3011"}),m("li",{children:"\u3010j\u3011 =\u3010hAZ\u3011 -\u3010i\u3011"})]})}),m("p",{children:z("ul",{children:[m("li",{children:"\u3010ki\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [i]"}),m("li",{children:"\u3010kj\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [j]"}),m("li",{children:"\u3010kiA\u3011 = 2**\u3010ki\u3011"}),m("li",{children:"\u3010kjA\u3011 = 2**\u3010kj\u3011"}),m("li",{children:"\u3010li\u3011 =\u3010i\u3011/\u3010kiA\u3011"}),m("li",{children:"\u3010lj\u3011 =\u3010j\u3011/\u3010kjA\u3011"}),m("li",{children:"\u3010m\u3011 =\u3010li\u3011+1"}),m("li",{children:"\u3010w\u3011 =\u3010lj\u3011+2"})]})})]})}import{jsx as Te}from"https://esm.sh/preact@10.26.8/jsx-runtime";Oe(Te(Ne,{}),document.getElementById("root"));
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50c3giLCAiYXBwLnRzeCIsICJ1aS9JbnB1dE51bWJlci50c3giLCAidWkvSW5wdXRDaGlwc0xpc3QudHN4IiwgImxvZ2ljL2NhbGN1bGF0ZUV4Y2VsLnRzIiwgInVpL1Bsb3RFeGNlbC50c3giLCAibG9naWMvbWF0aEZ1bmMudHMiLCAiZGF0YS9nZW5lclRhYmxlMS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyoqIEBqc3hSdW50aW1lIGF1dG9tYXRpYyAqL1xyXG4vKiogQGpzeEltcG9ydFNvdXJjZSBodHRwczovL2VzbS5zaC9wcmVhY3RAMTAuMjYuOCAqL1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvcHJlYWN0QDEwLjI2LjhcIjtcclxuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwLnRzeFwiO1xyXG4vL2FhXHJcbnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikhKTtcclxuIiwgIi8qKiBAanN4UnVudGltZSBhdXRvbWF0aWMgKi9cbi8qKiBAanN4SW1wb3J0U291cmNlIGh0dHBzOi8vZXNtLnNoL3ByZWFjdEAxMC4yNi44ICovXG5pbXBvcnQgeyBzaWduYWwsIHVzZVNpZ25hbCB9IGZyb20gXCJodHRwczovL2VzbS5zaC9AcHJlYWN0L3NpZ25hbHNAMi4yLjBcIjtcbmltcG9ydCB7IElucHV0TnVtYmVyIH0gZnJvbSBcIi4vdWkvSW5wdXROdW1iZXIudHN4XCI7IC8vIFVwZXduaWogc2lcdTAxMTksIFx1MDE3Q2UgXHUwMTVCY2llXHUwMTdDa2EgamVzdCBwb3ByYXduYVxuaW1wb3J0IHsgSW5wdXRDaGlwc0xpc3QgfSBmcm9tIFwiLi91aS9JbnB1dENoaXBzTGlzdC50c3hcIjtcbmltcG9ydCB7XG4gIHR5cGUgRXhjZWxOZXN0ZWROLFxuICB0eXBlIEV4Y2VsUmVzdWx0cyxcbiAgRXhjZWxSZXN1bHRTb3J0aW5nT3V0cHV0QXRUYWJsZSxcbiAgaW5pdFJhbmdlRmlyc3RTdGVwTGFzdCxcbiAgaW5pdFJhbmdlRmlyc3RTdGVwU2l6ZSxcbn0gZnJvbSBcIi4vbG9naWMvY2FsY3VsYXRlRXhjZWwudHNcIjtcbmltcG9ydCAqIGFzIE1hdGhGIGZyb20gXCIuL2xvZ2ljL21hdGhGdW5jLnRzXCI7XG5pbXBvcnQgeyBQbG90SHRtbFRhYmxlIH0gZnJvbSBcIi4vdWkvUGxvdEV4Y2VsLnRzeFwiO1xuaW1wb3J0IGdlbmVyVGFibGUxIGZyb20gXCIuL2RhdGEvZ2VuZXJUYWJsZTEudHNcIjtcblxudHlwZSBTdGF0ZVBsb3RNYXAgPSBNYXA8c3RyaW5nLCAobnVtYmVyIHwgYm9vbGVhbilbXT47XG5cbi8vY29uc3QgcmVzdWx0TSA9IHNpZ25hbDxFeGNlbFJlc3VsdHM+KG5ldyBNYXA8c3RyaW5nLCBFeGNlbE5lc3RlZE4+KCkpO1xuXG5leHBvcnQgZnVuY3Rpb24gQXBwKCkge1xuICBjb25zdCBmcm9tID0gdXNlU2lnbmFsKDEpO1xuICBjb25zdCB0byA9IHVzZVNpZ25hbCgxMCk7XG4gIGNvbnN0IHJlc3VsdE0gPSB1c2VTaWduYWw8RXhjZWxSZXN1bHRzPihuZXcgTWFwPHN0cmluZywgRXhjZWxOZXN0ZWROPigpKTtcbiAgY29uc3QgcmVzdWx0UyA9IGdlbmVyVGFibGUxKGluaXRSYW5nZUZpcnN0U3RlcFNpemUoMSwgMSwgMTUpKTtcbiAgY29uc29sZS5sb2coXCJSRVNfTUFQXCIsIHJlc3VsdFMpO1xuICBjb25zdCBwbG90Um93ID0gdXNlU2lnbmFsKHRydWUpO1xuICBjb25zdCBwbG90U2V0ID0gdXNlU2lnbmFsPHN0cmluZ1tdPihbXSk7XG5cbiAgLypjb25zdCBwbG90TWFwID0gdXNlU2lnbmFsPFN0YXRlUGxvdE1hcD4obmV3IE1hcDxzdHJpbmcsIChudW1iZXIgfCBib29sZWFuKVtdPihcblxuICApKTsqL1xuICBjb25zdCBjYWxjdWxhdGUgPSAoKSA9PiB7XG4gICAgLy8gVXBld25paiBzaVx1MDExOSwgXHUwMTdDZSB3YXJ0b1x1MDE1QmNpIHNcdTAxMDUgbGljemJhbWkgcHJ6ZWQgcFx1MDExOXRsXHUwMTA1XG4gICAgaWYgKGlzTmFOKE51bWJlcihmcm9tLnZhbHVlKSkgfHwgaXNOYU4oTnVtYmVyKHRvLnZhbHVlKSkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJXYXJ0b1x1MDE1QmNpICdmcm9tJyBsdWIgJ3RvJyBuaWUgc1x1MDEwNSBsaWN6YmFtaS5cIik7XG4gICAgICByZXN1bHRNLnZhbHVlID0gbmV3IE1hcDxzdHJpbmcsIEV4Y2VsTmVzdGVkTj4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXN1bHRNLnZhbHVlID0gZ2VuZXJUYWJsZTEoXG4gICAgICBpbml0UmFuZ2VGaXJzdFN0ZXBMYXN0KE51bWJlcihmcm9tLnZhbHVlKSwgMSwgTnVtYmVyKHRvLnZhbHVlKSksXG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBjaGFuZ2VQb3MgPSAoKSA9PiB7XG4gICAgcGxvdFJvdy52YWx1ZSA9ICFwbG90Um93LnZhbHVlO1xuICB9O1xuXG4gIC8vIEhhbmRsZXIgZGxhIG9uVmFsdWVDaGFuZ2UsIGt0XHUwMEYzcnkgb2R6d2llcmNpZWRsYSB6YWNob3dhbmllIGArKGUuY3VycmVudFRhcmdldC52YWx1ZSlgXG4gIC8vIEtpZWR5IGlucHV0IGplc3QgcHVzdHksIGBlLmN1cnJlbnRUYXJnZXQudmFsdWVgIHRvIFwiXCIsIGEgYCtcIlwiYCB0byAwLlxuICAvLyBOYXN6IGBvblZhbHVlQ2hhbmdlYCBwcnpla2F6dWplIGB1bmRlZmluZWRgLCBnZHkgYHZhbHVlQXNOdW1iZXJgIHRvIE5hTiAobnAuIGRsYSBwdXN0ZWdvIGlucHV0dSkuXG4gIGNvbnN0IGhhbmRsZUZyb21DaGFuZ2UgPSAobmV3VmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCkgPT4ge1xuICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmcm9tLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyb20udmFsdWUgPSAwOyAvLyBMdWIgaW5uYSB3YXJ0b1x1MDE1Qlx1MDEwNyBkb215XHUwMTVCbG5hLCBucC4gMSwgamVcdTAxNUJsaSB0byBiYXJkemllaiBzZW5zb3duZVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVUb0NoYW5nZSA9IChuZXdWYWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgaWYgKG5ld1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRvLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvLnZhbHVlID0gMDsgLy8gTHViIGlubmEgd2FydG9cdTAxNUJcdTAxMDcgZG9teVx1MDE1QmxuYVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxtYWluPlxuICAgICAgPGgxPk1hdGVtYXR5a2EgdyBnZW5lYWxvZ2lpLjwvaDE+XG4gICAgICA8ZGl2XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgYWxpZ25JdGVtczogXCJzdHJldGNoXCIsXG4gICAgICAgICAgZ2FwOiBcIjQwcHhcIixcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IFwiMjBweFwiLFxuICAgICAgICAgIGZsZXhGbG93OiBcInJvdyBub3dyYXBcIixcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e2NhbGN1bGF0ZX1cbiAgICAgICAgICBzdHlsZT17eyBwYWRkaW5nOiBcIjAuNXJlbSAxcmVtXCIsIGZvbnRTaXplOiBcIjFyZW1cIiB9fVxuICAgICAgICA+XG4gICAgICAgICAgUG9saWN6XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8ZmllbGRzZXRcbiAgICAgICAgICBjbGFzcz1cImZpZWxkc2V0LWlucHV0cy1udW1iZXJcIlxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBib3JkZXI6IFwiM3B4IHNvbGlkICM2Yzc1N2RcIixcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI4cHhcIixcbiAgICAgICAgICAgIHBhZGRpbmc6IFwiMjBweFwiLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiBcIjBcIixcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogXCIwXCIsXG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiZmxleC1zdGFydFwiLFxuICAgICAgICAgICAgZ2FwOiBcIjQwcHhcIixcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGxlZ2VuZFxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiMwMDBcIixcbiAgICAgICAgICAgICAgY29sb3I6IFwiI2ZmZlwiLFxuICAgICAgICAgICAgICBwYWRkaW5nOiBcIjNweCA2cHhcIixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ2hvb3NlIHJhbmdlIG9mIFx1MzAxMGlcdTMwMTFcbiAgICAgICAgICA8L2xlZ2VuZD5cblxuICAgICAgICAgIDxJbnB1dE51bWJlclxuICAgICAgICAgICAgbmFtZT1cImlucHV0MVwiXG4gICAgICAgICAgICB2YWx1ZT17ZnJvbS52YWx1ZX1cbiAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e2hhbmRsZUZyb21DaGFuZ2V9XG4gICAgICAgICAgICBkZWY9ezF9XG4gICAgICAgICAgICBtaW49ezF9IC8vIGxvZzIgamVzdCB6ZGVmaW5pb3dhbnkgZGxhIGxpY3piID4gMFxuICAgICAgICAgICAgc3RlcD17MX1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiT2RcIlxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cIldhcnRvXHUwMTVCXHUwMTA3IHBvY3pcdTAxMDV0a293YSBwcnplZHppYVx1MDE0MnVcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPElucHV0TnVtYmVyXG4gICAgICAgICAgICBuYW1lPVwiaW5wdXQyXCJcbiAgICAgICAgICAgIHZhbHVlPXt0by52YWx1ZX1cbiAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e2hhbmRsZVRvQ2hhbmdlfVxuICAgICAgICAgICAgZGVmPXs3fVxuICAgICAgICAgICAgbWluPXtmcm9tLnZhbHVlID49IDEgPyBmcm9tLnZhbHVlIDogMX0gLy8gJ3RvJyBuaWUgcG93aW5ubyBieVx1MDEwNyBtbmllanN6ZSBuaVx1MDE3QyAnZnJvbSdcbiAgICAgICAgICAgIHN0ZXA9ezF9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRvXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJXYXJ0b1x1MDE1Qlx1MDEwNyBrb1x1MDE0NGNvd2EgcHJ6ZWR6aWFcdTAxNDJ1XCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2ZpZWxkc2V0PlxuICAgICAgICA8SW5wdXRDaGlwc0xpc3RcbiAgICAgICAgICBhdmFpbGFibGVWYWx1ZXM9e25ldyBNYXA8c3RyaW5nLCBudW1iZXI+KFtcbiAgICAgICAgICAgIFtcImhcIiwgMV0sXG4gICAgICAgICAgICBbXCJpXCIsIDFdLFxuICAgICAgICAgICAgW1wialwiLCAxXSxcbiAgICAgICAgICAgIC8vXCIgXCIsXG4gICAgICAgICAgICBbXCJoaVwiLCAxXSxcbiAgICAgICAgICAgIFtcImhqXCIsIDFdLFxuICAgICAgICAgICAgLy9cIiBcIixcbiAgICAgICAgICAgIFtcImtpXCIsIDFdLFxuICAgICAgICAgICAgW1wibWlcIiwgMV0sXG4gICAgICAgICAgICBbXCJsaVwiLCAxXSxcbiAgICAgICAgICAgIC8vXCIgXCIsXG4gICAgICAgICAgICBbXCJsalwiLCAxXSxcbiAgICAgICAgICAgIFtcIndqXCIsIDFdLFxuICAgICAgICAgICAgW1wia2pcIiwgMV0sXG4gICAgICAgICAgICAvL1wiIFwiLFxuICAgICAgICAgICAgW1wiaEFcIiwgMV0sXG4gICAgICAgICAgICBbXCJoWlwiLCAxXSxcbiAgICAgICAgICAgIFtcImhBWlwiLCAxXSxcbiAgICAgICAgICAgIC8vXCIgXCIsXG4gICAgICAgICAgICBbXCJraUFcIiwgMV0sXG4gICAgICAgICAgICBbXCJrakFcIiwgMV0sXG4gICAgICAgICAgICAvL1wiIFwiLFxuICAgICAgICAgICAgW1wia2laXCIsIDFdLFxuICAgICAgICAgICAgW1wia2paXCIsIDFdLFxuICAgICAgICAgICAgLy9cIiBcIixcbiAgICAgICAgICAgIFtcIj18fFwiLCAyMF0sXG4gICAgICAgICAgXSl9XG4gICAgICAgICAgZGVmYXVsdFZhbHVlcz17W1xuICAgICAgICAgICAgXCJraVwiLFxuICAgICAgICAgICAgXCJtaVwiLFxuICAgICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgICAgXCJpXCIsXG4gICAgICAgICAgICBcImhpXCIsXG4gICAgICAgICAgICBcImtpQVwiLFxuICAgICAgICAgICAgXCJraVpcIixcbiAgICAgICAgICAgIFwiPXx8XCIsXG4gICAgICAgICAgICBcImhcIixcbiAgICAgICAgICAgIFwiaEFcIixcbiAgICAgICAgICAgIFwiaFpcIixcbiAgICAgICAgICAgIFwiaEFaXCIsXG4gICAgICAgICAgICBcIj18fFwiLFxuICAgICAgICAgICAgXCJralpcIixcbiAgICAgICAgICAgIFwia2pBXCIsXG4gICAgICAgICAgICBcImhqXCIsXG4gICAgICAgICAgICBcImpcIixcbiAgICAgICAgICAgIFwibGpcIixcbiAgICAgICAgICAgIFwid2pcIixcbiAgICAgICAgICAgIFwia2pcIixcbiAgICAgICAgICBdfVxuICAgICAgICAgIHZhbHVlcz17cGxvdFNldC52YWx1ZX1cbiAgICAgICAgICB0aXRsZUF2YWlsYWJsZT1cIkRvc3RcdTAxMTlwbmU6XCJcbiAgICAgICAgICB0aXRsZVNlbGVjdGVkPVwiV3licmFuZTpcIlxuICAgICAgICAgIG9uQ2hhbmdlPXsodmFsKSA9PiB7XG4gICAgICAgICAgICBwbG90U2V0LnZhbHVlID0gdmFsO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocGxvdFNldC52YWx1ZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICBpZD1cIlBsb3RQb3NpdGlvblwiXG4gICAgICAgICAgbmFtZT1cIlBsb3RQb3NpdGlvblwiXG4gICAgICAgICAgY2hlY2tlZD17cGxvdFJvdy52YWx1ZX1cbiAgICAgICAgICBvbkNsaWNrPXtjaGFuZ2VQb3N9XG4gICAgICAgIC8+XG4gICAgICAgIDxsYWJlbCBmb3I9XCJQbG90UG9zaXRpb25cIj57cGxvdFJvdy52YWx1ZSA/IFwiUm93XCIgOiBcIkNvbFwifTwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxiciAvPlxuICAgICAgPGJyIC8+XG4gICAgICA8YnIgLz5cblxuICAgICAge3Jlc3VsdE0udmFsdWUuc2l6ZSA+IDAgJiYgKFxuICAgICAgICA8PlxuICAgICAgICAgIDxoMz5SZXp1bHRhdCBvYmxpY3plXHUwMTQ0OjwvaDM+XG4gICAgICAgICAgPFBsb3RIdG1sVGFibGVcbiAgICAgICAgICAgIGRhdGE9e0V4Y2VsUmVzdWx0U29ydGluZ091dHB1dEF0VGFibGUoXG4gICAgICAgICAgICAgIHBsb3RSb3cudmFsdWUgPyBcIlJPV1wiIDogXCJDT0xcIixcbiAgICAgICAgICAgICAgcGxvdFNldC52YWx1ZSxcbiAgICAgICAgICAgICAgcmVzdWx0TS52YWx1ZSxcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICBtb2RlPXtwbG90Um93LnZhbHVlID8gXCJST1dcIiA6IFwiQ09MXCJ9XG4gICAgICAgICAgICBjYXB0aW9uPVwiV3luaWtpIG9ibGljemVcdTAxNDQuXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8Lz5cbiAgICAgICl9XG5cbiAgICAgIDxwPlxuICAgICAgICA8dWw+XG4gICAgICAgICAgPGxpPlx1MzAxMGlcdTMwMTE8L2xpPlxuICAgICAgICAgIDxsaT5cdTMwMTBoXHUzMDExID0gZmxvb3IobG9nXHUyMDgyKGkpKSB8fHwgZGxhIHByemVkemlhXHUwMTQydSBbaV08L2xpPlxuICAgICAgICAgIDxsaT5cdTMwMTBoQVx1MzAxMSA9IDIqKmggfHx8IGRsYSBwcnplZHppYVx1MDE0MnUgW2hdPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwaFpcdTMwMTEgPSAyKiooaCsxKS0xIHx8fCBkbGEgcHJ6ZWR6aWFcdTAxNDJ1IFtoXTwvbGk+XG4gICAgICAgICAgPGxpPlx1MzAxMGhBWlx1MzAxMSA9MyoyKipoLTEgPSAxLjUqMioqKGgrMSktMSB8fHwgZGxhIHByemVkemlhXHUwMTQydSBbaF08L2xpPlxuICAgICAgICAgIDxsaT5cdTMwMTBoaVx1MzAxMSA9XHUzMDEwaVx1MzAxMSAtXHUzMDEwaEFcdTMwMTE8L2xpPlxuICAgICAgICAgIDxsaT5cdTMwMTBoalx1MzAxMSA9XHUzMDEwaFpcdTMwMTEgLVx1MzAxMGlcdTMwMTE8L2xpPlxuICAgICAgICAgIDxsaT5cdTMwMTBqXHUzMDExID1cdTMwMTBoQVpcdTMwMTEgLVx1MzAxMGlcdTMwMTE8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9wPlxuICAgICAgPHA+XG4gICAgICAgIDx1bD5cbiAgICAgICAgICA8bGk+XG4gICAgICAgICAgICBcdTMwMTBraVx1MzAxMSA9IHdhbHVhY2phIGR3dS1hZHljem5hIGxpY3pieSBuYXR1cmFsbmVqIGRvZGF0bmllaiBbaV1cbiAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgIFx1MzAxMGtqXHUzMDExID0gd2FsdWFjamEgZHd1LWFkeWN6bmEgbGljemJ5IG5hdHVyYWxuZWogZG9kYXRuaWVqIFtqXVxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPGxpPlx1MzAxMGtpQVx1MzAxMSA9IDIqKlx1MzAxMGtpXHUzMDExPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwa2pBXHUzMDExID0gMioqXHUzMDEwa2pcdTMwMTE8L2xpPlxuICAgICAgICAgIDxsaT5cdTMwMTBsaVx1MzAxMSA9XHUzMDEwaVx1MzAxMS9cdTMwMTBraUFcdTMwMTE8L2xpPlxuICAgICAgICAgIDxsaT5cdTMwMTBsalx1MzAxMSA9XHUzMDEwalx1MzAxMS9cdTMwMTBrakFcdTMwMTE8L2xpPlxuICAgICAgICAgIDxsaT5cdTMwMTBtXHUzMDExID1cdTMwMTBsaVx1MzAxMSsxPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwd1x1MzAxMSA9XHUzMDEwbGpcdTMwMTErMjwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L3A+XG4gICAgPC9tYWluPlxuICApO1xufVxuIiwgIi8qKiBAanN4UnVudGltZSBhdXRvbWF0aWMgKi9cclxuLyoqIEBqc3hJbXBvcnRTb3VyY2UgaHR0cHM6Ly9lc20uc2gvcHJlYWN0QDEwLjI2LjggKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgdXNlQ2FsbGJhY2ssXHJcbiAgdXNlRWZmZWN0LFxyXG4gIHVzZVJlZixcclxufSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvcHJlYWN0QDEwLjI2LjgvaG9va3NcIjtcclxuaW1wb3J0IHsgSlNYIH0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL3ByZWFjdEAxMC4yNi44XCI7XHJcblxyXG4vLyBaYXdhcnRvXHUwMTVCXHUwMTA3IFNWRyBkbGEgZG9teVx1MDE1QmxueWNoIGlrb24gKy8tIChqZVx1MDE1QmxpIHpkZWN5ZHVqZXN6IHNpXHUwMTE5IGplIG5ha1x1MDE0MmFkYVx1MDEwNylcclxuLy8gTmEgcmF6aWUgbmllIHNcdTAxMDUgb25lIGF1dG9tYXR5Y3puaWUgcmVuZGVyb3dhbmUgdyB0ZWogd2Vyc2ppLFxyXG4vLyBwb25pZXdhXHUwMTdDIHpha1x1MDE0MmFkYW0sIFx1MDE3Q2UgVHdcdTAwRjNqIGdcdTAxNDJcdTAwRjN3bnkgU1ZHIGRlZmluaXVqZSB3eWdsXHUwMTA1ZCBwcnp5Y2lza1x1MDBGM3cuXHJcbi8vIEplXHUwMTVCbGkgY2hjZXN6IGplIGRvZGFcdTAxMDcsIG11c2lzeiBwcnp5d3JcdTAwRjNjaVx1MDEwNyBsb2dpa1x1MDExOSBpY2ggcmVuZGVyb3dhbmlhIHogdHJhbnNmb3JtYWNqYW1pLlxyXG5jb25zdCBEZWZhdWx0RGVjcmVtZW50SWNvblN2Z0NvbnRlbnQgPSAoXHJcbiAgPHJlY3QgeD1cIjVcIiB5PVwiMTFcIiB3aWR0aD1cIjE0XCIgaGVpZ2h0PVwiMlwiIHJ4PVwiMVwiIC8+XHJcbik7XHJcbmNvbnN0IERlZmF1bHRJbmNyZW1lbnRJY29uU3ZnQ29udGVudCA9IChcclxuICA8PlxyXG4gICAgPHJlY3QgeD1cIjExXCIgeT1cIjVcIiB3aWR0aD1cIjJcIiBoZWlnaHQ9XCIxNFwiIHJ4PVwiMVwiIC8+XHJcbiAgICA8cmVjdCB4PVwiNVwiIHk9XCIxMVwiIHdpZHRoPVwiMTRcIiBoZWlnaHQ9XCIyXCIgcng9XCIxXCIgLz5cclxuICA8Lz5cclxuKTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXROdW1iZXJQcm9wcyB7XHJcbiAgdmFsdWU/OiBzdHJpbmcgfCBudW1iZXI7XHJcbiAgZGVmYXVsdFZhbHVlPzogc3RyaW5nIHwgbnVtYmVyO1xyXG4gIGRlZj86IHN0cmluZyB8IG51bWJlcjtcclxuICBtaW4/OiBzdHJpbmcgfCBudW1iZXI7XHJcbiAgbWF4Pzogc3RyaW5nIHwgbnVtYmVyO1xyXG4gIHN0ZXA/OiBzdHJpbmcgfCBudW1iZXI7XHJcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XHJcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xyXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcclxuICBuYW1lPzogc3RyaW5nO1xyXG4gIGlkPzogc3RyaW5nO1xyXG4gIHJlYWRPbmx5PzogYm9vbGVhbjtcclxuICBvbkNoYW5nZT86IChldmVudDogSlNYLlRhcmdldGVkRXZlbnQ8SFRNTElucHV0RWxlbWVudCwgRXZlbnQ+KSA9PiB2b2lkO1xyXG4gIG9uVmFsdWVDaGFuZ2U/OiAobmV3VmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCwgbmFtZT86IHN0cmluZykgPT4gdm9pZDtcclxuICByYXRpb1NJWkU/OiBudW1iZXI7XHJcbiAgd3JhcHBlckNsYXNzTmFtZT86IHN0cmluZztcclxuICBzdmdDbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgaW5wdXRDbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgc3R5bGU/OiBKU1guQ1NTUHJvcGVydGllcztcclxuICBzZWxlY3RCdXR0b25TdHlsZT86IEpTWC5DU1NQcm9wZXJ0aWVzO1xyXG4gIGluY3JlbWVudEJ1dHRvblN0eWxlPzogSlNYLkNTU1Byb3BlcnRpZXM7XHJcbiAgZGVjcmVtZW50QnV0dG9uU3R5bGU/OiBKU1guQ1NTUHJvcGVydGllcztcclxuICBpbnB1dEFyZWFTdHlsZT86IEpTWC5DU1NQcm9wZXJ0aWVzO1xyXG4gIHNlbGVjdEJ1dHRvbkZpbGw/OiBzdHJpbmc7XHJcbiAgaW5jcmVtZW50QnV0dG9uRmlsbD86IHN0cmluZztcclxuICBkZWNyZW1lbnRCdXR0b25GaWxsPzogc3RyaW5nO1xyXG4gIGlucHV0QXJlYVJlY3RGaWxsPzogc3RyaW5nO1xyXG4gIGlucHV0QXJlYUJvcmRlckZpbGw/OiBzdHJpbmc7XHJcbiAgLy8gaWNvbkZpbGw/OiBzdHJpbmc7IC8vIEplXHUwMTVCbGkgYlx1MDExOWR6aWVzeiB1XHUwMTdDeXdhXHUwMTQyIG9zb2JueWNoIGlrb24gKy8tXHJcbiAgW2tleTogc3RyaW5nXTogYW55O1xyXG59XHJcblxyXG5jb25zdCBzdmdMYXlvdXREYXRhID0ge1xyXG4gIGJhc2VWaWV3Qm94V2lkdGg6IDE3NCxcclxuICBiYXNlVmlld0JveEhlaWdodDogNzIsXHJcbiAgYnV0dG9uczoge1xyXG4gICAgY2hvb3NlOiB7IC8vIFptaWVuaW9ubyB6ICdzZWxlY2VjdCcgbmEgJ2Nob29zZScgZGxhIHNwXHUwMEYzam5vXHUwMTVCY2kgeiBUd29pbSBIVE1MXHJcbiAgICAgIG5hbWU6IFwiYnRuLWNob29zZVwiLFxyXG4gICAgICBwYXRoczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRhdGFOYW1lOiBcImJ0bi1maWxsXCIsXHJcbiAgICAgICAgICBkOiBcIk0xMTUuNzUsNzEuNjJjLTEwLjAzLDAtMTkuOTMtMS42Mi0yOC42My00LjY3bC0uMTItLjA0LS4xMi4wNGMtOC43LDMuMDYtMTguNTksNC42Ny0yOC42Myw0LjY3LTEzLjA2LDAtMjUuODEtMi43NS0zNi4wMi03Ljc1bDI2Ljk2LTE1LjIxaDc1LjYxbDI2Ljk2LDE1LjIxYy0xMC4yLDUtMjIuOTYsNy43NS0zNi4wMiw3Ljc1WlwiLFxyXG4gICAgICAgICAgZGVmYXVsdEZpbGw6IFwiIzkxOTE5MVwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZGF0YU5hbWU6IFwiYnRuLWJvcmRlci1maWxsXCIsXHJcbiAgICAgICAgICBkOiBcIk0xMjQuNzEsNDkuMDRsMjYuMjUsMTQuODFjLTEwLjA0LDQuNzgtMjIuNDgsNy40LTM1LjIxLDcuNC05Ljk5LDAtMTkuODQtMS42MS0yOC41LTQuNjVsLS4yNS0uMDktLjI1LjA5Yy04LjY2LDMuMDQtMTguNTEsNC42NS0yOC41LDQuNjUtMTIuNzMsMC0yNS4xNi0yLjYyLTM1LjIxLTcuNGwyNi4yNS0xNC44MWg3NS40MU0xMjQuOSw0OC4yOUg0OS4xbC0yNy42NiwxNS42YzEwLjAzLDUuMDYsMjIuODUsOC4xMSwzNi44Miw4LjExLDEwLjQ2LDAsMjAuMjctMS43MSwyOC43NS00LjY5LDguNDgsMi45OCwxOC4yOSw0LjY5LDI4Ljc1LDQuNjksMTMuOTcsMCwyNi43OC0zLjA0LDM2LjgyLTguMTFsLTI3LjY2LTE1LjZoMFpcIixcclxuICAgICAgICAgIGRlZmF1bHRGaWxsOlxyXG4gICAgICAgICAgICBcIiM1MDUwNTBcIiwgLyogS29sb3IgZGxhIG9icnlzdS9kcnVnaWVqIHdhcnN0d3ksIGRvc3Rvc3VqICovXHJcbiAgICAgICAgfSxcclxuICAgICAgXSxcclxuICAgIH0sXHJcbiAgICBpbmNyZW1lbnQ6IHtcclxuICAgICAgbmFtZTogXCJidG4taW5jcmVtZW50XCIsXHJcbiAgICAgIHBhdGhzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZGF0YU5hbWU6IFwiYnRuLWZpbGxcIixcclxuICAgICAgICAgIGQ6IFwiTTEyNy4zOCw0My41MVYxLjFjMjYuODMsMy4zNyw0Ni4yNSwxOC4wMSw0Ni4yNSwzNC45LDAsOS4xOS01LjY4LDE3LjkxLTE2LjAxLDI0LjU3bC0zMC4yNC0xNy4wNlpcIixcclxuICAgICAgICAgIGRlZmF1bHRGaWxsOiBcIiMyMTU5N2ZcIixcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRhdGFOYW1lOiBcImJ0bi1ib3JkZXItZmlsbFwiLFxyXG4gICAgICAgICAgZDogXCJNMTI3Ljc1LDEuNTNjMjYuNDIsMy40NSw0NS41LDE3Ljg2LDQ1LjUsMzQuNDcsMCw5LTUuNTUsMTcuNTYtMTUuNjUsMjQuMTNsLTI5Ljg1LTE2Ljg0VjEuNTNNMTI3LC42OHY0My4wNWwzMC42MywxNy4yOGMxMC4xMy02LjQ4LDE2LjM3LTE1LjI5LDE2LjM3LTI1LjAxLDAtMTcuNS0yMC4yMS0zMi4wOC00Ny0zNS4zMmgwWlwiLFxyXG4gICAgICAgICAgZGVmYXVsdEZpbGw6IFwiIzEwNDA2MFwiLCAvKiBDaWVtbmllanN6eSBkbGEgb2JyeXN1PyBEb3N0b3N1aiAqL1xyXG4gICAgICAgIH0sXHJcbiAgICAgIF0sXHJcbiAgICAgIGljb25BbmNob3JYOiAxNTAsIC8vIDE1MHB4IHcgcHJhd28gKHcgc3lzdGVtaWUgdmlld0JveCAxNzR4NzIpXHJcbiAgICAgIGljb25BbmNob3JZOiAzMCwgLy8gMzBweCB3IGRcdTAwRjNcdTAxNDIgKHcgc3lzdGVtaWUgdmlld0JveCAxNzR4NzIpXHJcbiAgICB9LFxyXG4gICAgZGVjcmVtZW50OiB7XHJcbiAgICAgIG5hbWU6IFwiYnRuLWRlY3JlbWVudFwiLFxyXG4gICAgICBwYXRoczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRhdGFOYW1lOiBcImJ0bi1maWxsXCIsXHJcbiAgICAgICAgICBkOiBcIk0xNi4zOCw2MC41N0M2LjA2LDUzLjkxLjM4LDQ1LjE5LjM4LDM2LC4zOCwxOS4xMSwxOS44LDQuNDcsNDYuNjIsMS4xdjQyLjQxbC0zMC4yNCwxNy4wNlpcIixcclxuICAgICAgICAgIGRlZmF1bHRGaWxsOiBcIiNiMjEwMTBcIixcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRhdGFOYW1lOiBcImJ0bi1ib3JkZXItZmlsbFwiLFxyXG4gICAgICAgICAgZDogXCJNNDYuMjUsMS41M3Y0MS43Nmgwcy0yOS44NSwxNi44NC0yOS44NSwxNi44NEM2LjMsNTMuNTYuNzUsNDUsLjc1LDM2LC43NSwxOS4zOSwxOS44Myw0Ljk3LDQ2LjI1LDEuNTNNNDcsLjY4QzIwLjIxLDMuOTIsMCwxOC41LDAsMzZjMCw5LjcyLDYuMjQsMTguNTMsMTYuMzcsMjUuMDFsMzAuNjMtMTcuMjhWLjY4aDBaXCIsXHJcbiAgICAgICAgICBkZWZhdWx0RmlsbDogXCIjODAwMDAwXCIsIC8qIENpZW1uaWVqc3p5IGRsYSBvYnJ5c3U/IERvc3Rvc3VqICovXHJcbiAgICAgICAgfSxcclxuICAgICAgXSxcclxuICAgICAgaWNvbkFuY2hvclg6IDI1LCAvLyAyMHB4IHcgcHJhd28gKHcgc3lzdGVtaWUgdmlld0JveCAxNzR4NzIpXHJcbiAgICAgIGljb25BbmNob3JZOiAzMCwgLy8gMzBweCB3IGRcdTAwRjNcdTAxNDIgKHcgc3lzdGVtaWUgdmlld0JveCAxNzR4NzIpXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgaW5wdXRBcmVhOiB7XHJcbiAgICBuYW1lOiBcImlucHV0XCIsXHJcbiAgICByZWN0OiB7XHJcbiAgICAgIHg6IDUyLjM4LFxyXG4gICAgICB5OiAwLjM4LFxyXG4gICAgICB3aWR0aDogNjkuMjUsXHJcbiAgICAgIGhlaWdodDogNDIuNTQsXHJcbiAgICAgIGRlZmF1bHRGaWxsOiBcIiNmZmZcIixcclxuICAgIH0sXHJcbiAgICBib3JkZXJQYXRoOiB7XHJcbiAgICAgIGQ6IFwiTTEyMS4yNS43NXY0MS43OUg1Mi43NVYuNzVoNjguNU0xMjIsMEg1MnY0My4yOWg3MFYwaDBaXCIsXHJcbiAgICAgIGRlZmF1bHRGaWxsOiBcIiMzMzNcIixcclxuICAgIH0sXHJcbiAgfSxcclxufTtcclxuXHJcbmNvbnN0IENPTlRBSU5FUl9DTEFTU19OQU1FID0gXCJpbnB1dG51bWJlci1jb250YWluZXJcIjtcclxuY29uc3QgU1ZHX0NMQVNTX05BTUUgPSBcImlucHV0bnVtYmVyLXN2Z1wiO1xyXG5jb25zdCBTVkdfQlVUVE9OX0NMQVNTX05BTUUgPSBcImlucHV0bnVtYmVyLXN2Zy1idXR0b25cIjsgLy8gVVx1MDE3Q3l3YW5lIHcgVHdvaW0gSFRNTFxyXG5jb25zdCBIVE1MX0lOUFVUX0NMQVNTX05BTUUgPSBcImlucHV0bnVtYmVyLWh0bWwtaW5wdXRcIjsgLy8gVVx1MDE3Q3l3YW5lIHcgVHdvaW0gSFRNTFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIElucHV0TnVtYmVyKHByb3BzOiBJbnB1dE51bWJlclByb3BzKTogSlNYLkVsZW1lbnQge1xyXG4gIGNvbnN0IHtcclxuICAgIHZhbHVlLFxyXG4gICAgZGVmYXVsdFZhbHVlLFxyXG4gICAgZGVmID0gMSxcclxuICAgIG1pbixcclxuICAgIG1heCxcclxuICAgIHN0ZXAgPSAxLFxyXG4gICAgcGxhY2Vob2xkZXIsXHJcbiAgICByZXF1aXJlZCxcclxuICAgIGRpc2FibGVkID0gZmFsc2UsXHJcbiAgICBuYW1lLFxyXG4gICAgaWQsXHJcbiAgICByZWFkT25seSA9IGZhbHNlLFxyXG4gICAgb25DaGFuZ2UsXHJcbiAgICBvblZhbHVlQ2hhbmdlLFxyXG4gICAgcmF0aW9TSVpFID0gMSxcclxuICAgIHdyYXBwZXJDbGFzc05hbWUsXHJcbiAgICBzdmdDbGFzc05hbWUsXHJcbiAgICBpbnB1dENsYXNzTmFtZSxcclxuICAgIHN0eWxlLFxyXG4gICAgc2VsZWN0QnV0dG9uU3R5bGUsXHJcbiAgICBpbmNyZW1lbnRCdXR0b25TdHlsZSxcclxuICAgIGRlY3JlbWVudEJ1dHRvblN0eWxlLFxyXG4gICAgaW5wdXRBcmVhU3R5bGUsXHJcbiAgICBzZWxlY3RCdXR0b25GaWxsLFxyXG4gICAgaW5jcmVtZW50QnV0dG9uRmlsbCxcclxuICAgIGRlY3JlbWVudEJ1dHRvbkZpbGwsXHJcbiAgICBpbnB1dEFyZWFSZWN0RmlsbCxcclxuICAgIGlucHV0QXJlYUJvcmRlckZpbGwsXHJcbiAgICAvLyBpY29uRmlsbCA9IFwid2hpdGVcIiwgLy8gSmVcdTAxNUJsaSBiXHUwMTE5ZHppZXN6IHJlbmRlcm93YVx1MDEwNyBvc29ibmUgaWtvbnkgKy8tXHJcbiAgICAuLi5yZXN0RGl2UHJvcHNcclxuICB9ID0gcHJvcHM7XHJcblxyXG4gIGNvbnN0IGlucHV0UmVmID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xyXG5cclxuICAvLyBJbmljamFsaXphY2phIHdhcnRvXHUwMTVCY2kgaW5wdXRhIHByenkgbW9udG93YW5pdSBsdWIgem1pYW5pZSBkZWZhdWx0VmFsdWUvdmFsdWVcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKGlucHV0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpbnB1dFJlZi5jdXJyZW50LnZhbHVlID0gU3RyaW5nKHZhbHVlKTtcclxuICAgICAgfSBlbHNlIGlmIChkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlucHV0UmVmLmN1cnJlbnQudmFsdWUgPSBTdHJpbmcoZGVmYXVsdFZhbHVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbnB1dFJlZi5jdXJyZW50LnZhbHVlID0gXCJcIjsgLy8gSmF3bmUgdXN0YXdpZW5pZSBuYSBwdXN0eSBzdHJpbmcsIGplXHUwMTVCbGkgYnJhayB3YXJ0b1x1MDE1QmNpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCBbdmFsdWUsIGRlZmF1bHRWYWx1ZV0pO1xyXG5cclxuICBjb25zdCBoYW5kbGVTdGVwID0gdXNlQ2FsbGJhY2soKGRpcmVjdGlvbjogXCJ1cFwiIHwgXCJkb3duXCIpID0+IHtcclxuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ICYmICFkaXNhYmxlZCAmJiAhcmVhZE9ubHkpIHtcclxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJ1cFwiKSBpbnB1dFJlZi5jdXJyZW50LnN0ZXBVcCgpO1xyXG4gICAgICBlbHNlIGlucHV0UmVmLmN1cnJlbnQuc3RlcERvd24oKTtcclxuXHJcbiAgICAgIC8vIFN5bXVsYWNqYSB6ZGFyemVuaWEgaW5wdXQsIGFieSB3eXdvXHUwMTQyYVx1MDEwNyBoYW5kbGVJbnB1dENoYW5nZVxyXG4gICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudChcImlucHV0XCIsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KTtcclxuICAgICAgaW5wdXRSZWYuY3VycmVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuICAgIH1cclxuICB9LCBbZGlzYWJsZWQsIHJlYWRPbmx5XSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZURlY3JlbWVudCA9IHVzZUNhbGxiYWNrKCgpID0+IGhhbmRsZVN0ZXAoXCJkb3duXCIpLCBbaGFuZGxlU3RlcF0pO1xyXG4gIGNvbnN0IGhhbmRsZUluY3JlbWVudCA9IHVzZUNhbGxiYWNrKCgpID0+IGhhbmRsZVN0ZXAoXCJ1cFwiKSwgW2hhbmRsZVN0ZXBdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlQ2hvb3NlQ2xpY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiAhZGlzYWJsZWQgJiYgIXJlYWRPbmx5KSB7XHJcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gZGVmID8/IDE7IC8vIEphayB3IFR3b2ltIEpTXHJcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQudmFsdWUgPSBTdHJpbmcobmV3VmFsdWUpO1xyXG5cclxuICAgICAgLy8gUlx1MDExOWN6bmUgd3l3b1x1MDE0MmFuaWUgbG9naWtpIHptaWFueSB3YXJ0b1x1MDE1QmNpXHJcbiAgICAgIGlmIChvblZhbHVlQ2hhbmdlKSBvblZhbHVlQ2hhbmdlKG5ld1ZhbHVlLCBuYW1lKTtcclxuICAgICAgaWYgKG9uQ2hhbmdlKSB7XHJcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoXCJjaGFuZ2VcIiwge1xyXG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcclxuICAgICAgICB9KSBhcyB1bmtub3duIGFzIEpTWC5UYXJnZXRlZEV2ZW50PEhUTUxJbnB1dEVsZW1lbnQsIEV2ZW50PjtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsIFwidGFyZ2V0XCIsIHtcclxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgIHZhbHVlOiBpbnB1dFJlZi5jdXJyZW50LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgXCJjdXJyZW50VGFyZ2V0XCIsIHtcclxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgIHZhbHVlOiBpbnB1dFJlZi5jdXJyZW50LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG9uQ2hhbmdlKGV2ZW50KTtcclxuICAgICAgfVxyXG4gICAgICBjb25zb2xlLmxvZyhcIkNob29zZSBidXR0b24gY2xpY2tlZCwgdmFsdWUgc2V0IHRvIDFcIik7XHJcbiAgICB9XHJcbiAgfSwgW2Rpc2FibGVkLCByZWFkT25seSwgbmFtZSwgb25WYWx1ZUNoYW5nZSwgb25DaGFuZ2VdKTtcclxuXHJcbiAgLy8gPT09IFBPQ1pcdTAxMDRURUsgREVGSU5JQ0pJIGhhbmRsZUlucHV0Q2hhbmdlID09PVxyXG4gIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gKGU6IEpTWC5UYXJnZXRlZEV2ZW50PEhUTUxJbnB1dEVsZW1lbnQsIEV2ZW50PikgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBjb25zdCByYXdWYWx1ZSA9IHRhcmdldC52YWx1ZTtcclxuICAgIGxldCBudW1lcmljVmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBpZiAocmF3VmFsdWUgPT09IFwiXCIpIHtcclxuICAgICAgbnVtZXJpY1ZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gU3ByXHUwMEYzYnVqIHNwYXJzb3dhXHUwMTA3IGpha28gbGljemJcdTAxMTk7IHBhcnNlRmxvYXQgamVzdCBiYXJkemllaiBlbGFzdHljem55XHJcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlRmxvYXQocmF3VmFsdWUpO1xyXG4gICAgICBudW1lcmljVmFsdWUgPSBpc05hTihwYXJzZWQpID8gdW5kZWZpbmVkIDogcGFyc2VkO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvblZhbHVlQ2hhbmdlKSB7XHJcbiAgICAgIG9uVmFsdWVDaGFuZ2UobnVtZXJpY1ZhbHVlLCBuYW1lKTtcclxuICAgIH1cclxuICAgIC8vIEplXHUwMTVCbGkgdVx1MDE3Q3l0a293bmlrIHByemVrYXphXHUwMTQyIHdcdTAxNDJhc255IG9uQ2hhbmdlLCB0ZVx1MDE3QyBnbyB3eXdvXHUwMTQyYWpcclxuICAgIC8vIFRvIHpkYXJ6ZW5pZSBcImlucHV0XCIgeiBlbGVtZW50dSBIVE1MXHJcbiAgICBpZiAob25DaGFuZ2UpIHtcclxuICAgICAgb25DaGFuZ2UoZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICAvLyA9PT0gS09OSUVDIERFRklOSUNKSSBoYW5kbGVJbnB1dENoYW5nZSA9PT1cclxuXHJcbiAgY29uc3QgY29udGFpbmVyV2lkdGggPSBzdmdMYXlvdXREYXRhLmJhc2VWaWV3Qm94V2lkdGggKiByYXRpb1NJWkU7XHJcbiAgY29uc3QgY29udGFpbmVySGVpZ2h0ID0gc3ZnTGF5b3V0RGF0YS5iYXNlVmlld0JveEhlaWdodCAqIHJhdGlvU0laRTtcclxuXHJcbiAgLy8gU3R5bGUgZGxhIG5hXHUwMTQyb1x1MDE3Q29uZWdvIGlucHV0dSBIVE1MLCBza2Fsb3dhbmUgcHJ6ZXogcmF0aW9TSVpFXHJcbiAgY29uc3QgaHRtbElucHV0U3R5bGU6IEpTWC5DU1NQcm9wZXJ0aWVzID0ge1xyXG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcclxuICAgIGxlZnQ6IGAke3N2Z0xheW91dERhdGEuaW5wdXRBcmVhLnJlY3QueCAqIHJhdGlvU0laRX1weGAsXHJcbiAgICB0b3A6IGAke3N2Z0xheW91dERhdGEuaW5wdXRBcmVhLnJlY3QueSAqIHJhdGlvU0laRX1weGAsXHJcbiAgICB3aWR0aDogYCR7c3ZnTGF5b3V0RGF0YS5pbnB1dEFyZWEucmVjdC53aWR0aCAqIHJhdGlvU0laRX1weGAsXHJcbiAgICBoZWlnaHQ6IGAke3N2Z0xheW91dERhdGEuaW5wdXRBcmVhLnJlY3QuaGVpZ2h0ICogcmF0aW9TSVpFfXB4YCxcclxuICAgIGJvcmRlcjogXCJub25lXCIsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcclxuICAgIGNvbG9yOiBcIiMzMzNcIixcclxuICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcclxuICAgIGZvbnRTaXplOiBgJHtNYXRoLm1heCg4LCAxOCAqIHJhdGlvU0laRSl9cHhgLCAvLyBEb3N0b3N1aiBjemNpb25rXHUwMTE5XHJcbiAgICBvdXRsaW5lOiBcIm5vbmVcIixcclxuICAgIHBhZGRpbmc6IGAwICR7TWF0aC5tYXgoMSwgMiAqIHJhdGlvU0laRSl9cHhgLFxyXG4gICAgbWFyZ2luOiAwLFxyXG4gICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcclxuICAgIE1vekFwcGVhcmFuY2U6IFwidGV4dGZpZWxkXCIsXHJcbiAgICBXZWJraXRBcHBlYXJhbmNlOiBcIm5vbmVcIixcclxuICAgIGFwcGVhcmFuY2U6IFwibm9uZVwiLFxyXG4gICAgekluZGV4OiAyLFxyXG4gIH07XHJcblxyXG4gIC8vIFJvem1pYXIgaWtvbiArLy0uIFphXHUwMTQyXHUwMEYzXHUwMTdDbXksIFx1MDE3Q2Ugb3J5Z2luYWxuZSBpa29ueSBzXHUwMTA1IDI0eDI0LlxyXG4gIC8vIENoY2VteSBqZSBwcnplc2thbG93YVx1MDEwNywgYWJ5IHBhc293YVx1MDE0MnkgZG8gcHJ6eWNpc2tcdTAwRjN3LlxyXG4gIC8vIFByenlrXHUwMTQyYWRvd28sIG5pZWNoIHpham11alx1MDEwNSBva29cdTAxNDJvIDUwJSB3eXNva29cdTAxNUJjaSBwcnp5Y2lza3UgKHcgamVkbm9zdGthY2ggdmlld0JveClcclxuICBjb25zdCBpY29uVmlld0JveFNpemUgPSAyNDsgLy8gT3J5Z2luYWxueSByb3ptaWFyIHZpZXdCb3ggaWtvbiArLy1cclxuICBjb25zdCB0YXJnZXRJY29uSGVpZ2h0SW5TdmdVbml0cyA9IHN2Z0xheW91dERhdGEuYmFzZVZpZXdCb3hIZWlnaHQgKiAwLjI1ICpcclxuICAgIChyYXRpb1NJWkUgPiAwLjUgPyAxIDogcmF0aW9TSVpFICogMik7IC8vIG5wLiAyNSUgd3lzb2tvXHUwMTVCY2kgY2FcdTAxNDJlZ28ga29tcG9uZW50dVxyXG4gIGNvbnN0IGljb25BY3R1YWxTY2FsZSA9IDEuNSAqICh0YXJnZXRJY29uSGVpZ2h0SW5TdmdVbml0cyAvIGljb25WaWV3Qm94U2l6ZSk7XHJcblxyXG4gIGxldCBkaXNwbGF5VmFsdWU6IHN0cmluZyA9IFwiXCI7IC8vIElucHV0IHZhbHVlIHphd3N6ZSBqYWtvIHN0cmluZ1xyXG4gIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBkaXNwbGF5VmFsdWUgPSBTdHJpbmcodmFsdWUpO1xyXG4gIH0gZWxzZSBpZiAoZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgIGRpc3BsYXlWYWx1ZSA9IFN0cmluZyhkZWZhdWx0VmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgY29tbW9uU3ZnQnV0dG9uU3R5bGU6IEpTWC5DU1NQcm9wZXJ0aWVzID0ge1xyXG4gICAgY3Vyc29yOiBkaXNhYmxlZCB8fCByZWFkT25seSA/IFwiZGVmYXVsdFwiIDogXCJwb2ludGVyXCIsXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgY2xhc3NOYW1lPXtgJHtDT05UQUlORVJfQ0xBU1NfTkFNRX0gJHt3cmFwcGVyQ2xhc3NOYW1lIHx8IFwiXCJ9YH1cclxuICAgICAgc3R5bGU9e3tcclxuICAgICAgICB3aWR0aDogYCR7Y29udGFpbmVyV2lkdGh9cHhgLFxyXG4gICAgICAgIGhlaWdodDogYCR7Y29udGFpbmVySGVpZ2h0fXB4YCxcclxuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxyXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxyXG4gICAgICAgIC4uLnN0eWxlLFxyXG4gICAgICB9fVxyXG4gICAgICB7Li4ucmVzdERpdlByb3BzfVxyXG4gICAgPlxyXG4gICAgICA8c3ZnXHJcbiAgICAgICAgY2xhc3NOYW1lPXtgJHtTVkdfQ0xBU1NfTkFNRX0gJHtzdmdDbGFzc05hbWUgfHwgXCJcIn1gfVxyXG4gICAgICAgIGRhdGEtbmFtZT1cImlucHV0LW51bWJlclwiIC8vIFogVHdvamVnbyBIVE1MXHJcbiAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICAgICAgdmlld0JveD17YDAgMCAke3N2Z0xheW91dERhdGEuYmFzZVZpZXdCb3hXaWR0aH0gJHtzdmdMYXlvdXREYXRhLmJhc2VWaWV3Qm94SGVpZ2h0fWB9XHJcbiAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcclxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcclxuICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXHJcbiAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgbGVmdDogMCxcclxuICAgICAgICB9fVxyXG4gICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXHJcbiAgICAgID5cclxuICAgICAgICB7LyogR3J1cGEgXCJDaG9vc2UvU2VsZWN0XCIgKi99XHJcbiAgICAgICAgPGdcclxuICAgICAgICAgIGNsYXNzTmFtZT17U1ZHX0JVVFRPTl9DTEFTU19OQU1FfSAvLyBLbGFzYSB6IFR3b2plZ28gSFRNTFxyXG4gICAgICAgICAgZGF0YS1uYW1lPXtzdmdMYXlvdXREYXRhLmJ1dHRvbnMuY2hvb3NlLm5hbWV9IC8vIGRhdGEtbmFtZSB6IFR3b2plZ28gSFRNTFxyXG4gICAgICAgICAgb25DbGljaz17IWRpc2FibGVkID8gaGFuZGxlQ2hvb3NlQ2xpY2sgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICBzdHlsZT17eyAuLi5jb21tb25TdmdCdXR0b25TdHlsZSwgLi4uKHNlbGVjdEJ1dHRvblN0eWxlIHx8IHt9KSB9fVxyXG4gICAgICAgICAgcG9pbnRlckV2ZW50cz17ZGlzYWJsZWQgPyBcIm5vbmVcIiA6IFwiYXV0b1wifVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtzdmdMYXlvdXREYXRhLmJ1dHRvbnMuY2hvb3NlLnBhdGhzLm1hcCgocCwgaSkgPT4gKFxyXG4gICAgICAgICAgICA8cGF0aFxyXG4gICAgICAgICAgICAgIGtleT17YGNob29zZS1wYXRoLSR7aX1gfVxyXG4gICAgICAgICAgICAgIGRhdGEtbmFtZT17cC5kYXRhTmFtZX1cclxuICAgICAgICAgICAgICBkPXtwLmR9XHJcbiAgICAgICAgICAgICAgZmlsbD17c2VsZWN0QnV0dG9uRmlsbCB8fCBwLmRlZmF1bHRGaWxsfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgKSl9XHJcbiAgICAgICAgPC9nPlxyXG5cclxuICAgICAgICB7LyogR3J1cGEgXCJJbnB1dCBBcmVhXCIgKi99XHJcbiAgICAgICAgPGdcclxuICAgICAgICAgIGRhdGEtbmFtZT17c3ZnTGF5b3V0RGF0YS5pbnB1dEFyZWEubmFtZX1cclxuICAgICAgICAgIHN0eWxlPXtpbnB1dEFyZWFTdHlsZSB8fCB7fX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cmVjdFxyXG4gICAgICAgICAgICB4PXtzdmdMYXlvdXREYXRhLmlucHV0QXJlYS5yZWN0Lnh9XHJcbiAgICAgICAgICAgIHk9e3N2Z0xheW91dERhdGEuaW5wdXRBcmVhLnJlY3QueX1cclxuICAgICAgICAgICAgd2lkdGg9e3N2Z0xheW91dERhdGEuaW5wdXRBcmVhLnJlY3Qud2lkdGh9XHJcbiAgICAgICAgICAgIGhlaWdodD17c3ZnTGF5b3V0RGF0YS5pbnB1dEFyZWEucmVjdC5oZWlnaHR9XHJcbiAgICAgICAgICAgIGZpbGw9e2lucHV0QXJlYVJlY3RGaWxsIHx8IHN2Z0xheW91dERhdGEuaW5wdXRBcmVhLnJlY3QuZGVmYXVsdEZpbGx9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPHBhdGhcclxuICAgICAgICAgICAgZD17c3ZnTGF5b3V0RGF0YS5pbnB1dEFyZWEuYm9yZGVyUGF0aC5kfVxyXG4gICAgICAgICAgICBmaWxsPXtpbnB1dEFyZWFCb3JkZXJGaWxsIHx8XHJcbiAgICAgICAgICAgICAgc3ZnTGF5b3V0RGF0YS5pbnB1dEFyZWEuYm9yZGVyUGF0aC5kZWZhdWx0RmlsbH1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9nPlxyXG5cclxuICAgICAgICB7LyogR3J1cGEgXCJEZWNyZW1lbnRcIiAqL31cclxuICAgICAgICA8Z1xyXG4gICAgICAgICAgY2xhc3NOYW1lPXtTVkdfQlVUVE9OX0NMQVNTX05BTUV9XHJcbiAgICAgICAgICBkYXRhLW5hbWU9e3N2Z0xheW91dERhdGEuYnV0dG9ucy5kZWNyZW1lbnQubmFtZX1cclxuICAgICAgICAgIG9uQ2xpY2s9eyFkaXNhYmxlZCAmJiAhcmVhZE9ubHkgPyBoYW5kbGVEZWNyZW1lbnQgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICBzdHlsZT17eyAuLi5jb21tb25TdmdCdXR0b25TdHlsZSwgLi4uKGRlY3JlbWVudEJ1dHRvblN0eWxlIHx8IHt9KSB9fVxyXG4gICAgICAgICAgcG9pbnRlckV2ZW50cz17ZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBcIm5vbmVcIiA6IFwiYXV0b1wifVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtzdmdMYXlvdXREYXRhLmJ1dHRvbnMuZGVjcmVtZW50LnBhdGhzLm1hcCgocCwgaSkgPT4gKFxyXG4gICAgICAgICAgICA8cGF0aFxyXG4gICAgICAgICAgICAgIGtleT17YGRlYy1wYXRoLSR7aX1gfVxyXG4gICAgICAgICAgICAgIGRhdGEtbmFtZT17cC5kYXRhTmFtZX1cclxuICAgICAgICAgICAgICBkPXtwLmR9XHJcbiAgICAgICAgICAgICAgZmlsbD17ZGVjcmVtZW50QnV0dG9uRmlsbCB8fCBwLmRlZmF1bHRGaWxsfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgKSl9XHJcbiAgICAgICAgICB7LyogSmVcdTAxNUJsaSBjaGNlc3ogZG9kYVx1MDEwNyBpa29uXHUwMTE5IFNWRyBcIi1cIiBuYSB0eW0ga3N6dGFcdTAxNDJjaWUsIHpyXHUwMEYzYiB0byB0dXRhaiwgbnAuOiAqL31cclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgLyo8ZyB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoWCBZKSBzY2FsZShTKVwiPlxyXG4gICAgICAgICAgICB7RGVmYXVsdERlY3JlbWVudEljb25TdmdDb250ZW50fVxyXG4gICAgICAgICAgPC9nPiovXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB7LyogSWtvbmEgRGVjcmVtZW50ICgtKSAqL31cclxuICAgICAgICAgIDxnXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybT17YHRyYW5zbGF0ZSgke3N2Z0xheW91dERhdGEuYnV0dG9ucy5kZWNyZW1lbnQuaWNvbkFuY2hvclh9LCAke3N2Z0xheW91dERhdGEuYnV0dG9ucy5kZWNyZW1lbnQuaWNvbkFuY2hvcll9KSBzY2FsZSgke2ljb25BY3R1YWxTY2FsZX0pIHRyYW5zbGF0ZSgtJHtcclxuICAgICAgICAgICAgICBpY29uVmlld0JveFNpemUgLyAyXHJcbiAgICAgICAgICAgIH0sIC0ke2ljb25WaWV3Qm94U2l6ZSAvIDJ9KWB9XHJcbiAgICAgICAgICAgIHN0eWxlPXt7IHBvaW50ZXJFdmVudHM6IFwibm9uZVwiIH19IC8vIElrb255IG5pZSBwb3dpbm55IHByemVjaHd5dHl3YVx1MDEwNyBrbGlrbmlcdTAxMTlcdTAxMDdcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHN2Z1xyXG4gICAgICAgICAgICAgIHZpZXdCb3g9e2AwIDAgJHtpY29uVmlld0JveFNpemV9ICR7aWNvblZpZXdCb3hTaXplfWB9XHJcbiAgICAgICAgICAgICAgd2lkdGg9e2ljb25WaWV3Qm94U2l6ZX1cclxuICAgICAgICAgICAgICBoZWlnaHQ9e2ljb25WaWV3Qm94U2l6ZX1cclxuICAgICAgICAgICAgICBmaWxsPVwid2hpdGVcIlxyXG4gICAgICAgICAgICAgIG92ZXJmbG93PVwidmlzaWJsZVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7RGVmYXVsdERlY3JlbWVudEljb25TdmdDb250ZW50fVxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgIDwvZz5cclxuICAgICAgICA8L2c+XHJcblxyXG4gICAgICAgIHsvKiBHcnVwYSBcIkluY3JlbWVudFwiICovfVxyXG4gICAgICAgIDxnXHJcbiAgICAgICAgICBjbGFzc05hbWU9e1NWR19CVVRUT05fQ0xBU1NfTkFNRX1cclxuICAgICAgICAgIGRhdGEtbmFtZT17c3ZnTGF5b3V0RGF0YS5idXR0b25zLmluY3JlbWVudC5uYW1lfVxyXG4gICAgICAgICAgb25DbGljaz17IWRpc2FibGVkICYmICFyZWFkT25seSA/IGhhbmRsZUluY3JlbWVudCA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgIHN0eWxlPXt7IC4uLmNvbW1vblN2Z0J1dHRvblN0eWxlLCAuLi4oaW5jcmVtZW50QnV0dG9uU3R5bGUgfHwge30pIH19XHJcbiAgICAgICAgICBwb2ludGVyRXZlbnRzPXtkaXNhYmxlZCB8fCByZWFkT25seSA/IFwibm9uZVwiIDogXCJhdXRvXCJ9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAge3N2Z0xheW91dERhdGEuYnV0dG9ucy5pbmNyZW1lbnQucGF0aHMubWFwKChwLCBpKSA9PiAoXHJcbiAgICAgICAgICAgIDxwYXRoXHJcbiAgICAgICAgICAgICAga2V5PXtgaW5jLXBhdGgtJHtpfWB9XHJcbiAgICAgICAgICAgICAgZGF0YS1uYW1lPXtwLmRhdGFOYW1lfVxyXG4gICAgICAgICAgICAgIGQ9e3AuZH1cclxuICAgICAgICAgICAgICBmaWxsPXtpbmNyZW1lbnRCdXR0b25GaWxsIHx8IHAuZGVmYXVsdEZpbGx9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICApKX1cclxuICAgICAgICAgIHsvKiBKZVx1MDE1QmxpIGNoY2VzeiBkb2RhXHUwMTA3IGlrb25cdTAxMTkgU1ZHIFwiK1wiIG5hIHR5bSBrc3p0YVx1MDE0MmNpZSwgenJcdTAwRjNiIHRvIHR1dGFqLCBucC46ICovfVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAvKjxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZShYIFkpIHNjYWxlKFMpXCI+XHJcbiAgICAgICAgICAgIHtEZWZhdWx0SW5jcmVtZW50SWNvblN2Z0NvbnRlbnR9XHJcbiAgICAgICAgICA8L2c+Ki9cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHsvKiBJa29uYSBJbmNyZW1lbnQgKCspICovfVxyXG4gICAgICAgICAgPGdcclxuICAgICAgICAgICAgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7c3ZnTGF5b3V0RGF0YS5idXR0b25zLmluY3JlbWVudC5pY29uQW5jaG9yWH0sICR7c3ZnTGF5b3V0RGF0YS5idXR0b25zLmluY3JlbWVudC5pY29uQW5jaG9yWX0pIHNjYWxlKCR7aWNvbkFjdHVhbFNjYWxlfSkgdHJhbnNsYXRlKC0ke1xyXG4gICAgICAgICAgICAgIGljb25WaWV3Qm94U2l6ZSAvIDJcclxuICAgICAgICAgICAgfSwgLSR7aWNvblZpZXdCb3hTaXplIC8gMn0pYH1cclxuICAgICAgICAgICAgc3R5bGU9e3sgcG9pbnRlckV2ZW50czogXCJub25lXCIgfX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHN2Z1xyXG4gICAgICAgICAgICAgIHZpZXdCb3g9e2AwIDAgJHtpY29uVmlld0JveFNpemV9ICR7aWNvblZpZXdCb3hTaXplfWB9XHJcbiAgICAgICAgICAgICAgd2lkdGg9e2ljb25WaWV3Qm94U2l6ZX1cclxuICAgICAgICAgICAgICBoZWlnaHQ9e2ljb25WaWV3Qm94U2l6ZX1cclxuICAgICAgICAgICAgICBmaWxsPVwid2hpdGVcIlxyXG4gICAgICAgICAgICAgIG92ZXJmbG93PVwidmlzaWJsZVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7RGVmYXVsdEluY3JlbWVudEljb25TdmdDb250ZW50fVxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgIDwvZz5cclxuICAgICAgICA8L2c+XHJcbiAgICAgIDwvc3ZnPlxyXG5cclxuICAgICAgPGlucHV0XHJcbiAgICAgICAgcmVmPXtpbnB1dFJlZn1cclxuICAgICAgICBjbGFzc05hbWU9e2Ake0hUTUxfSU5QVVRfQ0xBU1NfTkFNRX0gJHtpbnB1dENsYXNzTmFtZSB8fCBcIlwifWB9IC8vIEtsYXNhIHogVHdvamVnbyBIVE1MXHJcbiAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgbmFtZT17bmFtZX1cclxuICAgICAgICBpZD17aWR9XHJcbiAgICAgICAgdmFsdWU9e2Rpc3BsYXlWYWx1ZX0gLy8gZGlzcGxheVZhbHVlIGplc3QganVcdTAxN0Mgc3RyaW5naWVtIGx1YiBwdXN0eW0gc3RyaW5naWVtXHJcbiAgICAgICAgbWluPXttaW59XHJcbiAgICAgICAgbWF4PXttYXh9XHJcbiAgICAgICAgc3RlcD17c3RlcH1cclxuICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XHJcbiAgICAgICAgcmVxdWlyZWQ9e3JlcXVpcmVkfVxyXG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cclxuICAgICAgICByZWFkT25seT17cmVhZE9ubHl9XHJcbiAgICAgICAgb25JbnB1dD17aGFuZGxlSW5wdXRDaGFuZ2V9IC8vIFBvZFx1MDE0Mlx1MDEwNWN6b255IHBvcHJhd255IGhhbmRsZXJcclxuICAgICAgICBzdHlsZT17aHRtbElucHV0U3R5bGV9XHJcbiAgICAgICAgYXJpYS1sYWJlbD17cHJvcHNbXCJhcmlhLWxhYmVsXCJdIHx8IFwiV2FydG9cdTAxNUJcdTAxMDcgbGljemJvd2FcIn1cclxuICAgICAgICB7Li4ucmVzdERpdlByb3BzfVxyXG4gICAgICAvPlxyXG4gICAgICB7XHJcbiAgICAgICAgLy8gWm1pZW5pb25lIHogcmVzdElucHV0UHJvcHMsIGJvIHRlIHNcdTAxMDUgZGxhIGdcdTAxNDJcdTAwRjN3bmVnbyBkaXZhXHJcbiAgICAgICAgLy8gSmVcdTAxNUJsaSBjaGNlc3ogcHJ6ZWthenl3YVx1MDEwNyBkb2RhdGtvd2UgYXRyeWJ1dHkgZG8gaW5wdXRhLFxyXG4gICAgICAgIC8vIG11c2lzeiBqZSBvc29ibm8gb2JzXHUwMTQydVx1MDE3Q3lcdTAxMDcgbHViIG5hendhXHUwMTA3IG5wLiBodG1sSW5wdXRQcm9wc1xyXG4gICAgICB9XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiIsICIvLyAuL3VpL0lucHV0Q2hpcHNMaXN0LnRzeFxyXG4vKiogQGpzeFJ1bnRpbWUgYXV0b21hdGljICovXHJcbi8qKiBAanN4SW1wb3J0U291cmNlIGh0dHBzOi8vZXNtLnNoL3ByZWFjdEAxMC4yNi44ICovXHJcblxyXG5pbXBvcnQge1xyXG4gIHVzZUVmZmVjdCxcclxuICB1c2VSZWYsXHJcbiAgdXNlU3RhdGUsXHJcbn0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL3ByZWFjdEAxMC4yNi44L2hvb2tzXCI7XHJcbmltcG9ydCB7IEpTWCB9IGZyb20gXCJodHRwczovL2VzbS5zaC9wcmVhY3RAMTAuMjYuOFwiO1xyXG5cclxudHlwZSBNb2RlID0gXCJWaWV3XCIgfCBcIkRyYWdcIiB8IFwiQ2xpY2tcIjtcclxuXHJcbmludGVyZmFjZSBJbnB1dENoaXBzTGlzdFByb3BzIHtcclxuICBhdmFpbGFibGVWYWx1ZXM6IE1hcDxzdHJpbmcsIG51bWJlcj47XHJcbiAgdmFsdWVzOiBzdHJpbmdbXTtcclxuICBkZWZhdWx0VmFsdWVzPzogc3RyaW5nW107XHJcbiAgdGl0bGVBdmFpbGFibGU/OiBzdHJpbmc7XHJcbiAgdGl0bGVTZWxlY3RlZD86IHN0cmluZztcclxuICB0aXRsZU1vZGU/OiBNYXA8XCJWaWV3XCIgfCBcIkRyYWdcIiB8IFwiQ2xpY2tcIiwgc3RyaW5nPjtcclxuICB0aXRsZU1vZGVCdXR0b24/OiBzdHJpbmc7XHJcbiAgb25DaGFuZ2U/OiAodXBkYXRlZDogc3RyaW5nW10pID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBJbnB1dENoaXBzTW9kZShcclxuICBWaWV3OiBzdHJpbmcgPSBcIlZpZXdcIixcclxuICBEcmFnOiBzdHJpbmcgPSBcIkRyYWdcIixcclxuICBDbGljazogc3RyaW5nID0gXCJDbGlja1wiLFxyXG4pOiBNYXA8XCJWaWV3XCIgfCBcIkRyYWdcIiB8IFwiQ2xpY2tcIiwgc3RyaW5nPiB7XHJcbiAgcmV0dXJuIG5ldyBNYXA8XCJWaWV3XCIgfCBcIkRyYWdcIiB8IFwiQ2xpY2tcIiwgc3RyaW5nPihbXHJcbiAgICBbXCJWaWV3XCIsIFZpZXddLFxyXG4gICAgW1wiRHJhZ1wiLCBEcmFnXSxcclxuICAgIFtcIkNsaWNrXCIsIENsaWNrXSxcclxuICBdKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIElucHV0Q2hpcHNMaXN0KHByb3BzOiBJbnB1dENoaXBzTGlzdFByb3BzKSB7XHJcbiAgY29uc3Qge1xyXG4gICAgdGl0bGVBdmFpbGFibGUsXHJcbiAgICB0aXRsZVNlbGVjdGVkLFxyXG4gICAgdGl0bGVNb2RlQnV0dG9uID0gXCJNb2RlXCIsXHJcbiAgICB0aXRsZU1vZGUgPSBJbnB1dENoaXBzTW9kZSgpLFxyXG4gICAgYXZhaWxhYmxlVmFsdWVzLFxyXG4gICAgdmFsdWVzLFxyXG4gICAgZGVmYXVsdFZhbHVlcyA9IFtdLFxyXG4gICAgb25DaGFuZ2UgPSAoKSA9PiB7fSxcclxuICB9ID0gcHJvcHM7XHJcblxyXG4gIGNvbnN0IFttb2RlLCBzZXRNb2RlXSA9IHVzZVN0YXRlPE1vZGU+KFwiVmlld1wiKTtcclxuICAvLyBMZXBpZWogYmV6IG9kZHppZWxuZWdvIG1vZGVUaXRsZSwgdHlsa28gZ2VuZXJ1aiBkeW5hbWljem5pZSB6IG1vZGVcclxuICAvLyBjb25zdCBbbW9kZVRpdGxlLCBzZXRNb2RlVGl0bGVdID0gdXNlU3RhdGUoXCJWaWV3XCIpO1xyXG5cclxuICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihbLi4uZGVmYXVsdFZhbHVlc10pO1xyXG5cclxuICAvLyBjb21wdXRlIGF2YWlsYWJsZSBsaXN0XHJcbiAgY29uc3QgY29tcHV0ZVJlbWFpbmluZyA9ICgpOiBzdHJpbmdbXSA9PiB7XHJcbiAgICBjb25zdCB1c2VkQ291bnQgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xyXG4gICAgc2VsZWN0ZWQuZm9yRWFjaCgodmFsKSA9PiB7XHJcbiAgICAgIHVzZWRDb3VudC5zZXQodmFsLCAodXNlZENvdW50LmdldCh2YWwpID8/IDApICsgMSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW107XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHRvdGFsXSBvZiBhdmFpbGFibGVWYWx1ZXMuZW50cmllcygpKSB7XHJcbiAgICAgIGNvbnN0IHVzZWQgPSB1c2VkQ291bnQuZ2V0KGtleSkgPz8gMDtcclxuICAgICAgY29uc3QgcmVtYWluaW5nID0gdG90YWwgLSB1c2VkO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbWFpbmluZzsgaSsrKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9O1xyXG5cclxuICBjb25zdCByZW1haW5pbmcgPSBjb21wdXRlUmVtYWluaW5nKCk7XHJcblxyXG4gIC8vIFN5bmMgd2l0aCBwYXJlbnRcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgb25DaGFuZ2UoWy4uLnNlbGVjdGVkXSk7XHJcbiAgfSwgW3NlbGVjdGVkXSk7XHJcblxyXG4gIC8vIFRvZ2dsZSBtb2RlIGN5Y2xpbmc6IFZpZXcgLT4gRHJhZyAtPiBDbGljayAtPiBWaWV3IC4uLlxyXG4gIGNvbnN0IHRvZ2dsZU1vZGUgPSAoKSA9PiB7XHJcbiAgICAvKlxyXG4gICAgc2V0TW9kZSgocHJldikgPT4ge1xyXG4gICAgICBpZiAocHJldiA9PT0gXCJWaWV3XCIpIHtcclxuICAgICAgICBzZXRNb2RlVGl0bGUodGl0bGVNb2RlRHJhZyk7XHJcbiAgICAgICAgcmV0dXJuIFwiRHJhZ1wiO1xyXG4gICAgICB9IGVsc2UgaWYgKHByZXYgPT09IFwiRHJhZ1wiKSB7XHJcbiAgICAgICAgc2V0TW9kZVRpdGxlKHRpdGxlTW9kZUNsaWNrKTtcclxuICAgICAgICByZXR1cm4gXCJDbGlja1wiO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNldE1vZGVUaXRsZSh0aXRsZU1vZGVWaWV3KTtcclxuICAgICAgICByZXR1cm4gXCJWaWV3XCI7XHJcbiAgICAgIH1cclxuICAgIH0pOyovXHJcbiAgICBzZXRNb2RlKChwcmV2KSA9PiB7XHJcbiAgICAgIGlmIChwcmV2ID09PSBcIlZpZXdcIikgcmV0dXJuIFwiRHJhZ1wiO1xyXG4gICAgICBpZiAocHJldiA9PT0gXCJEcmFnXCIpIHJldHVybiBcIkNsaWNrXCI7XHJcbiAgICAgIHJldHVybiBcIlZpZXdcIjtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vIENsaWNrIGhhbmRsZXJzIChvbmx5IGFjdGl2ZSBpbiBDbGljayBtb2RlKVxyXG4gIGNvbnN0IGhhbmRsZUFkZCA9ICh2YWw6IHN0cmluZykgPT4ge1xyXG4gICAgaWYgKG1vZGUgIT09IFwiQ2xpY2tcIikgcmV0dXJuOyAvLyBCbG9rYWRhIHBvemEgdHJ5YmVtIENsaWNrXHJcbiAgICBzZXRTZWxlY3RlZChbLi4uc2VsZWN0ZWQsIHZhbF0pO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGhhbmRsZVJlbW92ZSA9IChpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICBpZiAobW9kZSAhPT0gXCJDbGlja1wiKSByZXR1cm47IC8vIEJsb2thZGEgcG96YSB0cnliZW0gQ2xpY2tcclxuICAgIHNldFNlbGVjdGVkKChwcmV2KSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvcHkgPSBbLi4ucHJldl07XHJcbiAgICAgIGNvcHkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgcmV0dXJuIGNvcHk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVNb3ZlTGVmdCA9IChpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICBpZiAobW9kZSAhPT0gXCJDbGlja1wiKSByZXR1cm47IC8vIEJsb2thZGEgcG96YSB0cnliZW0gQ2xpY2tcclxuICAgIGlmIChpbmRleCA8PSAwKSByZXR1cm47XHJcbiAgICBzZXRTZWxlY3RlZCgocHJldikgPT4ge1xyXG4gICAgICBjb25zdCBjb3B5ID0gWy4uLnByZXZdO1xyXG4gICAgICBbY29weVtpbmRleCAtIDFdLCBjb3B5W2luZGV4XV0gPSBbY29weVtpbmRleF0sIGNvcHlbaW5kZXggLSAxXV07XHJcbiAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaGFuZGxlTW92ZVJpZ2h0ID0gKGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgIGlmIChtb2RlICE9PSBcIkNsaWNrXCIpIHJldHVybjsgLy8gQmxva2FkYSBwb3phIHRyeWJlbSBDbGlja1xyXG4gICAgaWYgKGluZGV4ID49IHNlbGVjdGVkLmxlbmd0aCAtIDEpIHJldHVybjtcclxuICAgIHNldFNlbGVjdGVkKChwcmV2KSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvcHkgPSBbLi4ucHJldl07XHJcbiAgICAgIFtjb3B5W2luZGV4XSwgY29weVtpbmRleCArIDFdXSA9IFtjb3B5W2luZGV4ICsgMV0sIGNvcHlbaW5kZXhdXTtcclxuICAgICAgcmV0dXJuIGNvcHk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLSBEcmFnICYgRHJvcCBsb2dpYyAoYWt0eXdueSB0eWxrbyB3IHRyeWJpZSBEcmFnKSAtLS0tLS0tLS0tLVxyXG5cclxuICAvLyBQcnplY2hvd3VqZSBpbmRla3MgcHJ6ZWNpXHUwMTA1Z2FuZWdvIGVsZW1lbnR1IHogc2VsZWN0ZWQgbHViIG51bGxcclxuICBjb25zdCBkcmFnSW5kZXggPSB1c2VSZWY8bnVtYmVyIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIC8vIFByemVjaG93dWplIGNoaXAgcHJ6ZWNpXHUwMTA1Z2FueSB6IGF2YWlsYWJsZSAoa3RcdTAwRjNyeSBqZXN6Y3plIG5pZSBqZXN0IHcgc2VsZWN0ZWQpXHJcbiAgY29uc3QgZHJhZ0F2YWlsYWJsZUNoaXAgPSB1c2VSZWY8c3RyaW5nIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIC8vIEhhbmRsZXJ5IGRsYSBlbGVtZW50XHUwMEYzdyBkb3N0XHUwMTE5cG55Y2ggKGF2YWlsYWJsZSBjaGlwcylcclxuICBjb25zdCBvbkRyYWdTdGFydEF2YWlsYWJsZSA9IChlOiBEcmFnRXZlbnQsIGNoaXA6IHN0cmluZykgPT4ge1xyXG4gICAgaWYgKG1vZGUgIT09IFwiRHJhZ1wiKSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZHJhZ0F2YWlsYWJsZUNoaXAuY3VycmVudCA9IGNoaXA7XHJcbiAgICBlLmRhdGFUcmFuc2Zlcj8uc2V0RGF0YShcInRleHQvcGxhaW5cIiwgY2hpcCk7XHJcbiAgICBlLmRhdGFUcmFuc2ZlciEuZWZmZWN0QWxsb3dlZCA9IFwiY29weVwiO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9uRHJhZ0VuZEF2YWlsYWJsZSA9IChlOiBEcmFnRXZlbnQpID0+IHtcclxuICAgIGRyYWdBdmFpbGFibGVDaGlwLmN1cnJlbnQgPSBudWxsO1xyXG4gIH07XHJcblxyXG4gIC8vIEhhbmRsZXJ5IGRsYSBlbGVtZW50XHUwMEYzdyB3eWJyYW55Y2ggKHNlbGVjdGVkIGNoaXBzKVxyXG4gIGNvbnN0IG9uRHJhZ1N0YXJ0U2VsZWN0ZWQgPSAoZTogRHJhZ0V2ZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICBpZiAobW9kZSAhPT0gXCJEcmFnXCIpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBkcmFnSW5kZXguY3VycmVudCA9IGluZGV4O1xyXG4gICAgZS5kYXRhVHJhbnNmZXI/LnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHNlbGVjdGVkW2luZGV4XSk7XHJcbiAgICBlLmRhdGFUcmFuc2ZlciEuZWZmZWN0QWxsb3dlZCA9IFwibW92ZVwiO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9uRHJhZ0VuZFNlbGVjdGVkID0gKGU6IERyYWdFdmVudCkgPT4ge1xyXG4gICAgZHJhZ0luZGV4LmN1cnJlbnQgPSBudWxsO1xyXG4gIH07XHJcblxyXG4gIC8vIE9ic3phciB1cHVzemN6YW5pYSAtIHBvbGUgc2VsZWN0ZWQgY2hpcHNcclxuICBjb25zdCBvbkRyb3BTZWxlY3RlZCA9IChlOiBEcmFnRXZlbnQsIHRhcmdldEluZGV4OiBudW1iZXIgfCBudWxsID0gbnVsbCkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYgKG1vZGUgIT09IFwiRHJhZ1wiKSByZXR1cm47XHJcblxyXG4gICAgLy8gUHJ6ZWNpXHUwMTA1Z25pXHUwMTE5dG8gY2hpcCB6IGF2YWlsYWJsZVxyXG4gICAgaWYgKGRyYWdBdmFpbGFibGVDaGlwLmN1cnJlbnQgIT09IG51bGwpIHtcclxuICAgICAgLy8gRG9kYWogZ28gbmEga29uaWVjIChsdWIgbmEgd3NrYXphbmUgbWllanNjZSlcclxuICAgICAgc2V0U2VsZWN0ZWQoKHByZXYpID0+IHtcclxuICAgICAgICBjb25zdCBuZXdTZWxlY3RlZCA9IFsuLi5wcmV2XTtcclxuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPT09IG51bGwgfHwgdGFyZ2V0SW5kZXggPj0gbmV3U2VsZWN0ZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICBuZXdTZWxlY3RlZC5wdXNoKGRyYWdBdmFpbGFibGVDaGlwLmN1cnJlbnQhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbmV3U2VsZWN0ZWQuc3BsaWNlKHRhcmdldEluZGV4LCAwLCBkcmFnQXZhaWxhYmxlQ2hpcC5jdXJyZW50ISk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdTZWxlY3RlZDtcclxuICAgICAgfSk7XHJcbiAgICAgIGRyYWdBdmFpbGFibGVDaGlwLmN1cnJlbnQgPSBudWxsO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJ6ZWNpXHUwMTA1Z25pXHUwMTE5dG8gY2hpcCB6IHNlbGVjdGVkICh6bWlhbmEga29sZWpub1x1MDE1QmNpKVxyXG4gICAgaWYgKGRyYWdJbmRleC5jdXJyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IGZyb21JbmRleCA9IGRyYWdJbmRleC5jdXJyZW50O1xyXG4gICAgICBjb25zdCB0b0luZGV4ID0gdGFyZ2V0SW5kZXggIT09IG51bGwgPyB0YXJnZXRJbmRleCA6IHNlbGVjdGVkLmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICBpZiAoZnJvbUluZGV4ID09PSB0b0luZGV4KSByZXR1cm47XHJcblxyXG4gICAgICBzZXRTZWxlY3RlZCgocHJldikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvcHkgPSBbLi4ucHJldl07XHJcbiAgICAgICAgY29uc3QgW21vdmVkXSA9IGNvcHkuc3BsaWNlKGZyb21JbmRleCwgMSk7XHJcbiAgICAgICAgY29weS5zcGxpY2UodG9JbmRleCwgMCwgbW92ZWQpO1xyXG4gICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgICB9KTtcclxuICAgICAgZHJhZ0luZGV4LmN1cnJlbnQgPSBudWxsO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9uRHJhZ092ZXJTZWxlY3RlZCA9IChlOiBEcmFnRXZlbnQpID0+IHtcclxuICAgIGlmIChtb2RlID09PSBcIkRyYWdcIikge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHBvendcdTAwRjNsIG5hIGRyb3BcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBPYnN6YXIgdXB1c3pjemFuaWEgLSBwb2xlIGF2YWlsYWJsZSBjaGlwcyAoZG8gdXN1d2FuaWEgeiBzZWxlY3RlZClcclxuICBjb25zdCBvbkRyb3BBdmFpbGFibGUgPSAoZTogRHJhZ0V2ZW50KSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZiAobW9kZSAhPT0gXCJEcmFnXCIpIHJldHVybjtcclxuXHJcbiAgICBpZiAoZHJhZ0luZGV4LmN1cnJlbnQgIT09IG51bGwpIHtcclxuICAgICAgLy8gVXN1XHUwMTQ0IHogc2VsZWN0ZWQgKGNvIG96bmFjemEgXCJwcnplbmllc2llbmllXCIgbmEgYXZhaWxhYmxlKVxyXG4gICAgICBjb25zdCBpbmRleFRvUmVtb3ZlID0gZHJhZ0luZGV4LmN1cnJlbnQ7XHJcbiAgICAgIHNldFNlbGVjdGVkKChwcmV2KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29weSA9IFsuLi5wcmV2XTtcclxuICAgICAgICBjb3B5LnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKTtcclxuICAgICAgICByZXR1cm4gY29weTtcclxuICAgICAgfSk7XHJcbiAgICAgIGRyYWdJbmRleC5jdXJyZW50ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBOaWUgbWEgc2Vuc3UgcHJ6ZWNpXHUwMTA1Z2FcdTAxMDcgeiBhdmFpbGFibGUgbmEgYXZhaWxhYmxlIC0gaWdub3J1amVteVxyXG4gICAgZHJhZ0F2YWlsYWJsZUNoaXAuY3VycmVudCA9IG51bGw7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgb25EcmFnT3ZlckF2YWlsYWJsZSA9IChlOiBEcmFnRXZlbnQpID0+IHtcclxuICAgIGlmIChtb2RlID09PSBcIkRyYWdcIikge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0gUmVuZGVyb3dhbmllIC0tLS0tLS0tLS0tXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIGNsYXNzPVwiaW5wdXRjaGlwcy1jb250YWluZXJcIlxyXG4gICAgICBzdHlsZT17eyBtYXhXaWR0aDogXCI2MDBweFwiIH19XHJcbiAgICA+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dGNoaXBzLW1vZGVcIj5cclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICBvbkNsaWNrPXt0b2dnbGVNb2RlfVxyXG4gICAgICAgICAgY2xhc3M9XCJpbnB1dGNoaXBzLW1vZGUtYnV0dG9uXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICB7dGl0bGVNb2RlQnV0dG9ufTo8YnIgLz5cclxuICAgICAgICAgIHt0aXRsZU1vZGUuZ2V0KG1vZGUpfVxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dGNoaXBzLWNvbnRhaW5lci1saXN0XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0Y2hpcHMtbGlzdFwiPlxyXG4gICAgICAgICAge3RpdGxlQXZhaWxhYmxlICYmIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0Y2hpcHMtbGlzdC10aXRsZVwiPnt0aXRsZUF2YWlsYWJsZX08L2Rpdj5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIGNsYXNzPVwiaW5wdXRjaGlwcy1saXN0LWJveFwiXHJcbiAgICAgICAgICAgIG9uRHJvcD17b25Ecm9wQXZhaWxhYmxlfVxyXG4gICAgICAgICAgICBvbkRyYWdPdmVyPXtvbkRyYWdPdmVyQXZhaWxhYmxlfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICB7cmVtYWluaW5nLm1hcCgoY2hpcCwgaSkgPT4gKFxyXG4gICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICBrZXk9e2ByZW0tJHtjaGlwfS0ke2l9YH1cclxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZT17bW9kZSA9PT0gXCJEcmFnXCJ9XHJcbiAgICAgICAgICAgICAgICBvbkRyYWdTdGFydD17KGUpID0+XHJcbiAgICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0QXZhaWxhYmxlKGUgYXMgdW5rbm93biBhcyBEcmFnRXZlbnQsIGNoaXApfVxyXG4gICAgICAgICAgICAgICAgb25EcmFnRW5kPXsoZSkgPT4gb25EcmFnRW5kQXZhaWxhYmxlKGUgYXMgdW5rbm93biBhcyBEcmFnRXZlbnQpfVxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJpbnB1dGNoaXBzLWNoaXBzIGlucHV0Y2hpcHMtY2hpcHMtYXZhaWxhYmxlXCJcclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgIGN1cnNvcjogbW9kZSA9PT0gXCJDbGlja1wiXHJcbiAgICAgICAgICAgICAgICAgICAgPyBcInBvaW50ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIDogbW9kZSA9PT0gXCJEcmFnXCJcclxuICAgICAgICAgICAgICAgICAgICA/IFwiZ3JhYmJpbmdcIlxyXG4gICAgICAgICAgICAgICAgICAgIDogbW9kZSA9PT0gXCJWaWV3XCJcclxuICAgICAgICAgICAgICAgICAgICA/IFwibm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgOiBcIm5vbmVcIixcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge2NoaXB9XHJcbiAgICAgICAgICAgICAgICB7bW9kZSA9PT0gXCJDbGlja1wiICYmIChcclxuICAgICAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUFkZChjaGlwKX1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImlucHV0Y2hpcHMtY2hpcHMtYnV0dG9uIGlucHV0Y2hpcHMtY2hpcHMtYnV0dG9uLWFkZFwiXHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICArXHJcbiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dGNoaXBzLWxpc3RcIj5cclxuICAgICAgICAgIHt0aXRsZVNlbGVjdGVkICYmIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0Y2hpcHMtbGlzdC10aXRsZVwiPnt0aXRsZVNlbGVjdGVkfTwvZGl2PlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY2xhc3M9XCJpbnB1dGNoaXBzLWxpc3QtYm94XCJcclxuICAgICAgICAgICAgb25Ecm9wPXsoZSkgPT4gb25Ecm9wU2VsZWN0ZWQoZSl9XHJcbiAgICAgICAgICAgIG9uRHJhZ092ZXI9e29uRHJhZ092ZXJTZWxlY3RlZH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge3NlbGVjdGVkLm1hcCgoY2hpcCwgaSkgPT4gKFxyXG4gICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICBrZXk9e2BzZWwtJHtjaGlwfS0ke2l9YH1cclxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZT17bW9kZSA9PT0gXCJEcmFnXCJ9XHJcbiAgICAgICAgICAgICAgICBvbkRyYWdTdGFydD17KGUpID0+XHJcbiAgICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0U2VsZWN0ZWQoZSBhcyB1bmtub3duIGFzIERyYWdFdmVudCwgaSl9XHJcbiAgICAgICAgICAgICAgICBvbkRyYWdFbmQ9eyhlKSA9PiBvbkRyYWdFbmRTZWxlY3RlZChlIGFzIHVua25vd24gYXMgRHJhZ0V2ZW50KX1cclxuICAgICAgICAgICAgICAgIG9uRHJvcD17KGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwiRHJhZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRHJvcFNlbGVjdGVkKGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgb25EcmFnT3Zlcj17KGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwiRHJhZ1wiKSBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJpbnB1dGNoaXBzLWNoaXBzIGlucHV0Y2hpcHMtY2hpcHMtc2VsZWN0ZWRcIlxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHttb2RlID09PSBcIkNsaWNrXCIgJiYgKFxyXG4gICAgICAgICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgICAgIHtpID4gMCAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZU1vdmVMZWZ0KGkpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImlucHV0Y2hpcHMtY2hpcHMtYnV0dG9uIGlucHV0Y2hpcHMtY2hpcHMtYnV0dG9uLW9yZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFx1MjE5MFxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgICAgICB7aSA8IHNlbGVjdGVkLmxlbmd0aCAtIDEgJiYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVNb3ZlUmlnaHQoaSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaW5wdXRjaGlwcy1jaGlwcy1idXR0b24gaW5wdXRjaGlwcy1jaGlwcy1idXR0b24tb3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHUyMTkyXHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICA8Lz5cclxuICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICB7Y2hpcH1cclxuICAgICAgICAgICAgICAgIHttb2RlID09PSBcIkNsaWNrXCIgJiYgKFxyXG4gICAgICAgICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVJlbW92ZShpKX1cclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaW5wdXRjaGlwcy1jaGlwcy1idXR0b24gaW5wdXRjaGlwcy1jaGlwcy1idXR0b24tZGVsXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICB4XHJcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCAiLy8gRGVmaW5pY2plIHR5cFx1MDBGM3dcclxudHlwZSBFeGNlbE5lc3RlZE51bWJlckFycmF5ID0gbnVtYmVyIHwgRXhjZWxOZXN0ZWROdW1iZXJBcnJheVtdO1xyXG5cclxuZXhwb3J0IHR5cGUgRXhjZWxOZXN0ZWROID0gRXhjZWxOZXN0ZWROdW1iZXJBcnJheTtcclxuZXhwb3J0IHR5cGUgRXhjZWxSZXN1bHRzID0gTWFwPHN0cmluZywgRXhjZWxOZXN0ZWROdW1iZXJBcnJheT47XHJcbmV4cG9ydCB0eXBlIEV4Y2VsU2V0c1NldCA9IHtcclxuICB2YXI6IHN0cmluZzsgLy8gTmF6d2Egem1pZW5uZWogd2VqXHUwMTVCY2lvd2VqXHJcbiAgdmFsOiBFeGNlbE5lc3RlZE51bWJlckFycmF5OyAvLyBXYXJ0b1x1MDE1Qlx1MDEwNyB6bWllbm5laiAobGljemJhIGx1YiB6YWduaWVcdTAxN0NkXHUwMTdDb25hIHRhYmxpY2EgbGljemIpXHJcbn07XHJcblxyXG4vLyBUeXAgZGxhIGZ1bmtjamkgb2JsaWN6ZW5pb3dlajogcHJ6eWptdWplIG1hcFx1MDExOSwgendyYWNhIG9ibGljem9uXHUwMTA1IHdhcnRvXHUwMTVCXHUwMTA3XHJcbnR5cGUgQ2FsY3VsYXRpb25GdW5jdGlvbiA9IChjdXJyZW50TWFwOiBFeGNlbFJlc3VsdHMpID0+IEV4Y2VsTmVzdGVkTnVtYmVyQXJyYXk7XHJcblxyXG5leHBvcnQgdHlwZSBFeGNlbFNldHNHZXQgPSB7XHJcbiAgdmFyOiBzdHJpbmc7IC8vIE5hendhIG5vd2VqLCBvYmxpY3pvbmVqIHptaWVubmVqXHJcbiAgdmFsOiBDYWxjdWxhdGlvbkZ1bmN0aW9uOyAvLyBGdW5rY2phIG9ibGljemFqXHUwMTA1Y2Egd2FydG9cdTAxNUJcdTAxMDcgdGVqIHptaWVubmVqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFptaWVuaW9ubyB6IGBmdW5gIG5hIGB2YWxgIHpnb2RuaWUgeiBUd29pbSBwcnp5a1x1MDE0MmFkZW0gdVx1MDE3Q3ljaWFcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGdW5rY2phIEV4Y2VsIHByemV0d2FyemEgd2FydG9cdTAxNUJjaSB3ZWpcdTAxNUJjaW93ZSBpIHd5a29udWplIHpkZWZpbmlvd2FuZSBvYmxpY3plbmlhLlxyXG4gKiBAcGFyYW0gaW5wdXRWYWx1ZXMgV2FydG9cdTAxNUJjaSBwb2N6XHUwMTA1dGtvd2UgZG8gdW1pZXN6Y3plbmlhIHcgbWFwaWUuXHJcbiAqIEBwYXJhbSBjYWxjc1ZhbHVlcyBEZWZpbmljamUgb2JsaWN6ZVx1MDE0NCBkbyB3eWtvbmFuaWEuXHJcbiAqIEByZXR1cm5zIE1hcGEgemF3aWVyYWpcdTAxMDVjYSB3c3p5c3RraWUgd2FydG9cdTAxNUJjaSB3ZWpcdTAxNUJjaW93ZSBpIG9ibGljem9uZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBFeGNlbChcclxuICBpbnB1dFZhbHVlczogRXhjZWxTZXRzU2V0IHwgRXhjZWxTZXRzU2V0W10sXHJcbiAgY2FsY3NWYWx1ZXM/OiBFeGNlbFNldHNHZXQgfCBFeGNlbFNldHNHZXRbXSAvLyBEcnVnaSBhcmd1bWVudCBqZXN0IG9wY2pvbmFsbnlcclxuKTogRXhjZWxSZXN1bHRzIHsgLy8gWndyYWNhbXkgbWFwXHUwMTE5IHogYmFyZHppZWogc3pjemVnXHUwMEYzXHUwMTQyb3d5bSB0eXBlbVxyXG4gIFxyXG4gIC8vIEluaWNqYWxpemFjamEgbWFweSB6IHBvcHJhd255bWkgdHlwYW1pXHJcbiAgY29uc3QgTTpFeGNlbFJlc3VsdHMgPSBuZXcgTWFwPHN0cmluZywgRXhjZWxOZXN0ZWROdW1iZXJBcnJheT4oKTtcclxuXHJcbiAgLy8gMS4gUHJ6ZXR3YXJ6YW5pZSB3YXJ0b1x1MDE1QmNpIHdlalx1MDE1QmNpb3d5Y2ggKGlucHV0VmFsdWVzKVxyXG4gIC8vIE5vcm1hbGl6YWNqYSBpbnB1dFZhbHVlcyBkbyB0YWJsaWN5LCBqZVx1MDE1QmxpIHByemVrYXphbm8gcG9qZWR5bmN6eSBvYmlla3RcclxuICBjb25zdCByZXNvbHZlZElucHV0VmFsdWVzID0gIUFycmF5LmlzQXJyYXkoaW5wdXRWYWx1ZXMpID8gW2lucHV0VmFsdWVzXSA6IGlucHV0VmFsdWVzO1xyXG4gIHJlc29sdmVkSW5wdXRWYWx1ZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgIE0uc2V0KGl0ZW0udmFyLCBpdGVtLnZhbCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIDIuIFByemV0d2FyemFuaWUgd2FydG9cdTAxNUJjaSBvYmxpY3plbmlvd3ljaCAoY2FsY3NWYWx1ZXMpXHJcbiAgaWYgKGNhbGNzVmFsdWVzKSB7IC8vIFd5a29uYWogdHlsa28sIGplXHUwMTVCbGkgY2FsY3NWYWx1ZXMgem9zdGFcdTAxNDJ5IGRvc3RhcmN6b25lXHJcbiAgICAvLyBOb3JtYWxpemFjamEgY2FsY3NWYWx1ZXMgZG8gdGFibGljeSwgamVcdTAxNUJsaSBwcnpla2F6YW5vIHBvamVkeW5jenkgb2JpZWt0XHJcbiAgICBjb25zdCByZXNvbHZlZENhbGNzVmFsdWVzID0gIUFycmF5LmlzQXJyYXkoY2FsY3NWYWx1ZXMpID8gW2NhbGNzVmFsdWVzXSA6IGNhbGNzVmFsdWVzO1xyXG4gICAgXHJcbiAgICByZXNvbHZlZENhbGNzVmFsdWVzLmZvckVhY2goY2FsY0l0ZW0gPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIFd5d29cdTAxNDJhbmllIGZ1bmtjamkgb2JsaWN6ZW5pb3dlaiB1XHUwMTdDeXRrb3duaWthLCBwcnpla2F6dWpcdTAxMDVjIGFrdHVhbG5cdTAxMDUgbWFwXHUwMTE5IE1cclxuICAgICAgICBjb25zdCByZXN1bHRWYWx1ZSA9IGNhbGNJdGVtLnZhbChNKTtcclxuICAgICAgICAvLyBaYXBpc2FuaWUgd3luaWt1IG9ibGljemVcdTAxNDQgZG8gbWFweSBNXHJcbiAgICAgICAgTS5zZXQoY2FsY0l0ZW0udmFyLCByZXN1bHRWYWx1ZSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgQlx1MDE0Mlx1MDEwNWQgcG9kY3phcyBvYmxpY3phbmlhIHptaWVubmVqIFwiJHtjYWxjSXRlbS52YXJ9XCI6YCwgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpKTtcclxuICAgICAgICAvLyBNb1x1MDE3Q2VzeiB6ZGVjeWRvd2FcdTAxMDcsIGphayBvYnNcdTAxNDJ1XHUwMTdDeVx1MDEwNyBiXHUwMTQyXHUwMTA1ZDogcG9taW5cdTAxMDVcdTAxMDcsIHphcGlzYVx1MDEwNyBiXHUwMTQyXHUwMTA1ZCwgcHJ6ZXJ3YVx1MDEwNywgaXRwLlxyXG4gICAgICAgIC8vIE5hIHJhemllIHphcGlzdWplbXkgYHVuZGVmaW5lZGAsIGFieSB3c2themFcdTAxMDcgcHJvYmxlbS5cclxuICAgICAgICBNLnNldChjYWxjSXRlbS52YXIsIHVuZGVmaW5lZCBhcyBhbnkpOyAvLyBVXHUwMTdDeXdhbXkgYGFzIGFueWAgYWJ5IHBvendvbGlcdTAxMDcgbmEgYHVuZGVmaW5lZGAgdyBtYXBpZSB6IHR5cGVtIEV4Y2VsTmVzdGVkTnVtYmVyQXJyYXlcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gTTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVydWplIHRhYmxpY1x1MDExOSBsaWN6YiAocHJ6ZWR6aWFcdTAxNDIpIG8gb2tyZVx1MDE1QmxvbmVqIGxpY3piaWUgZWxlbWVudFx1MDBGM3csIGtyb2t1IGkgd2FydG9cdTAxNUJjaSBwb2N6XHUwMTA1dGtvd2VqLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RhcnRBdCBXYXJ0b1x1MDE1Qlx1MDEwNyBwb2N6XHUwMTA1dGtvd2EgcGllcndzemVnbyBlbGVtZW50dSB3IHRhYmxpY3kuXHJcbiAqIEBwYXJhbSBzdGVwIEtyb2sgKHJcdTAwRjNcdTAxN0NuaWNhKSBtaVx1MDExOWR6eSBrb2xlam55bWkgZWxlbWVudGFtaSB3IHRhYmxpY3kuIE1vXHUwMTdDZSBieVx1MDEwNyBkb2RhdG5pLCB1amVtbnkgbHViIHplcm93eS5cclxuICogQHBhcmFtIGl0ZW1zIExpY3piYSBlbGVtZW50XHUwMEYzdyBkbyB3eWdlbmVyb3dhbmlhIHcgdGFibGljeS5cclxuICogQHJldHVybnMgVGFibGljYSBsaWN6YiAobnVtYmVyW10pIHJlcHJlemVudHVqXHUwMTA1Y2Egd3lnZW5lcm93YW55IHByemVkemlhXHUwMTQyLlxyXG4gKiBad3JhY2EgcHVzdFx1MDEwNSB0YWJsaWNcdTAxMTksIGplXHUwMTVCbGkgYGl0ZW1zYCBqZXN0IG1uaWVqc3plIGx1YiByXHUwMEYzd25lIDAuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlRmlyc3RTdGVwU2l6ZShzdGFydEF0OiBudW1iZXIsIHN0ZXA6IG51bWJlciwgaXRlbXM6IG51bWJlcik6IG51bWJlcltdIHtcclxuICBpZiAoaXRlbXMgPD0gMCkge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVzdWx0OiBudW1iZXJbXSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXM7IGkrKykge1xyXG4gICAgcmVzdWx0LnB1c2goc3RhcnRBdCArIChpICogc3RlcCkpO1xyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJ1amUgdGFibGljXHUwMTE5IGxpY3piIChwcnplZHppYVx1MDE0MiksIHphY3p5bmFqXHUwMTA1YyBvZCBgc3RhcnRBdGAsIHBvc3RcdTAxMTlwdWpcdTAxMDVjIG8gYHN0ZXBgLFxyXG4gKiBhXHUwMTdDIGRvIG9zaVx1MDEwNWduaVx1MDExOWNpYSAoaSBwb3RlbmNqYWxuaWUgd1x1MDE0Mlx1MDEwNWN6ZW5pYSkgYGVuZEF0YC5cclxuICpcclxuICogQHBhcmFtIHN0YXJ0QXQgV2FydG9cdTAxNUJcdTAxMDcgcG9jelx1MDEwNXRrb3dhIHBpZXJ3c3plZ28gZWxlbWVudHUgdyB0YWJsaWN5LlxyXG4gKiBAcGFyYW0gc3RlcCBLcm9rIChyXHUwMEYzXHUwMTdDbmljYSkgbWlcdTAxMTlkenkga29sZWpueW1pIGVsZW1lbnRhbWkgdyB0YWJsaWN5LiBNb1x1MDE3Q2UgYnlcdTAxMDcgZG9kYXRuaSwgdWplbW55IGx1YiB6ZXJvd3kuXHJcbiAqIEBwYXJhbSBlbmRBdCBXYXJ0b1x1MDE1Qlx1MDEwNyBrb1x1MDE0NGNvd2EgcHJ6ZWR6aWFcdTAxNDJ1LiBFbGVtZW50eSBiXHUwMTE5ZFx1MDEwNSBnZW5lcm93YW5lIHRhayBkXHUwMTQydWdvLCBqYWtcclxuICogZFx1MDE0MnVnbyBtaWVzemN6XHUwMTA1IHNpXHUwMTE5IHcgcHJ6ZWR6aWFsZSBva3JlXHUwMTVCbG9ueW0gcHJ6ZXogYHN0YXJ0QXRgLCBgc3RlcGAgaSBgZW5kQXRgICh3XHUwMTQyXHUwMTA1Y3puaWUpLlxyXG4gKiBAcmV0dXJucyBUYWJsaWNhIGxpY3piIChudW1iZXJbXSkgcmVwcmV6ZW50dWpcdTAxMDVjYSB3eWdlbmVyb3dhbnkgcHJ6ZWR6aWFcdTAxNDIuXHJcbiAqIFp3cmFjYSBwdXN0XHUwMTA1IHRhYmxpY1x1MDExOSwgamVcdTAxNUJsaSBuaWUgbW9cdTAxN0NuYSB3eWdlbmVyb3dhXHUwMTA3IFx1MDE3Q2FkbnljaCBlbGVtZW50XHUwMEYzd1xyXG4gKiAobnAuIHN0YXJ0QXQgPiBlbmRBdCBwcnp5IGRvZGF0bmltIGtyb2t1LCBsdWIgamVcdTAxNUJsaSBzdGVwPTAgYSBzdGFydEF0ICE9PSBlbmRBdCkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlRmlyc3RTdGVwTGFzdChzdGFydEF0OiBudW1iZXIsIHN0ZXA6IG51bWJlciwgZW5kQXQ6IG51bWJlcik6IG51bWJlcltdIHtcclxuICBjb25zdCByZXN1bHQ6IG51bWJlcltdID0gW107XHJcblxyXG4gIGlmIChzdGVwID09PSAwKSB7XHJcbiAgICAvLyBKZVx1MDE1QmxpIGtyb2sgd3lub3NpIDAsIHByemVkemlhXHUwMTQyIG1vXHUwMTdDZSB6YXdpZXJhXHUwMTA3IHR5bGtvIGplZGVuIGVsZW1lbnQsXHJcbiAgICAvLyBqZVx1MDE1QmxpIHN0YXJ0QXQgamVzdCByXHUwMEYzd25lIGVuZEF0LlxyXG4gICAgaWYgKHN0YXJ0QXQgPT09IGVuZEF0KSB7XHJcbiAgICAgIHJlc3VsdC5wdXNoKHN0YXJ0QXQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDsgLy8gWndyYWNhIFtzdGFydEF0XSBsdWIgW11cclxuICB9XHJcblxyXG4gIGlmIChzdGVwID4gMCkge1xyXG4gICAgLy8gS3JvayBkb2RhdG5pOiBpZHppZW15IHcgZ1x1MDBGM3JcdTAxMTlcclxuICAgIGlmIChzdGFydEF0ID4gZW5kQXQpIHtcclxuICAgICAgcmV0dXJuIHJlc3VsdDsgLy8gV2FydG9cdTAxNUJcdTAxMDcgcG9jelx1MDEwNXRrb3dhIGplc3QganVcdTAxN0MgemEgd2FydG9cdTAxNUJjaVx1MDEwNSBrb1x1MDE0NGNvd1x1MDEwNVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgY3VycmVudFZhbHVlID0gc3RhcnRBdDsgY3VycmVudFZhbHVlIDw9IGVuZEF0OyBjdXJyZW50VmFsdWUgKz0gc3RlcCkge1xyXG4gICAgICByZXN1bHQucHVzaChjdXJyZW50VmFsdWUpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7IC8vIHN0ZXAgPCAwXHJcbiAgICAvLyBLcm9rIHVqZW1ueTogaWR6aWVteSB3IGRcdTAwRjNcdTAxNDJcclxuICAgIGlmIChzdGFydEF0IDwgZW5kQXQpIHtcclxuICAgICAgcmV0dXJuIHJlc3VsdDsgLy8gV2FydG9cdTAxNUJcdTAxMDcgcG9jelx1MDEwNXRrb3dhIGplc3QganVcdTAxN0MgemEgd2FydG9cdTAxNUJjaVx1MDEwNSBrb1x1MDE0NGNvd1x1MDEwNSAodyB6XHUwMTQyXHUwMTA1IHN0cm9uXHUwMTE5KVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgY3VycmVudFZhbHVlID0gc3RhcnRBdDsgY3VycmVudFZhbHVlID49IGVuZEF0OyBjdXJyZW50VmFsdWUgKz0gc3RlcCkge1xyXG4gICAgICByZXN1bHQucHVzaChjdXJyZW50VmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuLy8gQWx0ZXJuYXR5d25hLCBiYXJkemllaiB6d2lcdTAxMTl6XHUwMTQyYSBpbXBsZW1lbnRhY2phIHVcdTAxN0N5d2FqXHUwMTA1Y2EgQXJyYXkuZnJvbSAoZHppYVx1MDE0MmEgdGFrIHNhbW8pOlxyXG4vKlxyXG5mdW5jdGlvbiBpbml0UmFuZ2VGaXJzdFN0ZXBTaXplQWx0ZXJuYXRpdmUoaXRlbXM6IG51bWJlciwgc3RlcDogbnVtYmVyLCBzdGFydEF0OiBudW1iZXIpOiBudW1iZXJbXSB7XHJcbiAgaWYgKGl0ZW1zIDw9IDApIHtcclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcbiAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IGl0ZW1zIH0sIChfLCBpbmRleCkgPT4gc3RhcnRBdCArIGluZGV4ICogc3RlcCk7XHJcbn1cclxuXHJcbmNvbnNvbGUubG9nKFwiLS0tIFRlc3QgYWx0ZXJuYXR5d25laiBpbXBsZW1lbnRhY2ppIC0tLVwiKTtcclxuY29uc3QgcmFuZ2UxX2FsdCA9IGluaXRSYW5nZUZpcnN0U3RlcFNpemVBbHRlcm5hdGl2ZSg1LCAyLCAxMCk7XHJcbmNvbnNvbGUubG9nKFwiUmFuZ2UgMSBBbHQgKGl0ZW1zOiA1LCBzdGVwOiAyLCBzdGFydEF0OiAxMCk6XCIsIHJhbmdlMV9hbHQpO1xyXG4qL1xyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRXhjZWxSZXN1bHRTb3J0aW5nT3V0cHV0QXRUYWJsZShcclxuICBtb2RlOiBcIlJPV1wiIHwgXCJDT0xcIixcclxuICBzb3J0OiBzdHJpbmdbXSxcclxuICBkYXRhOiBFeGNlbFJlc3VsdHMsXHJcbik6IChzdHJpbmcgfCBudW1iZXIpW11bXSB7XHJcbiAgY29uc3QgcmVzdWx0OiAoc3RyaW5nIHwgbnVtYmVyKVtdW10gPSBbXTtcclxuXHJcbiAgLy8gTmFnXHUwMTQyXHUwMEYzd2tpIChwaWVyd3N6eSB3aWVyc3ogbHViIGtvbHVtbmEpXHJcbiAgY29uc3QgaGVhZGVycyA9IHNvcnQubWFwKChrZXkpID0+IGtleSA9PT0gXCI9fHxcIiA/IFwiXCIgOiBgXHUzMDEwJHtrZXl9XHUzMDExYCk7XHJcblxyXG4gIHJlc3VsdC5wdXNoKGhlYWRlcnMpOyAvLyBwaWVyd3N6eSB3aWVyc3ogdG8gbmFnXHUwMTQyXHUwMEYzd2tpXHJcblxyXG4gIC8vIFpha1x1MDE0MmFkYW15LCBcdTAxN0NlIHdzenlzdGtpZSB0YWJsaWNlIG1halx1MDEwNSB0XHUwMTE5IHNhbVx1MDEwNSBkXHUwMTQydWdvXHUwMTVCXHUwMTA3XHJcbiAgY29uc3Qgcm93Q291bnQgPSBNYXRoLm1heChcclxuICAgIC4uLnNvcnQubWFwKChrZXkpID0+XHJcbiAgICAgIEFycmF5LmlzQXJyYXkoZGF0YS5nZXQoa2V5KSkgPyAoZGF0YS5nZXQoa2V5KSBhcyBudW1iZXJbXSkubGVuZ3RoIDogMFxyXG4gICAgKSxcclxuICApO1xyXG5cclxuICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCByb3dDb3VudDsgcm93KyspIHtcclxuICAgIGNvbnN0IHJvd0RhdGE6IChzdHJpbmcgfCBudW1iZXIpW10gPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBzb3J0KSB7XHJcbiAgICAgIGlmIChrZXkgPT09IFwiPXx8XCIpIHtcclxuICAgICAgICByb3dEYXRhLnB1c2goXCJcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY29sRGF0YSA9IGRhdGEuZ2V0KGtleSk7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29sRGF0YSkpIHtcclxuICAgICAgICAgIHJvd0RhdGEucHVzaCgoY29sRGF0YSBhcyBudW1iZXJbXSlbcm93XSA/PyBcIlwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcm93RGF0YS5wdXNoKFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlc3VsdC5wdXNoKHJvd0RhdGEpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJhbnNwb3NlVEFCTEU8VD4obWF0cml4OiBUW11bXSk6IFRbXVtdIHtcclxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSAwKSByZXR1cm4gW107XHJcbiAgICBjb25zdCByb3dzID0gbWF0cml4Lmxlbmd0aDtcclxuICAgIGNvbnN0IGNvbHMgPSBtYXRyaXhbMF0ubGVuZ3RoO1xyXG4gIFxyXG4gICAgY29uc3QgcmVzdWx0OiBUW11bXSA9IEFycmF5LmZyb20oeyBsZW5ndGg6IGNvbHMgfSwgKCkgPT4gbmV3IEFycmF5PFQ+KHJvd3MpKTtcclxuICBcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sczsgaisrKSB7XHJcbiAgICAgICAgcmVzdWx0W2pdW2ldID0gbWF0cml4W2ldW2pdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICBcclxuICByZXR1cm4gbW9kZSAhPSBcIkNPTFwiID8gdHJhbnNwb3NlVEFCTEUocmVzdWx0KSA6IHJlc3VsdDtcclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBFeGNlbDtcclxuXHJcbi8vIC0tLSBQcnp5a1x1MDE0MmFkIHVcdTAxN0N5Y2lhIC0tLVxyXG4vLy8vIERlZmluaWNqYSB3YXJ0b1x1MDE1QmNpIHdlalx1MDE1QmNpb3d5Y2hcclxuLy9jb25zdCBpbnB1dHM6IEV4Y2VsU2V0c1NldFtdID0gW1xyXG4vLyAgeyB2YXI6IFwiaVwiLCB2YWw6IFsxLCAyLCAzLCA0LCA1LCA2LCA3XSB9LFxyXG4vLyAgeyB2YXI6IFwialwiLCB2YWw6IFsxLCAzLCAyLCA3LCA2LCA1LCA0XSB9XHJcbi8vXTtcclxuLy9cclxuLy8vLyBEZWZpbmljamEgb2JsaWN6ZVx1MDE0NFxyXG4vL2NvbnN0IGNhbGN1bGF0aW9uczogRXhjZWxTZXRzR2V0W10gPSBbXHJcbi8vICB7XHJcbi8vICAgIHZhcjogXCJpal9zdW1cIiwgLy8gTm93YSB6bWllbm5hLCBrdFx1MDBGM3JhIGJcdTAxMTlkemllIHN1bVx1MDEwNSBpW2tdICsgaltrXVxyXG4vLyAgICB2YWw6IChjdXJyZW50TWFwKSA9PiB7XHJcbi8vICAgICAgLy8gUG9iaWVyYW15IHRhYmxpY2UgJ2knIG9yYXogJ2onIHogbWFweVxyXG4vLyAgICAgIGNvbnN0IGlBcnJheSA9IGN1cnJlbnRNYXAuZ2V0KFwiaVwiKTtcclxuLy8gICAgICBjb25zdCBqQXJyYXkgPSBjdXJyZW50TWFwLmdldChcImpcIik7XHJcbi8vXHJcbi8vICAgICAgLy8gV2FcdTAxN0NuZTogU3ByYXdkemVuaWUgdHlwXHUwMEYzdyBpIG9ic1x1MDE0MnVnYSBiXHUwMTQyXHUwMTE5ZFx1MDBGM3cgd2V3blx1MDEwNXRyeiBmdW5rY2ppIHVcdTAxN0N5dGtvd25pa2FcclxuLy8gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaUFycmF5KSB8fCAhQXJyYXkuaXNBcnJheShqQXJyYXkpKSB7XHJcbi8vICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJabWllbm5lICdpJyBvcmF6ICdqJyBtdXN6XHUwMTA1IGJ5XHUwMTA3IHRhYmxpY2FtaSBkbGEgdGVqIG9wZXJhY2ppIHN1bW93YW5pYS5cIik7XHJcbi8vICAgICAgfVxyXG4vLyAgICAgIGlmIChpQXJyYXkuc29tZShpc05hTikgfHwgakFycmF5LnNvbWUoaXNOYU4pKSB7XHJcbi8vICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldzenlzdGtpZSBlbGVtZW50eSB3IHRhYmxpY2FjaCAnaScgb3JheiAnaicgbXVzelx1MDEwNSBieVx1MDEwNyBsaWN6YmFtaS5cIik7XHJcbi8vICAgICAgfVxyXG4vLyAgICAgIGlmIChpQXJyYXkubGVuZ3RoICE9PSBqQXJyYXkubGVuZ3RoKSB7XHJcbi8vICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUYWJsaWNlICdpJyBvcmF6ICdqJyBtdXN6XHUwMTA1IG1pZVx1MDEwNyB0YWtcdTAxMDUgc2FtXHUwMTA1IGRcdTAxNDJ1Z29cdTAxNUJcdTAxMDcgZG8gc3Vtb3dhbmlhIGVsZW1lbnQgcG8gZWxlbWVuY2llLlwiKTtcclxuLy8gICAgICB9XHJcbi8vXHJcbi8vICAgICAgLy8gV3lrb25hbmllIG9wZXJhY2ppIHN1bW93YW5pYSBlbGVtZW50IHBvIGVsZW1lbmNpZVxyXG4vLyAgICAgIC8vIFpha1x1MDE0MmFkYW15LCBcdTAxN0NlIHNcdTAxMDUgdG8gcFx1MDE0MmFza2llIHRhYmxpY2UgbGljemIsIHpnb2RuaWUgeiBwcnp5a1x1MDE0MmFkZW0uXHJcbi8vICAgICAgLy8gRGxhIEV4Y2VsTmVzdGVkTnVtYmVyQXJyYXkgb3BlcmFjamEgYnlcdTAxNDJhYnkgYmFyZHppZWogelx1MDE0Mm9cdTAxN0NvbmEgKHJla3VyZW5jeWpuYSkuXHJcbi8vICAgICAgcmV0dXJuIGlBcnJheS5tYXAoKHZhbF9pLCBpbmRleCkgPT4gKHZhbF9pIGFzIG51bWJlcikgKyAoakFycmF5W2luZGV4XSBhcyBudW1iZXIpKTtcclxuLy8gICAgfVxyXG4vLyAgfSxcclxuLy8gIHtcclxuLy8gICAgdmFyOiBcImtcIiwgLy8gUHJ6eWtcdTAxNDJhZCBpbm5laiB6bWllbm5laiwgbnAuIHNrYWxhclxyXG4vLyAgICB2YWw6ICgpID0+IDEwMCAvLyBQcm9zdGEgZnVua2NqYSB6d3JhY2FqXHUwMTA1Y2Egd2FydG9cdTAxNUJcdTAxMDdcclxuLy8gIH0sXHJcbi8vICB7XHJcbi8vICAgIHZhcjogXCJpX3BsdXNfa1wiLCAvLyBQcnp5a1x1MDE0MmFkIG9wZXJhY2ppIHRhYmxpY2EgKyBza2FsYXIgKGJyb2FkY2FzdGluZylcclxuLy8gICAgdmFsOiAoY3VycmVudE1hcCkgPT4ge1xyXG4vLyAgICAgICAgY29uc3QgaUFycmF5ID0gY3VycmVudE1hcC5nZXQoXCJpXCIpO1xyXG4vLyAgICAgICAgY29uc3Qga1ZhbCA9IGN1cnJlbnRNYXAuZ2V0KFwia1wiKTtcclxuLy9cclxuLy8gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpQXJyYXkpIHx8IHR5cGVvZiBrVmFsICE9PSAnbnVtYmVyJykge1xyXG4vLyAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIidpJyBtdXNpIGJ5XHUwMTA3IHRhYmxpY1x1MDEwNSwgYSAnaycgbGljemJcdTAxMDUuXCIpO1xyXG4vLyAgICAgICAgfVxyXG4vLyAgICAgICAgcmV0dXJuIGlBcnJheS5tYXAodmFsX2kgPT4gKHZhbF9pIGFzIG51bWJlcikgKyAoa1ZhbCBhcyBudW1iZXIpKTtcclxuLy8gICAgfVxyXG4vLyAgfVxyXG4vL107XHJcbi8vXHJcbi8vLy8gV3l3b1x1MDE0MmFuaWUgZnVua2NqaSBFeGNlbFxyXG4vL2NvbnN0IEExID0gRXhjZWwoaW5wdXRzLCBjYWxjdWxhdGlvbnMpO1xyXG4vL1xyXG4vLy8vIFd5XHUwMTVCd2lldGxlbmllIHd5bmlrXHUwMEYzd1xyXG4vL2NvbnNvbGUubG9nKFwiQ2FcdTAxNDJhIG1hcGEgQTE6XCIsIEExKTtcclxuLy9jb25zb2xlLmxvZyhcIkExLmdldCgnaScpOlwiLCBBMS5nZXQoXCJpXCIpKTtcclxuLy9jb25zb2xlLmxvZyhcIkExLmdldCgnaicpOlwiLCBBMS5nZXQoXCJqXCIpKTtcclxuLy9jb25zb2xlLmxvZyhcIkExLmdldCgnaWpfc3VtJyk6XCIsIEExLmdldChcImlqX3N1bVwiKSk7IC8vIE9jemVraXdhbmU6IFsyLCA1LCA1LCAxMSwgMTEsIDExLCAxMV1cclxuLy9jb25zb2xlLmxvZyhcIkExLmdldCgnaycpOlwiLCBBMS5nZXQoXCJrXCIpKTsgICAgICAgICAvLyBPY3pla2l3YW5lOiAxMDBcclxuLy9jb25zb2xlLmxvZyhcIkExLmdldCgnaV9wbHVzX2snKTpcIiwgQTEuZ2V0KFwiaV9wbHVzX2tcIikpOyAvLyBPY3pla2l3YW5lOiBbMTAxLCAxMDIsIDEwMywgMTA0LCAxMDUsIDEwNiwgMTA3XVxyXG4vL2NvbnNvbGUubG9nKFwiV2FydG9cdTAxNUJcdTAxMDcgaVszXSAoaW5kZWtzIDMsIGN6eWxpIGN6d2FydHkgZWxlbWVudCk6XCIsIChBMS5nZXQoXCJpXCIpIGFzIG51bWJlcltdKVszXSk7IC8vIE9jemVraXdhbmU6IDRcclxuIiwgIi8qKiBAanN4UnVudGltZSBhdXRvbWF0aWMgKi9cbi8qKiBAanN4SW1wb3J0U291cmNlIGh0dHBzOi8vZXNtLnNoL3ByZWFjdEAxMC4yNi44ICovXG5cbmltcG9ydCB7IEpTWCB9IGZyb20gXCJodHRwczovL2VzbS5zaC9wcmVhY3RAMTAuMjYuOFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gUGxvdEh0bWxUYWJsZShcbiAgcHJvcHM6IHtcbiAgICBkYXRhOiAoc3RyaW5nIHwgbnVtYmVyKVtdW107XG4gICAgbW9kZTogXCJST1dcIiB8IFwiQ09MXCI7XG4gICAgdGFibGVDbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgY2FwdGlvbj86IHN0cmluZztcbiAgICB0aENsYXNzTmFtZT86IHN0cmluZztcbiAgICB0ZENsYXNzTmFtZT86IHN0cmluZztcbiAgfSxcbik6IEpTWC5FbGVtZW50IHtcbiAgY29uc3Qge1xuICAgIGRhdGEsXG4gICAgbW9kZSxcbiAgICB0YWJsZUNsYXNzTmFtZSxcbiAgICBjYXB0aW9uLFxuICAgIHRoQ2xhc3NOYW1lLFxuICAgIHRkQ2xhc3NOYW1lLFxuICB9ID0gcHJvcHM7XG5cbiAgY29uc3QgaXNDb2xNb2RlID0gbW9kZSA9PT0gXCJDT0xcIjtcblxuICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gPHRhYmxlIGNsYXNzTmFtZT17dGFibGVDbGFzc05hbWUgPz8gXCJcIn0+PC90YWJsZT47XG4gIH1cblxuICBjb25zdCBoZWFkZXJSb3cgPSBpc0NvbE1vZGUgPyBkYXRhWzBdIDogZGF0YS5tYXAoKHJvdykgPT4gcm93WzBdKTtcbiAgY29uc3QgYm9keVJvd3MgPSBpc0NvbE1vZGUgPyBkYXRhLnNsaWNlKDEpIDogZGF0YS5tYXAoKHJvdykgPT4gcm93LnNsaWNlKDEpKTtcblxuICByZXR1cm4gKFxuICAgIDx0YWJsZVxuICAgICAgY2xhc3NOYW1lPXtgJHtpc0NvbE1vZGUgPyBcInBsb3QtY29sLWRhdGExXCIgOiBcInBsb3Qtcm93LWRhdGExXCJ9ICR7XG4gICAgICAgIHRhYmxlQ2xhc3NOYW1lID8/IFwiXCJcbiAgICAgIH1gfVxuICAgID5cbiAgICAgIHtjYXB0aW9uICYmIDxjYXB0aW9uPntjYXB0aW9ufTwvY2FwdGlvbj59XG5cbiAgICAgIDx0Ym9keT5cbiAgICAgICAge2lzQ29sTW9kZVxuICAgICAgICAgID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgey8qIE5hZ1x1MDE0Mlx1MDBGM3draSAqL31cbiAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIHtoZWFkZXJSb3cubWFwKChrZXksIGNvbEluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBrZXlTdHIgPSB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICYmIGtleSAhPT0gXCI9fHxcIlxuICAgICAgICAgICAgICAgICAgICA/IGtleVxuICAgICAgICAgICAgICAgICAgICA6IFwiTk5PT05ORUVcIjtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDx0aFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHRhYmxlLXZhbC10eXBlLS0ke2tleVN0cn0gJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoQ2xhc3NOYW1lID8/IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e2tleVN0cn1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIHtrZXl9XG4gICAgICAgICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICB7LyogRGFuZSAqL31cbiAgICAgICAgICAgICAge2JvZHlSb3dzLm1hcCgocm93LCByb3dJbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgIDx0ciBrZXk9e2Byb3ctJHtyb3dJbmRleH1gfT5cbiAgICAgICAgICAgICAgICAgIHtyb3cubWFwKChjZWxsLCBjb2xJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSB0eXBlb2YgaGVhZGVyUm93W2NvbEluZGV4XSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyUm93W2NvbEluZGV4XSAhPT0gXCI9fHxcIlxuICAgICAgICAgICAgICAgICAgICAgID8gaGVhZGVyUm93W2NvbEluZGV4XSBhcyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICA6IFwiTk5PT05ORUVcIjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICA8dGRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHRhYmxlLXZhbC10eXBlLS0ke2tleX0gJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGRDbGFzc05hbWUgPz8gXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2Ake2tleX0tcm93LSR7cm93SW5kZXh9YH1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Y2VsbH1cbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApXG4gICAgICAgICAgOiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICB7ZGF0YS5tYXAoKHJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSB0eXBlb2Ygcm93WzBdID09PSBcInN0cmluZ1wiICYmIHJvd1swXSAhPT0gXCI9fHxcIlxuICAgICAgICAgICAgICAgICAgPyByb3dbMF1cbiAgICAgICAgICAgICAgICAgIDogXCJOTk9PTk5FRVwiO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8dHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgdGFibGUtdmFsLXR5cGUtLSR7a2V5fWB9XG4gICAgICAgICAgICAgICAgICAgIGtleT17YHNlcmllcy1yb3ctJHtrZXl9YH1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwicm93XCIgY2xhc3NOYW1lPXt0aENsYXNzTmFtZX0+XG4gICAgICAgICAgICAgICAgICAgICAge3Jvd1swXX1cbiAgICAgICAgICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICAgICAgICAge3Jvdy5zbGljZSgxKS5tYXAoKGNlbGwsIGNvbEluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgPHRkXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3RkQ2xhc3NOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtgJHtrZXl9LWNvbC0ke2NvbEluZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge2NlbGx9XG4gICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKX1cbiAgICAgIDwvdGJvZHk+XG4gICAgPC90YWJsZT5cbiAgKTtcbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gZmxvb3JMb2cyKHg6bnVtYmVyKTpudW1iZXIge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLmxvZzIoeCkpO1xufVxuXG4vLyAgdG8ga2xhc3ljem5hIHBvdFx1MDExOWdhIGR3XHUwMEYzamtpLlxuZXhwb3J0IGZ1bmN0aW9uIHBvdzIoeDpudW1iZXIpOm51bWJlciB7XG4gIHJldHVybiBNYXRoLnBvdygyLHgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvdzJBZmZpbmUoXG4gIGE6IG51bWJlcixcbiAgYjogbnVtYmVyLFxuICBjOiBudW1iZXIsXG4gIHg6IG51bWJlcixcbiAgZj86ICh2YWw6IG51bWJlcikgPT4gbnVtYmVyIC8vIE9wY2pvbmFsbnkgYXJndW1lbnQgY2FsbGJhY2tcbik6IG51bWJlciB7XG4gIGNvbnN0IHByb2Nlc3NlZFggPSBmID8gZih4KSA6IHg7IC8vIEplXHUwMTVCbGkgZiBpc3RuaWVqZSwgemFzdG9zdWogamUgZG8geCwgdyBwcnplY2l3bnltIHJhemllIHVcdTAxN0N5aiB4XG4gIHJldHVybiBhICogMiAqKiAocHJvY2Vzc2VkWCArIGIpICsgYztcbn1cblxuLypcbmV4cG9ydCBmdW5jdGlvbiBwb3cyQWZmaW5lKHg6IG51bWJlciwgYTogbnVtYmVyLCBiOiBudW1iZXIsIGM6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiBhICogMiAqKiAoeCArIGIpICsgYztcbn1cbiovXG5cbi8vICB3YWx1YWNqYSBkd3UtYWR5Y3puYSBsaWN6YnkgbmF0dXJhbG5laiBkb2RhdG5pZWogXG4vLyAgY3p5bGkgbmFqd2lcdTAxMTlrc3pcdTAxMDUgcG90XHUwMTE5Z1x1MDExOSBsaWN6YnkgMiwga3RcdTAwRjNyYSBkemllbGkgeFxuLy8gIG1hcGxlIGBrIDo9IHggLT4gaWxvZzIoeCAtIEJpdHNbQW5kXSh4LCB4IC0gMSkpYFxuLy8gIGsoeCk9b3JkXzIoeClcbi8vICBDenlsaTogaWxlIHJhenkgeCBtb1x1MDE3Q25hIHBvZHppZWxpXHUwMTA3IHByemV6IDIsIHphbmltIHByemVzdGFuaWUgYnlcdTAxMDcgY2FcdTAxNDJrb3dpdGUgXG4vLyAgKGx1Yiwgclx1MDBGM3dub3puYWN6bmllLCBwb3p5Y2phIG5ham1cdTAxNDJvZHN6ZWdvIHVzdGF3aW9uZWdvIGJpdHUgdyB4KS5cbmV4cG9ydCBmdW5jdGlvbiB2YWwyQWRpYyh4OiBudW1iZXIpOiBudW1iZXIge1xuICBpZiAoeCA8PSAwIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnQgbXVzaSBieVx1MDEwNyBkb2RhdG5pXHUwMTA1IGxpY3piXHUwMTA1IGNhXHUwMTQya293aXRcdTAxMDUuXCIpO1xuICB9XG4gIHJldHVybiBNYXRoLmxvZzIoeCAmIC14KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvdzJBZmZpbmVfdmFsMkFkaWMoeDogbnVtYmVyLCBhOiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIGEgKiAyICoqICh2YWwyQWRpYyh4KSArIGIpICsgYztcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGZ1bmN0aW9uIGlzTm90VmFsTmF0dXJhbFBvcyh2YWw6dW5rbm93bik6Ym9vbGVhbiB7XG4gIHJldHVybiAodHlwZW9mIHZhbCAhPT0gXCJudW1iZXJcIiB8fCBpc05hTih2YWwpIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHZhbCkgfHxcbiAgdmFsIDw9IDApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvKHZhbDp1bmtub3duKTpib29sZWFuIHtcbiAgcmV0dXJuICh0eXBlb2YgdmFsICE9PSBcIm51bWJlclwiIHx8IGlzTmFOKHZhbCkgfHwgIU51bWJlci5pc0ludGVnZXIodmFsKSB8fFxuICB2YWwgPCAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlc3RTb21Ob3RPZlZhbHNBcnJheSh2OnN0cmluZywgYXJyOnVua25vd24sIHRlc3Q6XCJpc05vdFZhbE5hdHVyYWxQb3NcInxcImlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvXCIpOnZvaWQge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBabWllbm5lICR7dn0gIG11c3pcdTAxMDUgYnlcdTAxMDcgdGFibGljYW1pLmAsXG4gICAgKTtcbiAgfVxuICBzd2l0Y2ggKHRlc3QpIHtcbiAgICBjYXNlIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCI6XG4gICAgICBpZiAoYXJyLnNvbWUoaXNOb3RWYWxOYXR1cmFsUG9zKSkge3Rocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgV3N6eXN0a2llIGVsZW1lbnR5IHcgdGFibGljeSAke3Z9IG11c3pcdTAxMDUgYnlcdTAxMDcgbGljemJhbWkgbmF0dXJhbG55bWkgZG9kYXRuaW1pICh3aVx1MDExOWtzenltaSBvZCAwKS5gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvXCI6XG4gICAgICBpZiAoYXJyLnNvbWUoaXNOb3RWYWxOYXR1cmFsUG9zV2l0aFplcm8pKSB7dGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgV3N6eXN0a2llIGVsZW1lbnR5IHcgdGFibGljeSAke3Z9IG11c3pcdTAxMDUgYnlcdTAxMDcgbGljemJhbWkgbmF0dXJhbG55bWkgZG9kYXRuaW1pIHogemVybyAod2lcdTAxMTlrc3p5bWkgb2QgLTEpLmAsXG4gICAgICApO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbn1cbiIsICJpbXBvcnQge1xyXG4gIEV4Y2VsLFxyXG4gIC8vdHlwZSBFeGNlbE5lc3RlZE4sXHJcbiAgdHlwZSBFeGNlbFJlc3VsdHMsXHJcbiAgdHlwZSBFeGNlbFNldHNHZXQsXHJcbiAgdHlwZSBFeGNlbFNldHNTZXQsXHJcbiAgLy9pbml0UmFuZ2VGaXJzdFN0ZXBMYXN0LFxyXG4gIC8vaW5pdFJhbmdlRmlyc3RTdGVwU2l6ZSxcclxufSBmcm9tIFwiLi4vbG9naWMvY2FsY3VsYXRlRXhjZWwudHNcIjtcclxuaW1wb3J0ICogYXMgTWF0aEYgZnJvbSBcIi4uL2xvZ2ljL21hdGhGdW5jLnRzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lclRhYmxlMShpRGF0YTogbnVtYmVyW10pOkV4Y2VsUmVzdWx0cyB7XHJcbiAgY29uc3QgbWF0aEVudGVyOiBFeGNlbFNldHNTZXRbXSA9IFtcclxuICAgIHtcclxuICAgICAgdmFyOiBcImlcIixcclxuICAgICAgdmFsOiBpRGF0YSxcclxuICAgIH0sXHJcbiAgXTtcclxuICBjb25zdCBtYXRoQ2FsY3M6IEV4Y2VsU2V0c0dldFtdID0gW1xyXG4gICAge1xyXG4gICAgICB2YXI6IFwiaFwiLFxyXG4gICAgICB2YWw6IChjdXJyZW50TSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwiaVwiKTtcclxuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXCJpXCIsIGlfX0FycmF5LCBcImlzTm90VmFsTmF0dXJhbFBvc1wiKTtcclxuICAgICAgICAvLyBpX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIGJvIGtvbnRyb2xhIGplc3QgdyBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoJ2knLGlfX0FycmF5LFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpOyFcclxuICAgICAgICByZXR1cm4gaV9fQXJyYXkubWFwKCh2YWxfaSwgX2luZGV4KSA9PlxyXG4gICAgICAgICAgTWF0aEYuZmxvb3JMb2cyKHZhbF9pIGFzIG51bWJlcilcclxuICAgICAgICApO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdmFyOiBcImhBXCIsXHJcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaF9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJoXCIpO1xyXG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcclxuICAgICAgICAgIFwiaFwiLFxyXG4gICAgICAgICAgaF9fQXJyYXksXHJcbiAgICAgICAgICBcImlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvXCIsXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBoX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaCcsaF9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NXaXRoWmVyb1wiKTshXHJcblxyXG4gICAgICAgIHJldHVybiBoX19BcnJheS5tYXAoKHZhbF9oLCBfaW5kZXgpID0+XHJcbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDAsIDAsIHZhbF9oIGFzIG51bWJlcilcclxuICAgICAgICApO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdmFyOiBcImhaXCIsXHJcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaF9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJoXCIpO1xyXG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcclxuICAgICAgICAgIFwiaFwiLFxyXG4gICAgICAgICAgaF9fQXJyYXksXHJcbiAgICAgICAgICBcImlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvXCIsXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBoX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaCcsaF9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NXaXRoWmVyb1wiKTshXHJcblxyXG4gICAgICAgIHJldHVybiBoX19BcnJheS5tYXAoKHZhbF9oLCBfaW5kZXgpID0+XHJcbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDEsIC0xLCB2YWxfaCBhcyBudW1iZXIpXHJcbiAgICAgICAgKTtcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHZhcjogXCJoQVpcIixcclxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcclxuICAgICAgICBjb25zdCBoX19BcnJheSA9IGN1cnJlbnRNLmdldChcImhcIik7XHJcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFxyXG4gICAgICAgICAgXCJoXCIsXHJcbiAgICAgICAgICBoX19BcnJheSxcclxuICAgICAgICAgIFwiaXNOb3RWYWxOYXR1cmFsUG9zV2l0aFplcm9cIixcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vIGhfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KCdoJyxoX19BcnJheSxcImlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvXCIpOyFcclxuXHJcbiAgICAgICAgcmV0dXJuIGhfX0FycmF5Lm1hcCgodmFsX2gsIF9pbmRleCkgPT5cclxuICAgICAgICAgIE1hdGhGLnBvdzJBZmZpbmUoMS41LCAxLCAtMSwgdmFsX2ggYXMgbnVtYmVyKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB2YXI6IFwiaGlcIixcclxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcclxuICAgICAgICBjb25zdCBpX19BcnJheSA9IGN1cnJlbnRNLmdldChcImlcIik7XHJcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwiaVwiLCBpX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XHJcbiAgICAgICAgY29uc3QgaEFfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwiaEFcIik7XHJcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFxyXG4gICAgICAgICAgXCJoQVwiLFxyXG4gICAgICAgICAgaEFfX0FycmF5LFxyXG4gICAgICAgICAgXCJpc05vdFZhbE5hdHVyYWxQb3NcIixcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vIGhfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KCdoJyxoX19BcnJheSxcImlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvXCIpOyFcclxuXHJcbiAgICAgICAgcmV0dXJuIGlfX0FycmF5Lm1hcCgodmFsX2ksIGluZGV4KSA9PlxyXG4gICAgICAgICAgKHZhbF9pIGFzIG51bWJlcikgLSBoQV9fQXJyYXlbaW5kZXhdXHJcbiAgICAgICAgKTtcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHZhcjogXCJoalwiLFxyXG4gICAgICB2YWw6IChjdXJyZW50TSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwiaVwiKTtcclxuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXCJpXCIsIGlfX0FycmF5LCBcImlzTm90VmFsTmF0dXJhbFBvc1wiKTtcclxuICAgICAgICBjb25zdCBoWl9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJoWlwiKTtcclxuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXHJcbiAgICAgICAgICBcImhaXCIsXHJcbiAgICAgICAgICBoWl9fQXJyYXksXHJcbiAgICAgICAgICBcImlzTm90VmFsTmF0dXJhbFBvc1wiLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gaF9fQXJyYXkgLSBuaWUgbWEgc3phbnMgYnlcdTAxMDcgdW5kZWZpbmVkLCBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoJ2gnLGhfX0FycmF5LFwiaXNOb3RWYWxOYXR1cmFsUG9zV2l0aFplcm9cIik7IVxyXG5cclxuICAgICAgICByZXR1cm4gaV9fQXJyYXkubWFwKCh2YWxfaSwgaW5kZXgpID0+XHJcbiAgICAgICAgICBoWl9fQXJyYXlbaW5kZXhdIC0gKHZhbF9pIGFzIG51bWJlcilcclxuICAgICAgICApO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdmFyOiBcImpcIixcclxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcclxuICAgICAgICBjb25zdCBpX19BcnJheSA9IGN1cnJlbnRNLmdldChcImlcIik7XHJcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwiaVwiLCBpX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XHJcblxyXG4gICAgICAgIC8vIGhfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KCdoJyxoX19BcnJheSxcImlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvXCIpOyFcclxuXHJcbiAgICAgICAgcmV0dXJuIGlfX0FycmF5Lm1hcCgodmFsX2ksIGluZGV4KSA9PlxyXG4gICAgICAgICAgTWF0aEYucG93MkFmZmluZSgxLjUsIDEsIC0xLCBNYXRoRi5mbG9vckxvZzIodmFsX2kgYXMgbnVtYmVyKSkgLVxyXG4gICAgICAgICAgKHZhbF9pIGFzIG51bWJlcilcclxuICAgICAgICApO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdmFyOiBcImtpXCIsXHJcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaV9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJpXCIpO1xyXG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcImlcIiwgaV9fQXJyYXksIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpO1xyXG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxyXG4gICAgICAgIHJldHVybiBpX19BcnJheS5tYXAoKHZhbF9pLCBfaW5kZXgpID0+IE1hdGhGLnZhbDJBZGljKHZhbF9pIGFzIG51bWJlcikpO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdmFyOiBcImtqXCIsXHJcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgal9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJqXCIpO1xyXG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcImpcIiwgal9fQXJyYXksIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpO1xyXG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxyXG4gICAgICAgIHJldHVybiBqX19BcnJheS5tYXAoKHZhbF9qLCBfaW5kZXgpID0+IE1hdGhGLnZhbDJBZGljKHZhbF9qIGFzIG51bWJlcikpO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdmFyOiBcImtpQVwiLFxyXG4gICAgICB2YWw6IChjdXJyZW50TSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwiaVwiKTtcclxuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXCJpXCIsIGlfX0FycmF5LCBcImlzTm90VmFsTmF0dXJhbFBvc1wiKTtcclxuICAgICAgICAvLyBpX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIGJvIGtvbnRyb2xhIGplc3QgdyBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoJ2knLGlfX0FycmF5LFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpOyFcclxuICAgICAgICByZXR1cm4gaV9fQXJyYXkubWFwKCh2YWxfaSwgX2luZGV4KSA9PlxyXG4gICAgICAgICAgTWF0aEYucG93MkFmZmluZSgxLCAwLCAwLCB2YWxfaSBhcyBudW1iZXIsIE1hdGhGLnZhbDJBZGljKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB2YXI6IFwia2pBXCIsXHJcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgal9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJqXCIpO1xyXG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcImpcIiwgal9fQXJyYXksIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpO1xyXG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxyXG4gICAgICAgIHJldHVybiBqX19BcnJheS5tYXAoKHZhbF9qLCBfaW5kZXgpID0+XHJcbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDAsIDAsIHZhbF9qIGFzIG51bWJlciwgTWF0aEYudmFsMkFkaWMpXHJcbiAgICAgICAgKTtcclxuICAgICAgfSxcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICB2YXI6IFwia2laXCIsXHJcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaV9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJpXCIpO1xyXG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcImlcIiwgaV9fQXJyYXksIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpO1xyXG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxyXG4gICAgICAgIHJldHVybiBpX19BcnJheS5tYXAoKHZhbF9pLCBfaW5kZXgpID0+XHJcbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDEsIC0xLCB2YWxfaSBhcyBudW1iZXIsIE1hdGhGLnZhbDJBZGljKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB2YXI6IFwia2paXCIsXHJcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgal9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJqXCIpO1xyXG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcImpcIiwgal9fQXJyYXksIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpO1xyXG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxyXG4gICAgICAgIHJldHVybiBqX19BcnJheS5tYXAoKHZhbF9qLCBfaW5kZXgpID0+XHJcbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDEsIC0xLCB2YWxfaiBhcyBudW1iZXIsIE1hdGhGLnZhbDJBZGljKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgdmFyOiBcImxpXCIsXHJcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaV9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJpXCIpO1xyXG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcImlcIiwgaV9fQXJyYXksIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpO1xyXG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxyXG4gICAgICAgIHJldHVybiBpX19BcnJheS5tYXAoKHZhbF9pLCBfaW5kZXgpID0+XHJcbiAgICAgICAgICAodmFsX2kgYXMgbnVtYmVyKSAvXHJcbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDAsIDAsIHZhbF9pIGFzIG51bWJlciwgTWF0aEYudmFsMkFkaWMpXHJcbiAgICAgICAgKTtcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHZhcjogXCJsalwiLFxyXG4gICAgICB2YWw6IChjdXJyZW50TSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGpfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwialwiKTtcclxuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXCJqXCIsIGpfX0FycmF5LCBcImlzTm90VmFsTmF0dXJhbFBvc1wiKTtcclxuICAgICAgICAvLyBpX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIGJvIGtvbnRyb2xhIGplc3QgdyBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoJ2knLGlfX0FycmF5LFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpOyFcclxuICAgICAgICByZXR1cm4gal9fQXJyYXkubWFwKCh2YWxfaiwgX2luZGV4KSA9PlxyXG4gICAgICAgICAgKHZhbF9qIGFzIG51bWJlcikgL1xyXG4gICAgICAgICAgTWF0aEYucG93MkFmZmluZSgxLCAwLCAwLCB2YWxfaiBhcyBudW1iZXIsIE1hdGhGLnZhbDJBZGljKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB2YXI6IFwibWlcIixcclxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcclxuICAgICAgICBjb25zdCBpX19BcnJheSA9IGN1cnJlbnRNLmdldChcImlcIik7XHJcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwiaVwiLCBpX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XHJcbiAgICAgICAgLy8gaV9fQXJyYXkgLSBuaWUgbWEgc3phbnMgYnlcdTAxMDcgdW5kZWZpbmVkLCBibyBrb250cm9sYSBqZXN0IHcgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KCdpJyxpX19BcnJheSxcImlzTm90VmFsTmF0dXJhbFBvc1wiKTshXHJcbiAgICAgICAgcmV0dXJuIGlfX0FycmF5Lm1hcCgodmFsX2ksIF9pbmRleCkgPT5cclxuICAgICAgICAgICgodmFsX2kgYXMgbnVtYmVyKSAvXHJcbiAgICAgICAgICAgIE1hdGhGLnBvdzJBZmZpbmUoMSwgMCwgMCwgdmFsX2kgYXMgbnVtYmVyLCBNYXRoRi52YWwyQWRpYykpICsgMVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB2YXI6IFwid2pcIixcclxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcclxuICAgICAgICBjb25zdCBqX19BcnJheSA9IGN1cnJlbnRNLmdldChcImpcIik7XHJcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwialwiLCBqX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XHJcbiAgICAgICAgLy8gaV9fQXJyYXkgLSBuaWUgbWEgc3phbnMgYnlcdTAxMDcgdW5kZWZpbmVkLCBibyBrb250cm9sYSBqZXN0IHcgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KCdpJyxpX19BcnJheSxcImlzTm90VmFsTmF0dXJhbFBvc1wiKTshXHJcbiAgICAgICAgcmV0dXJuIGpfX0FycmF5Lm1hcCgodmFsX2osIF9pbmRleCkgPT5cclxuICAgICAgICAgICgodmFsX2ogYXMgbnVtYmVyKSAvXHJcbiAgICAgICAgICAgIE1hdGhGLnBvdzJBZmZpbmUoMSwgMCwgMCwgdmFsX2ogYXMgbnVtYmVyLCBNYXRoRi52YWwyQWRpYykpICsgMlxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIF07XHJcblxyXG4gIHJldHVybiBFeGNlbChtYXRoRW50ZXIsIG1hdGhDYWxjcyk7XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIkFBRUEsT0FBUyxVQUFBQSxPQUFjLGdDQ0F2QixPQUFpQixhQUFBQyxNQUFpQix1Q0NDbEMsT0FDRSxlQUFBQyxFQUNBLGFBQUFDLEdBQ0EsVUFBQUMsT0FDSyxzQ0FRTCxPQUdBLFlBQUFDLEdBSEEsT0FBQUMsRUFHQSxRQUFBQyxNQUhBLDRDQURGLElBQU1DLEdBQ0pGLEVBQUMsUUFBSyxFQUFFLElBQUksRUFBRSxLQUFLLE1BQU0sS0FBSyxPQUFPLElBQUksR0FBRyxJQUFJLEVBRTVDRyxHQUNKRixFQUFBRixHQUFBLENBQ0Us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dXNlUmVmIiwgIkZyYWdtZW50IiwgImpzeCIsICJqc3hzIiwgIkRlZmF1bHREZWNyZW1lbnRJY29uU3ZnQ29udGVudCIsICJEZWZhdWx0SW5jcmVtZW50SWNvblN2Z0NvbnRlbnQiLCAic3ZnTGF5b3V0RGF0YSIsICJDT05UQUlORVJfQ0xBU1NfTkFNRSIsICJTVkdfQ0xBU1NfTkFNRSIsICJTVkdfQlVUVE9OX0NMQVNTX05BTUUiLCAiSFRNTF9JTlBVVF9DTEFTU19OQU1FIiwgIklucHV0TnVtYmVyIiwgInByb3BzIiwgInZhbHVlIiwgImRlZmF1bHRWYWx1ZSIsICJkZWYiLCAibWluIiwgIm1heCIsICJzdGVwIiwgInBsYWNlaG9sZGVyIiwgInJlcXVpcmVkIiwgImRpc2FibGVkIiwgIm5hbWUiLCAiaWQiLCAicmVhZE9ubHkiLCAib25DaGFuZ2UiLCAib25WYWx1ZUNoYW5nZSIsICJyYXRpb1NJWkUiLCAid3JhcHBlckNsYXNzTmFtZSIsICJzdmdDbGFzc05hbWUiLCAiaW5wdXRDbGFzc05hbWUiLCAic3R5bGUiLCAic2VsZWN0QnV0dG9uU3R5bGUiLCAiaW5jcmVtZW50QnV0dG9uU3R5bGUiLCAiZGVjcmVtZW50QnV0dG9uU3R5bGUiLCAiaW5wdXRBcmVhU3R5bGUiLCAic2VsZWN0QnV0dG9uRmlsbCIsICJpbmNyZW1lbnRCdXR0b25GaWxsIiwgImRlY3JlbWVudEJ1dHRvbkZpbGwiLCAiaW5wdXRBcmVhUmVjdEZpbGwiLCAiaW5wdXRBcmVhQm9yZGVyRmlsbCIsICJyZXN0RGl2UHJvcHMiLCAiaW5wdXRSZWYiLCAiaGFuZGxlU3RlcCIsICJkaXJlY3Rpb24iLCAiZXZlbnQiLCAiaGFuZGxlRGVjcmVtZW50IiwgImhhbmRsZUluY3JlbWVudCIsICJoYW5kbGVDaG9vc2VDbGljayIsICJuZXdWYWx1ZSIsICJoYW5kbGVJbnB1dENoYW5nZSIsICJlIiwgInJhd1ZhbHVlIiwgIm51bWVyaWNWYWx1ZSIsICJwYXJzZWQiLCAiY29udGFpbmVyV2lkdGgiLCAiY29udGFpbmVySGVpZ2h0IiwgImh0bWxJbnB1dFN0eWxlIiwgImljb25WaWV3Qm94U2l6ZSIsICJpY29uQWN0dWFsU2NhbGUiLCAiZGlzcGxheVZhbHVlIiwgImNvbW1vblN2Z0J1dHRvblN0eWxlIiwgInAiLCAiaSIsICJ1c2VFZmZlY3QiLCAidXNlUmVmIiwgInVzZVN0YXRlIiwgIkZyYWdtZW50IiwgImpzeCIsICJqc3hzIiwgIklucHV0Q2hpcHNNb2RlIiwgIlZpZXciLCAiRHJhZyIsICJDbGljayIsICJJbnB1dENoaXBzTGlzdCIsICJwcm9wcyIsICJ0aXRsZUF2YWlsYWJsZSIsICJ0aXRsZVNlbGVjdGVkIiwgInRpdGxlTW9kZUJ1dHRvbiIsICJ0aXRsZU1vZGUiLCAiYXZhaWxhYmxlVmFsdWVzIiwgInZhbHVlcyIsICJkZWZhdWx0VmFsdWVzIiwgIm9uQ2hhbmdlIiwgIm1vZGUiLCAic2V0TW9kZSIsICJzZWxlY3RlZCIsICJzZXRTZWxlY3RlZCIsICJyZW1haW5pbmciLCAidXNlZENvdW50IiwgInZhbCIsICJyZXN1bHQiLCAia2V5IiwgInRvdGFsIiwgInVzZWQiLCAiaSIsICJ0b2dnbGVNb2RlIiwgInByZXYiLCAiaGFuZGxlQWRkIiwgImhhbmRsZVJlbW92ZSIsICJpbmRleCIsICJjb3B5IiwgImhhbmRsZU1vdmVMZWZ0IiwgImhhbmRsZU1vdmVSaWdodCIsICJkcmFnSW5kZXgiLCAiZHJhZ0F2YWlsYWJsZUNoaXAiLCAib25EcmFnU3RhcnRBdmFpbGFibGUiLCAiZSIsICJjaGlwIiwgIm9uRHJhZ0VuZEF2YWlsYWJsZSIsICJvbkRyYWdTdGFydFNlbGVjdGVkIiwgIm9uRHJhZ0VuZFNlbGVjdGVkIiwgIm9uRHJvcFNlbGVjdGVkIiwgInRhcmdldEluZGV4IiwgIm5ld1NlbGVjdGVkIiwgImZyb21JbmRleCIsICJ0b0luZGV4IiwgIm1vdmVkIiwgIm9uRHJhZ092ZXJTZWxlY3RlZCIsICJvbkRyb3BBdmFpbGFibGUiLCAiaW5kZXhUb1JlbW92ZSIsICJvbkRyYWdPdmVyQXZhaWxhYmxlIiwgIkV4Y2VsIiwgImlucHV0VmFsdWVzIiwgImNhbGNzVmFsdWVzIiwgIk0iLCAiaXRlbSIsICJjYWxjSXRlbSIsICJyZXN1bHRWYWx1ZSIsICJlcnJvciIsICJpbml0UmFuZ2VGaXJzdFN0ZXBTaXplIiwgInN0YXJ0QXQiLCAic3RlcCIsICJpdGVtcyIsICJyZXN1bHQiLCAiaSIsICJpbml0UmFuZ2VGaXJzdFN0ZXBMYXN0IiwgImVuZEF0IiwgImN1cnJlbnRWYWx1ZSIsICJFeGNlbFJlc3VsdFNvcnRpbmdPdXRwdXRBdFRhYmxlIiwgIm1vZGUiLCAic29ydCIsICJkYXRhIiwgImhlYWRlcnMiLCAia2V5IiwgInJvd0NvdW50IiwgInJvdyIsICJyb3dEYXRhIiwgImNvbERhdGEiLCAidHJhbnNwb3NlVEFCTEUiLCAibWF0cml4IiwgInJvd3MiLCAiY29scyIsICJqIiwgIkZyYWdtZW50IiwgImpzeCIsICJqc3hzIiwgIlBsb3RIdG1sVGFibGUiLCAicHJvcHMiLCAiZGF0YSIsICJtb2RlIiwgInRhYmxlQ2xhc3NOYW1lIiwgImNhcHRpb24iLCAidGhDbGFzc05hbWUiLCAidGRDbGFzc05hbWUiLCAiaXNDb2xNb2RlIiwgImhlYWRlclJvdyIsICJyb3ciLCAiYm9keVJvd3MiLCAia2V5IiwgImNvbEluZGV4IiwgImtleVN0ciIsICJyb3dJbmRleCIsICJjZWxsIiwgImZsb29yTG9nMiIsICJ4IiwgInBvdzJBZmZpbmUiLCAiYiIsICJjIiwgIngiLCAiZiIsICJwcm9jZXNzZWRYIiwgInZhbDJBZGljIiwgImlzTm90VmFsTmF0dXJhbFBvcyIsICJ2YWwiLCAiaXNOb3RWYWxOYXR1cmFsUG9zV2l0aFplcm8iLCAidGVzdFNvbU5vdE9mVmFsc0FycmF5IiwgInYiLCAiYXJyIiwgInRlc3QiLCAiZ2VuZXJUYWJsZTEiLCAiaURhdGEiLCAiRXhjZWwiLCAiY3VycmVudE0iLCAiaV9fQXJyYXkiLCAidGVzdFNvbU5vdE9mVmFsc0FycmF5IiwgInZhbF9pIiwgIl9pbmRleCIsICJmbG9vckxvZzIiLCAiaF9fQXJyYXkiLCAidmFsX2giLCAicG93MkFmZmluZSIsICJoQV9fQXJyYXkiLCAiaW5kZXgiLCAiaFpfX0FycmF5IiwgInZhbDJBZGljIiwgImpfX0FycmF5IiwgInZhbF9qIiwgIkZyYWdtZW50IiwgImpzeCIsICJqc3hzIiwgIkFwcCIsICJmcm9tIiwgInVzZVNpZ25hbCIsICJ0byIsICJyZXN1bHRNIiwgInJlc3VsdFMiLCAiZ2VuZXJUYWJsZTEiLCAiaW5pdFJhbmdlRmlyc3RTdGVwU2l6ZSIsICJwbG90Um93IiwgInBsb3RTZXQiLCAiY2FsY3VsYXRlIiwgImluaXRSYW5nZUZpcnN0U3RlcExhc3QiLCAiY2hhbmdlUG9zIiwgImhhbmRsZUZyb21DaGFuZ2UiLCAibmV3VmFsdWUiLCAiaGFuZGxlVG9DaGFuZ2UiLCAiSW5wdXROdW1iZXIiLCAiSW5wdXRDaGlwc0xpc3QiLCAidmFsIiwgIlBsb3RIdG1sVGFibGUiLCAiRXhjZWxSZXN1bHRTb3J0aW5nT3V0cHV0QXRUYWJsZSIsICJqc3giLCAicmVuZGVyIiwgIkFwcCJdCn0K
