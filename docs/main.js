import{render as $e}from"https://esm.sh/preact@10.26.8";import{useSignal as Z}from"https://esm.sh/@preact/signals@2.2.0";import{useCallback as L,useEffect as we,useRef as Se}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as Ce,jsx as S,jsxs as B}from"https://esm.sh/preact@10.26.8/jsx-runtime";var xe=S("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"}),Me=B(Ce,{children:[S("rect",{x:"11",y:"5",width:"2",height:"14",rx:"1"}),S("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"})]}),m={baseViewBoxWidth:174,baseViewBoxHeight:72,buttons:{choose:{name:"btn-choose",paths:[{dataName:"btn-fill",d:"M115.75,71.62c-10.03,0-19.93-1.62-28.63-4.67l-.12-.04-.12.04c-8.7,3.06-18.59,4.67-28.63,4.67-13.06,0-25.81-2.75-36.02-7.75l26.96-15.21h75.61l26.96,15.21c-10.2,5-22.96,7.75-36.02,7.75Z",defaultFill:"#919191"},{dataName:"btn-border-fill",d:"M124.71,49.04l26.25,14.81c-10.04,4.78-22.48,7.4-35.21,7.4-9.99,0-19.84-1.61-28.5-4.65l-.25-.09-.25.09c-8.66,3.04-18.51,4.65-28.5,4.65-12.73,0-25.16-2.62-35.21-7.4l26.25-14.81h75.41M124.9,48.29H49.1l-27.66,15.6c10.03,5.06,22.85,8.11,36.82,8.11,10.46,0,20.27-1.71,28.75-4.69,8.48,2.98,18.29,4.69,28.75,4.69,13.97,0,26.78-3.04,36.82-8.11l-27.66-15.6h0Z",defaultFill:"#505050"}]},increment:{name:"btn-increment",paths:[{dataName:"btn-fill",d:"M127.38,43.51V1.1c26.83,3.37,46.25,18.01,46.25,34.9,0,9.19-5.68,17.91-16.01,24.57l-30.24-17.06Z",defaultFill:"#21597f"},{dataName:"btn-border-fill",d:"M127.75,1.53c26.42,3.45,45.5,17.86,45.5,34.47,0,9-5.55,17.56-15.65,24.13l-29.85-16.84V1.53M127,.68v43.05l30.63,17.28c10.13-6.48,16.37-15.29,16.37-25.01,0-17.5-20.21-32.08-47-35.32h0Z",defaultFill:"#104060"}],iconAnchorX:150,iconAnchorY:30},decrement:{name:"btn-decrement",paths:[{dataName:"btn-fill",d:"M16.38,60.57C6.06,53.91.38,45.19.38,36,.38,19.11,19.8,4.47,46.62,1.1v42.41l-30.24,17.06Z",defaultFill:"#b21010"},{dataName:"btn-border-fill",d:"M46.25,1.53v41.76h0s-29.85,16.84-29.85,16.84C6.3,53.56.75,45,.75,36,.75,19.39,19.83,4.97,46.25,1.53M47,.68C20.21,3.92,0,18.5,0,36c0,9.72,6.24,18.53,16.37,25.01l30.63-17.28V.68h0Z",defaultFill:"#800000"}],iconAnchorX:25,iconAnchorY:30}},inputArea:{name:"input",rect:{x:52.38,y:.38,width:69.25,height:42.54,defaultFill:"#fff"},borderPath:{d:"M121.25.75v41.79H52.75V.75h68.5M122,0H52v43.29h70V0h0Z",defaultFill:"#333"}}},Ee="inputnumber-container",Ve="inputnumber-svg",ie="inputnumber-svg-button",ke="inputnumber-html-input";function le(t){let{value:o,defaultValue:l,def:r=1,min:e,max:a,step:c=1,placeholder:v,required:N,disabled:u=!1,name:d,id:h,readOnly:f=!1,onChange:A,onValueChange:y,ratioSIZE:E=1,wrapperClassName:X,svgClassName:J,inputClassName:G,style:U,selectButtonStyle:F,incrementButtonStyle:_,decrementButtonStyle:Y,inputAreaStyle:q,selectButtonFill:K,incrementButtonFill:Q,decrementButtonFill:I,inputAreaRectFill:ee,inputAreaBorderFill:te,...R}=t,n=Se(null);we(()=>{n.current&&(o!==void 0?n.current.value=String(o):l!==void 0?n.current.value=String(l):n.current.value="")},[o,l]);let s=L(b=>{if(n.current&&!u&&!f){b==="up"?n.current.stepUp():n.current.stepDown();let V=new Event("input",{bubbles:!0,cancelable:!0});n.current.dispatchEvent(V)}},[u,f]),i=L(()=>s("down"),[s]),w=L(()=>s("up"),[s]),T=L(()=>{if(n.current&&!u&&!f){let b=r??1;if(n.current.value=String(b),y&&y(b,d),A){let V=new Event("change",{bubbles:!0});Object.defineProperty(V,"target",{writable:!1,value:n.current}),Object.defineProperty(V,"currentTarget",{writable:!1,value:n.current}),A(V)}console.log("Choose button clicked, value set to 1")}},[u,f,d,y,A]),z=b=>{let ue=b.currentTarget.value,ae;if(ue==="")ae=void 0;else{let ce=parseFloat(ue);ae=isNaN(ce)?void 0:ce}y&&y(ae,d),A&&A(b)},$=m.baseViewBoxWidth*E,Ne=m.baseViewBoxHeight*E,Ae={position:"absolute",left:`${m.inputArea.rect.x*E}px`,top:`${m.inputArea.rect.y*E}px`,width:`${m.inputArea.rect.width*E}px`,height:`${m.inputArea.rect.height*E}px`,border:"none",backgroundColor:"transparent",color:"#333",textAlign:"center",fontSize:`${Math.max(8,18*E)}px`,outline:"none",padding:`0 ${Math.max(1,2*E)}px`,margin:0,boxSizing:"border-box",MozAppearance:"textfield",WebkitAppearance:"none",appearance:"none",zIndex:2},x=24,se=1.5*(m.baseViewBoxHeight*.25*(E>.5?1:E*2)/x),ne="";o!==void 0?ne=String(o):l!==void 0&&(ne=String(l));let re={cursor:u||f?"default":"pointer"};return B("div",{className:`${Ee} ${X||""}`,style:{width:`${$}px`,height:`${Ne}px`,position:"relative",overflow:"hidden",...U},...R,children:[B("svg",{className:`${Ve} ${J||""}`,"data-name":"input-number",xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${m.baseViewBoxWidth} ${m.baseViewBoxHeight}`,style:{display:"block",width:"100%",height:"100%",position:"absolute",top:0,left:0},"aria-hidden":"true",children:[S("g",{className:ie,"data-name":m.buttons.choose.name,onClick:u?void 0:T,style:{...re,...F||{}},pointerEvents:u?"none":"auto",children:m.buttons.choose.paths.map((b,V)=>S("path",{"data-name":b.dataName,d:b.d,fill:K||b.defaultFill},`choose-path-${V}`))}),B("g",{"data-name":m.inputArea.name,style:q||{},children:[S("rect",{x:m.inputArea.rect.x,y:m.inputArea.rect.y,width:m.inputArea.rect.width,height:m.inputArea.rect.height,fill:ee||m.inputArea.rect.defaultFill}),S("path",{d:m.inputArea.borderPath.d,fill:te||m.inputArea.borderPath.defaultFill})]}),B("g",{className:ie,"data-name":m.buttons.decrement.name,onClick:!u&&!f?i:void 0,style:{...re,...Y||{}},pointerEvents:u||f?"none":"auto",children:[m.buttons.decrement.paths.map((b,V)=>S("path",{"data-name":b.dataName,d:b.d,fill:I||b.defaultFill},`dec-path-${V}`)),S("g",{transform:`translate(${m.buttons.decrement.iconAnchorX}, ${m.buttons.decrement.iconAnchorY}) scale(${se}) translate(-${x/2}, -${x/2})`,style:{pointerEvents:"none"},children:S("svg",{viewBox:`0 0 ${x} ${x}`,width:x,height:x,fill:"white",overflow:"visible",children:xe})})]}),B("g",{className:ie,"data-name":m.buttons.increment.name,onClick:!u&&!f?w:void 0,style:{...re,..._||{}},pointerEvents:u||f?"none":"auto",children:[m.buttons.increment.paths.map((b,V)=>S("path",{"data-name":b.dataName,d:b.d,fill:Q||b.defaultFill},`inc-path-${V}`)),S("g",{transform:`translate(${m.buttons.increment.iconAnchorX}, ${m.buttons.increment.iconAnchorY}) scale(${se}) translate(-${x/2}, -${x/2})`,style:{pointerEvents:"none"},children:S("svg",{viewBox:`0 0 ${x} ${x}`,width:x,height:x,fill:"white",overflow:"visible",children:Me})})]})]}),S("input",{ref:n,className:`${ke} ${G||""}`,type:"number",name:d,id:h,value:ne,min:e,max:a,step:c,placeholder:v,required:N,disabled:u,readOnly:f,onInput:z,style:Ae,"aria-label":t["aria-label"]||"Warto\u015B\u0107 liczbowa",...R})]})}import{useEffect as Fe,useRef as pe,useState as de}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as me,jsx as k,jsxs as P}from"https://esm.sh/preact@10.26.8/jsx-runtime";function De(t="View",o="Drag",l="Click"){return new Map([["View",t],["Drag",o],["Click",l]])}function he(t){let{titleAvailable:o,titleSelected:l,titleModeButton:r="Mode",titleMode:e=De(),availableValues:a,values:c,defaultValues:v=[],onChange:N=()=>{}}=t,[u,d]=de("View"),[h,f]=de([...v]),y=(()=>{let n=new Map;h.forEach(i=>{n.set(i,(n.get(i)??0)+1)});let s=[];for(let[i,w]of a.entries()){let T=n.get(i)??0,z=w-T;for(let $=0;$<z;$++)s.push(i)}return s})();Fe(()=>{N([...h])},[h]);let E=()=>{d(n=>n==="View"?"Drag":n==="Drag"?"Click":"View")},X=n=>{u==="Click"&&f([...h,n])},J=n=>{u==="Click"&&f(s=>{let i=[...s];return i.splice(n,1),i})},G=n=>{u==="Click"&&(n<=0||f(s=>{let i=[...s];return[i[n-1],i[n]]=[i[n],i[n-1]],i}))},U=n=>{u==="Click"&&(n>=h.length-1||f(s=>{let i=[...s];return[i[n],i[n+1]]=[i[n+1],i[n]],i}))},F=pe(null),_=pe(null),Y=(n,s)=>{if(u!=="Drag"){n.preventDefault();return}_.current=s,n.dataTransfer?.setData("text/plain",s),n.dataTransfer.effectAllowed="copy"},q=n=>{_.current=null},K=(n,s)=>{if(u!=="Drag"){n.preventDefault();return}F.current=s,n.dataTransfer?.setData("text/plain",h[s]),n.dataTransfer.effectAllowed="move"},Q=n=>{F.current=null},I=(n,s=null)=>{if(n.preventDefault(),u==="Drag"){if(_.current!==null){f(i=>{let w=[...i];return s===null||s>=w.length?w.push(_.current):w.splice(s,0,_.current),w}),_.current=null;return}if(F.current!==null){let i=F.current,w=s!==null?s:h.length-1;if(i===w)return;f(T=>{let z=[...T],[$]=z.splice(i,1);return z.splice(w,0,$),z}),F.current=null}}},ee=n=>{u==="Drag"&&n.preventDefault()},te=n=>{if(n.preventDefault(),u==="Drag"){if(F.current!==null){let s=F.current;f(i=>{let w=[...i];return w.splice(s,1),w}),F.current=null}_.current=null}},R=n=>{u==="Drag"&&n.preventDefault()};return P("div",{class:"inputchips-container",style:{maxWidth:"600px"},children:[k("div",{class:"inputchips-mode",children:P("button",{onClick:E,class:"inputchips-mode-button",children:[r,":",k("br",{}),e.get(u)]})}),P("div",{class:"inputchips-container-list",children:[P("div",{class:"inputchips-list",children:[o&&k("div",{class:"inputchips-list-title",children:o}),k("div",{class:"inputchips-list-box",onDrop:te,onDragOver:R,children:y.map((n,s)=>P("span",{draggable:u==="Drag",onDragStart:i=>Y(i,n),onDragEnd:i=>q(i),class:"inputchips-chips inputchips-chips-available",children:[n,u==="Click"&&k("button",{onClick:()=>X(n),class:"inputchips-chips-button inputchips-chips-button-add",children:"+"})]},`rem-${n}-${s}`))})]}),P("div",{class:"inputchips-list",children:[l&&k("div",{class:"inputchips-list-title",children:l}),k("div",{class:"inputchips-list-box",onDrop:n=>I(n),onDragOver:ee,children:h.map((n,s)=>P("span",{draggable:u==="Drag",onDragStart:i=>K(i,s),onDragEnd:i=>Q(i),onDrop:i=>{u==="Drag"&&(i.preventDefault(),I(i,s))},onDragOver:i=>{u==="Drag"&&i.preventDefault()},class:"inputchips-chips inputchips-chips-selected",children:[u==="Click"&&P(me,{children:[s>0&&k("button",{onClick:()=>G(s),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2190"}),s<h.length-1&&k("button",{onClick:()=>U(s),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2192"})]}),n,u==="Click"&&k(me,{children:k("button",{onClick:()=>J(s),class:"inputchips-chips-button inputchips-chips-button-del",children:"x"})})]},`sel-${n}-${s}`))})]})]})]})}function fe(t,o){let l=new Map;return(Array.isArray(t)?t:[t]).forEach(e=>{l.set(e.var,e.val)}),o&&(Array.isArray(o)?o:[o]).forEach(a=>{try{let c=a.val(l);l.set(a.var,c)}catch(c){console.error(`B\u0142\u0105d podczas obliczania zmiennej "${a.var}":`,c instanceof Error?c.message:String(c)),l.set(a.var,void 0)}}),l}function ge(t,o,l){if(l<=0)return[];let r=[];for(let e=0;e<l;e++)r.push(t+e*o);return r}function be(t,o,l){let r=[];if(o===0)return t===l&&r.push(t),r;if(o>0){if(t>l)return r;for(let e=t;e<=l;e+=o)r.push(e)}else{if(t<l)return r;for(let e=t;e>=l;e+=o)r.push(e)}return r}import{jsx as D,jsxs as O}from"https://esm.sh/preact@10.26.8/jsx-runtime";var H=t=>{if(t==null)return"";if(typeof t=="number")return String(t);if(Array.isArray(t))try{return JSON.stringify(t)}catch{return"[B\u0142\u0105d serializacji tablicy]"}return String(t)};function ve({data:t,sort:o,type:l,caption:r,tableClassName:e,thClassName:a,tdClassName:c}){if(!t||t.size===0)return D("p",{children:"Brak danych do wy\u015Bwietlenia."});let v=o??Array.from(t.keys()),N=0,u=!1;for(let d of v){let h=t.get(d);u=!0,Array.isArray(h)&&(N=Math.max(N,h.length))}return u&&N===0&&(N=1),N===0&&v.length>0&&(N=1),l==="col"?O("table",{className:"plot-col-data1 "+(e??""),children:[r&&D("caption",{children:r}),D("thead",{children:D("tr",{children:v.map(d=>O("th",{className:`table-val-type--${d} `+(a??""),children:["\u3010",d,"\u3011"]},d))})}),D("tbody",{children:Array.from({length:N}).map((d,h)=>D("tr",{children:v.map(f=>{let A=t.get(f),y="";return Array.isArray(A)?y=H(A[h]):h===0&&(y=H(A)),D("td",{className:`table-val-type--${f} `+(c??""),children:y},`${f}-row-${h}`)})},`row-${h}`))})]}):l==="row"?O("table",{className:"plot-row-data1 "+(e??""),children:[r&&D("caption",{children:r}),D("tbody",{children:v.map(d=>{let h=t.get(d);return O("tr",{className:`table-val-type--${d}`,children:[O("th",{scope:"row",className:a,children:["\u3010",d,"\u3011"]})," ",Array.from({length:N}).map((f,A)=>{let y="";return Array.isArray(h)?y=H(h[A]):A===0&&(y=H(h)),D("td",{className:c,children:y},`${d}-col-${A}`)})]},`series-row-${d}`)})})]}):O("p",{children:["Nieprawid\u0142owy typ tabeli: ",l]})}function oe(t){return Math.floor(Math.log2(t))}function M(t,o,l,r,e){let a=e?e(r):r;return t*2**(a+o)+l}function C(t){if(t<=0||!Number.isInteger(t))throw new Error("Argument musi by\u0107 dodatni\u0105 liczb\u0105 ca\u0142kowit\u0105.");return Math.log2(t&-t)}function _e(t){return typeof t!="number"||isNaN(t)||!Number.isInteger(t)||t<=0}function Pe(t){return typeof t!="number"||isNaN(t)||!Number.isInteger(t)||t<0}function g(t,o,l){if(!Array.isArray(o))throw new Error(`Zmienne ${t}  musz\u0105 by\u0107 tablicami.`);switch(l){case"isNotValNaturalPos":if(o.some(_e))throw new Error(`Wszystkie elementy w tablicy ${t} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi (wi\u0119kszymi od 0).`);break;case"isNotValNaturalPosWithZero":if(o.some(Pe))throw new Error(`Wszystkie elementy w tablicy ${t} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi z zero (wi\u0119kszymi od -1).`);break}}function W(t){return fe([{var:"i",val:t}],[{var:"h",val:r=>{let e=r.get("i");return g("i",e,"isNotValNaturalPos"),e.map((a,c)=>oe(a))}},{var:"hA",val:r=>{let e=r.get("h");return g("h",e,"isNotValNaturalPosWithZero"),e.map((a,c)=>M(1,0,0,a))}},{var:"hZ",val:r=>{let e=r.get("h");return g("h",e,"isNotValNaturalPosWithZero"),e.map((a,c)=>M(1,1,-1,a))}},{var:"hAZ",val:r=>{let e=r.get("h");return g("h",e,"isNotValNaturalPosWithZero"),e.map((a,c)=>M(1.5,1,-1,a))}},{var:"hi",val:r=>{let e=r.get("i");g("i",e,"isNotValNaturalPos");let a=r.get("hA");return g("hA",a,"isNotValNaturalPos"),e.map((c,v)=>c-a[v])}},{var:"hj",val:r=>{let e=r.get("i");g("i",e,"isNotValNaturalPos");let a=r.get("hZ");return g("hZ",a,"isNotValNaturalPos"),e.map((c,v)=>a[v]-c)}},{var:"j",val:r=>{let e=r.get("i");return g("i",e,"isNotValNaturalPos"),e.map((a,c)=>M(1.5,1,-1,oe(a))-a)}},{var:"ki",val:r=>{let e=r.get("i");return g("i",e,"isNotValNaturalPos"),e.map((a,c)=>C(a))}},{var:"kj",val:r=>{let e=r.get("j");return g("j",e,"isNotValNaturalPos"),e.map((a,c)=>C(a))}},{var:"kiA",val:r=>{let e=r.get("i");return g("i",e,"isNotValNaturalPos"),e.map((a,c)=>M(1,0,0,a,C))}},{var:"kjA",val:r=>{let e=r.get("j");return g("j",e,"isNotValNaturalPos"),e.map((a,c)=>M(1,0,0,a,C))}},{var:"kiZ",val:r=>{let e=r.get("i");return g("i",e,"isNotValNaturalPos"),e.map((a,c)=>M(1,1,-1,a,C))}},{var:"kjZ",val:r=>{let e=r.get("j");return g("j",e,"isNotValNaturalPos"),e.map((a,c)=>M(1,1,-1,a,C))}},{var:"li",val:r=>{let e=r.get("i");return g("i",e,"isNotValNaturalPos"),e.map((a,c)=>a/M(1,0,0,a,C))}},{var:"lj",val:r=>{let e=r.get("j");return g("j",e,"isNotValNaturalPos"),e.map((a,c)=>a/M(1,0,0,a,C))}},{var:"mi",val:r=>{let e=r.get("i");return g("i",e,"isNotValNaturalPos"),e.map((a,c)=>a/M(1,0,0,a,C)+1)}},{var:"wj",val:r=>{let e=r.get("j");return g("j",e,"isNotValNaturalPos"),e.map((a,c)=>a/M(1,0,0,a,C)+2)}}])}import{Fragment as je,jsx as p,jsxs as j}from"https://esm.sh/preact@10.26.8/jsx-runtime";function ye(){let t=Z(1),o=Z(10),l=Z(new Map),r=W(ge(1,1,15));console.log(r);let e=Z(!0),a=Z([]),c=()=>{if(isNaN(Number(t.value))||isNaN(Number(o.value))){console.error("Warto\u015Bci 'from' lub 'to' nie s\u0105 liczbami."),l.value=new Map;return}l.value=W(be(Number(t.value),1,Number(o.value)))},v=()=>{e.value=!e.value},N=d=>{d!==void 0?t.value=d:t.value=0},u=d=>{d!==void 0?o.value=d:o.value=0};return j("main",{children:[p("h1",{children:"Matematyka w genealogii."}),j("div",{style:{display:"flex",alignItems:"stretch",gap:"40px",marginBottom:"20px",flexFlow:"row nowrap"},children:[p("button",{onClick:c,style:{padding:"0.5rem 1rem",fontSize:"1rem"},children:"Policz"}),j("fieldset",{class:"fieldset-inputs-number",style:{border:"3px solid #6c757d",borderRadius:"8px",padding:"20px",marginTop:"0",marginBottom:"0",display:"flex",alignItems:"flex-start",gap:"40px"},children:[p("legend",{style:{backgroundColor:"#000",color:"#fff",padding:"3px 6px"},children:"Choose range of \u3010i\u3011"}),p(le,{name:"input1",value:t.value,onValueChange:N,def:1,min:1,step:1,placeholder:"Od","aria-label":"Warto\u015B\u0107 pocz\u0105tkowa przedzia\u0142u"}),p(le,{name:"input2",value:o.value,onValueChange:u,def:7,min:t.value>=1?t.value:1,step:1,placeholder:"Do","aria-label":"Warto\u015B\u0107 ko\u0144cowa przedzia\u0142u"})]}),p("p",{children:j("ul",{children:[p("li",{children:"\u3010i\u3011"}),p("li",{children:"\u3010h\u3011 = floor(log\u2082(i)) ||| dla przedzia\u0142u [i]"}),p("li",{children:"\u3010hA\u3011 = 2**h ||| dla przedzia\u0142u [h]"}),p("li",{children:"\u3010hZ\u3011 = 2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),p("li",{children:"\u3010hAZ\u3011 =3*2**h-1 = 1.5*2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),p("li",{children:"\u3010hi\u3011 =\u3010i\u3011 -\u3010hA\u3011"}),p("li",{children:"\u3010hj\u3011 =\u3010hZ\u3011 -\u3010i\u3011"}),p("li",{children:"\u3010j\u3011 =\u3010hAZ\u3011 -\u3010i\u3011"})]})}),p("p",{children:j("ul",{children:[p("li",{children:"\u3010ki\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [i]"}),p("li",{children:"\u3010kj\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [j]"}),p("li",{children:"\u3010kiA\u3011 = 2**\u3010ki\u3011"}),p("li",{children:"\u3010kjA\u3011 = 2**\u3010kj\u3011"}),p("li",{children:"\u3010li\u3011 =\u3010i\u3011/\u3010kiA\u3011"}),p("li",{children:"\u3010lj\u3011 =\u3010j\u3011/\u3010kjA\u3011"}),p("li",{children:"\u3010m\u3011 =\u3010li\u3011+1"}),p("li",{children:"\u3010w\u3011 =\u3010lj\u3011+2"})]})})]}),j("div",{children:[p("input",{type:"checkbox",id:"PlotPosition",name:"PlotPosition",checked:e.value,onClick:v}),p("label",{for:"PlotPosition",children:e.value?"Row":"Col"})]}),p("br",{}),p(he,{availableValues:new Map([["\u{1F34E} Jab\u0142ko",2],["\u{1F34C} Banan",3],["\u{1F353} Truskawka",1],["\u{1F95D} Kiwi",2]]),defaultValues:["\u{1F34C} Banan","\u{1F34E} Jab\u0142ko"],values:a.value,titleAvailable:"Dost\u0119pne:",titleSelected:"Wybrane:",onChange:d=>{a.value=d,console.log(a.value)}}),p("br",{}),l.value.size>0&&j(je,{children:[p("h3",{children:"Rezultat oblicze\u0144:"}),p(ve,{data:l.value,type:e.value?"row":"col",sort:["ki","mi","li","i","hi","kiA","kiZ","h","hA","hZ","hAZ","kjZ","kjA","hj","j","lj","wj","kj"],caption:"Wyniki oblicze\u0144."})]})]})}import{jsx as Be}from"https://esm.sh/preact@10.26.8/jsx-runtime";$e(Be(ye,{}),document.getElementById("root"));
//# sourceMappingURL=data:application/json;base64,
