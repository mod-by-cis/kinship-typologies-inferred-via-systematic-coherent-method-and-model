import{render as Ve}from"https://esm.sh/preact@10.26.8";import{useSignal as j}from"https://esm.sh/@preact/signals@2.2.0";import{useCallback as z,useEffect as be,useRef as ge}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as we,jsx as h,jsxs as V}from"https://esm.sh/preact@10.26.8/jsx-runtime";var ye=h("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"}),Ne=V(we,{children:[h("rect",{x:"11",y:"5",width:"2",height:"14",rx:"1"}),h("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"})]}),o={baseViewBoxWidth:174,baseViewBoxHeight:72,buttons:{choose:{name:"btn-choose",paths:[{dataName:"btn-fill",d:"M115.75,71.62c-10.03,0-19.93-1.62-28.63-4.67l-.12-.04-.12.04c-8.7,3.06-18.59,4.67-28.63,4.67-13.06,0-25.81-2.75-36.02-7.75l26.96-15.21h75.61l26.96,15.21c-10.2,5-22.96,7.75-36.02,7.75Z",defaultFill:"#919191"},{dataName:"btn-border-fill",d:"M124.71,49.04l26.25,14.81c-10.04,4.78-22.48,7.4-35.21,7.4-9.99,0-19.84-1.61-28.5-4.65l-.25-.09-.25.09c-8.66,3.04-18.51,4.65-28.5,4.65-12.73,0-25.16-2.62-35.21-7.4l26.25-14.81h75.41M124.9,48.29H49.1l-27.66,15.6c10.03,5.06,22.85,8.11,36.82,8.11,10.46,0,20.27-1.71,28.75-4.69,8.48,2.98,18.29,4.69,28.75,4.69,13.97,0,26.78-3.04,36.82-8.11l-27.66-15.6h0Z",defaultFill:"#505050"}]},increment:{name:"btn-increment",paths:[{dataName:"btn-fill",d:"M127.38,43.51V1.1c26.83,3.37,46.25,18.01,46.25,34.9,0,9.19-5.68,17.91-16.01,24.57l-30.24-17.06Z",defaultFill:"#21597f"},{dataName:"btn-border-fill",d:"M127.75,1.53c26.42,3.45,45.5,17.86,45.5,34.47,0,9-5.55,17.56-15.65,24.13l-29.85-16.84V1.53M127,.68v43.05l30.63,17.28c10.13-6.48,16.37-15.29,16.37-25.01,0-17.5-20.21-32.08-47-35.32h0Z",defaultFill:"#104060"}],iconAnchorX:150,iconAnchorY:30},decrement:{name:"btn-decrement",paths:[{dataName:"btn-fill",d:"M16.38,60.57C6.06,53.91.38,45.19.38,36,.38,19.11,19.8,4.47,46.62,1.1v42.41l-30.24,17.06Z",defaultFill:"#b21010"},{dataName:"btn-border-fill",d:"M46.25,1.53v41.76h0s-29.85,16.84-29.85,16.84C6.3,53.56.75,45,.75,36,.75,19.39,19.83,4.97,46.25,1.53M47,.68C20.21,3.92,0,18.5,0,36c0,9.72,6.24,18.53,16.37,25.01l30.63-17.28V.68h0Z",defaultFill:"#800000"}],iconAnchorX:25,iconAnchorY:30}},inputArea:{name:"input",rect:{x:52.38,y:.38,width:69.25,height:42.54,defaultFill:"#fff"},borderPath:{d:"M121.25.75v41.79H52.75V.75h68.5M122,0H52v43.29h70V0h0Z",defaultFill:"#333"}}},Ae="inputnumber-container",ve="inputnumber-svg",O="inputnumber-svg-button",xe="inputnumber-html-input";function T(t){let{value:i,defaultValue:n,def:r=1,min:e,max:a,step:l=1,placeholder:f,required:x,disabled:u=!1,name:d,id:b,readOnly:p=!1,onChange:g,onValueChange:y,ratioSIZE:M=1,wrapperClassName:Y,svgClassName:q,inputClassName:K,style:Q,selectButtonStyle:ee,incrementButtonStyle:te,decrementButtonStyle:re,inputAreaStyle:ae,selectButtonFill:ne,incrementButtonFill:ie,decrementButtonFill:le,inputAreaRectFill:oe,inputAreaBorderFill:se,...R}=t,N=ge(null);be(()=>{N.current&&(i!==void 0?N.current.value=String(i):n!==void 0?N.current.value=String(n):N.current.value="")},[i,n]);let k=z(m=>{if(N.current&&!u&&!p){m==="up"?N.current.stepUp():N.current.stepDown();let w=new Event("input",{bubbles:!0,cancelable:!0});N.current.dispatchEvent(w)}},[u,p]),ue=z(()=>k("down"),[k]),ce=z(()=>k("up"),[k]),me=z(()=>{if(N.current&&!u&&!p){let m=r??1;if(N.current.value=String(m),y&&y(m,d),g){let w=new Event("change",{bubbles:!0});Object.defineProperty(w,"target",{writable:!1,value:N.current}),Object.defineProperty(w,"currentTarget",{writable:!1,value:N.current}),g(w)}console.log("Choose button clicked, value set to 1")}},[u,p,d,y,g]),de=m=>{let H=m.currentTarget.value,Z;if(H==="")Z=void 0;else{let X=parseFloat(H);Z=isNaN(X)?void 0:X}y&&y(Z,d),g&&g(m)},pe=o.baseViewBoxWidth*M,he=o.baseViewBoxHeight*M,fe={position:"absolute",left:`${o.inputArea.rect.x*M}px`,top:`${o.inputArea.rect.y*M}px`,width:`${o.inputArea.rect.width*M}px`,height:`${o.inputArea.rect.height*M}px`,border:"none",backgroundColor:"transparent",color:"#333",textAlign:"center",fontSize:`${Math.max(8,18*M)}px`,outline:"none",padding:`0 ${Math.max(1,2*M)}px`,margin:0,boxSizing:"border-box",MozAppearance:"textfield",WebkitAppearance:"none",appearance:"none",zIndex:2},A=24,L=1.5*(o.baseViewBoxHeight*.25*(M>.5?1:M*2)/A),$="";i!==void 0?$=String(i):n!==void 0&&($=String(n));let B={cursor:u||p?"default":"pointer"};return V("div",{className:`${Ae} ${Y||""}`,style:{width:`${pe}px`,height:`${he}px`,position:"relative",overflow:"hidden",...Q},...R,children:[V("svg",{className:`${ve} ${q||""}`,"data-name":"input-number",xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${o.baseViewBoxWidth} ${o.baseViewBoxHeight}`,style:{display:"block",width:"100%",height:"100%",position:"absolute",top:0,left:0},"aria-hidden":"true",children:[h("g",{className:O,"data-name":o.buttons.choose.name,onClick:u?void 0:me,style:{...B,...ee||{}},pointerEvents:u?"none":"auto",children:o.buttons.choose.paths.map((m,w)=>h("path",{"data-name":m.dataName,d:m.d,fill:ne||m.defaultFill},`choose-path-${w}`))}),V("g",{"data-name":o.inputArea.name,style:ae||{},children:[h("rect",{x:o.inputArea.rect.x,y:o.inputArea.rect.y,width:o.inputArea.rect.width,height:o.inputArea.rect.height,fill:oe||o.inputArea.rect.defaultFill}),h("path",{d:o.inputArea.borderPath.d,fill:se||o.inputArea.borderPath.defaultFill})]}),V("g",{className:O,"data-name":o.buttons.decrement.name,onClick:!u&&!p?ue:void 0,style:{...B,...re||{}},pointerEvents:u||p?"none":"auto",children:[o.buttons.decrement.paths.map((m,w)=>h("path",{"data-name":m.dataName,d:m.d,fill:le||m.defaultFill},`dec-path-${w}`)),h("g",{transform:`translate(${o.buttons.decrement.iconAnchorX}, ${o.buttons.decrement.iconAnchorY}) scale(${L}) translate(-${A/2}, -${A/2})`,style:{pointerEvents:"none"},children:h("svg",{viewBox:`0 0 ${A} ${A}`,width:A,height:A,fill:"white",overflow:"visible",children:ye})})]}),V("g",{className:O,"data-name":o.buttons.increment.name,onClick:!u&&!p?ce:void 0,style:{...B,...te||{}},pointerEvents:u||p?"none":"auto",children:[o.buttons.increment.paths.map((m,w)=>h("path",{"data-name":m.dataName,d:m.d,fill:ie||m.defaultFill},`inc-path-${w}`)),h("g",{transform:`translate(${o.buttons.increment.iconAnchorX}, ${o.buttons.increment.iconAnchorY}) scale(${L}) translate(-${A/2}, -${A/2})`,style:{pointerEvents:"none"},children:h("svg",{viewBox:`0 0 ${A} ${A}`,width:A,height:A,fill:"white",overflow:"visible",children:Ne})})]})]}),h("input",{ref:N,className:`${xe} ${K||""}`,type:"number",name:d,id:b,value:$,min:e,max:a,step:l,placeholder:f,required:x,disabled:u,readOnly:p,onInput:de,style:fe,"aria-label":t["aria-label"]||"Warto\u015B\u0107 liczbowa",...R})]})}function W(t,i){let n=new Map;return(Array.isArray(t)?t:[t]).forEach(e=>{n.set(e.var,e.val)}),i&&(Array.isArray(i)?i:[i]).forEach(a=>{try{let l=a.val(n);n.set(a.var,l)}catch(l){console.error(`B\u0142\u0105d podczas obliczania zmiennej "${a.var}":`,l instanceof Error?l.message:String(l)),n.set(a.var,void 0)}}),n}function J(t,i,n){if(n<=0)return[];let r=[];for(let e=0;e<n;e++)r.push(t+e*i);return r}function D(t,i,n){let r=[];if(i===0)return t===n&&r.push(t),r;if(i>0){if(t>n)return r;for(let e=t;e<=n;e+=i)r.push(e)}else{if(t<n)return r;for(let e=t;e>=n;e+=i)r.push(e)}return r}import{jsx as F,jsxs as _}from"https://esm.sh/preact@10.26.8/jsx-runtime";var P=t=>{if(t==null)return"";if(typeof t=="number")return String(t);if(Array.isArray(t))try{return JSON.stringify(t)}catch{return"[B\u0142\u0105d serializacji tablicy]"}return String(t)};function G({data:t,sort:i,type:n,caption:r,tableClassName:e,thClassName:a,tdClassName:l}){if(!t||t.size===0)return F("p",{children:"Brak danych do wy\u015Bwietlenia."});let f=i??Array.from(t.keys()),x=0,u=!1;for(let d of f){let b=t.get(d);u=!0,Array.isArray(b)&&(x=Math.max(x,b.length))}return u&&x===0&&(x=1),x===0&&f.length>0&&(x=1),n==="col"?_("table",{className:"plot-col-data1 "+(e??""),children:[r&&F("caption",{children:r}),F("thead",{children:F("tr",{children:f.map(d=>_("th",{className:`table-val-type--${d} `+(a??""),children:["\u3010",d,"\u3011"]},d))})}),F("tbody",{children:Array.from({length:x}).map((d,b)=>F("tr",{children:f.map(p=>{let g=t.get(p),y="";return Array.isArray(g)?y=P(g[b]):b===0&&(y=P(g)),F("td",{className:`table-val-type--${p} `+(l??""),children:y},`${p}-row-${b}`)})},`row-${b}`))})]}):n==="row"?_("table",{className:"plot-row-data1 "+(e??""),children:[r&&F("caption",{children:r}),F("tbody",{children:f.map(d=>{let b=t.get(d);return _("tr",{className:`table-val-type--${d}`,children:[_("th",{scope:"row",className:a,children:["\u3010",d,"\u3011"]})," ",Array.from({length:x}).map((p,g)=>{let y="";return Array.isArray(b)?y=P(b[g]):g===0&&(y=P(b)),F("td",{className:l,children:y},`${d}-col-${g}`)})]},`series-row-${d}`)})})]}):_("p",{children:["Nieprawid\u0142owy typ tabeli: ",n]})}function I(t){return Math.floor(Math.log2(t))}function v(t,i,n,r,e){let a=e?e(r):r;return t*2**(a+i)+n}function S(t){if(t<=0||!Number.isInteger(t))throw new Error("Argument musi by\u0107 dodatni\u0105 liczb\u0105 ca\u0142kowit\u0105.");return Math.log2(t&-t)}function Se(t){return typeof t!="number"||isNaN(t)||!Number.isInteger(t)||t<=0}function Me(t){return typeof t!="number"||isNaN(t)||!Number.isInteger(t)||t<0}function c(t,i,n){if(!Array.isArray(i))throw new Error(`Zmienne ${t}  musz\u0105 by\u0107 tablicami.`);switch(n){case"isNotValNaturalPos":if(i.some(Se))throw new Error(`Wszystkie elementy w tablicy ${t} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi (wi\u0119kszymi od 0).`);break;case"isNotValNaturalPosWithZero":if(i.some(Me))throw new Error(`Wszystkie elementy w tablicy ${t} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi z zero (wi\u0119kszymi od -1).`);break}}function C(t){return W([{var:"i",val:t}],[{var:"h",val:r=>{let e=r.get("i");return c("i",e,"isNotValNaturalPos"),e.map((a,l)=>I(a))}},{var:"hA",val:r=>{let e=r.get("h");return c("h",e,"isNotValNaturalPosWithZero"),e.map((a,l)=>v(1,0,0,a))}},{var:"hZ",val:r=>{let e=r.get("h");return c("h",e,"isNotValNaturalPosWithZero"),e.map((a,l)=>v(1,1,-1,a))}},{var:"hAZ",val:r=>{let e=r.get("h");return c("h",e,"isNotValNaturalPosWithZero"),e.map((a,l)=>v(1.5,1,-1,a))}},{var:"hi",val:r=>{let e=r.get("i");c("i",e,"isNotValNaturalPos");let a=r.get("hA");return c("hA",a,"isNotValNaturalPos"),e.map((l,f)=>l-a[f])}},{var:"hj",val:r=>{let e=r.get("i");c("i",e,"isNotValNaturalPos");let a=r.get("hZ");return c("hZ",a,"isNotValNaturalPos"),e.map((l,f)=>a[f]-l)}},{var:"j",val:r=>{let e=r.get("i");return c("i",e,"isNotValNaturalPos"),e.map((a,l)=>v(1.5,1,-1,I(a))-a)}},{var:"ki",val:r=>{let e=r.get("i");return c("i",e,"isNotValNaturalPos"),e.map((a,l)=>S(a))}},{var:"kj",val:r=>{let e=r.get("j");return c("j",e,"isNotValNaturalPos"),e.map((a,l)=>S(a))}},{var:"kiA",val:r=>{let e=r.get("i");return c("i",e,"isNotValNaturalPos"),e.map((a,l)=>v(1,0,0,a,S))}},{var:"kjA",val:r=>{let e=r.get("j");return c("j",e,"isNotValNaturalPos"),e.map((a,l)=>v(1,0,0,a,S))}},{var:"kiZ",val:r=>{let e=r.get("i");return c("i",e,"isNotValNaturalPos"),e.map((a,l)=>v(1,1,-1,a,S))}},{var:"kjZ",val:r=>{let e=r.get("j");return c("j",e,"isNotValNaturalPos"),e.map((a,l)=>v(1,1,-1,a,S))}},{var:"li",val:r=>{let e=r.get("i");return c("i",e,"isNotValNaturalPos"),e.map((a,l)=>a/v(1,0,0,a,S))}},{var:"lj",val:r=>{let e=r.get("j");return c("j",e,"isNotValNaturalPos"),e.map((a,l)=>a/v(1,0,0,a,S))}},{var:"mi",val:r=>{let e=r.get("i");return c("i",e,"isNotValNaturalPos"),e.map((a,l)=>a/v(1,0,0,a,S)+1)}},{var:"wj",val:r=>{let e=r.get("j");return c("j",e,"isNotValNaturalPos"),e.map((a,l)=>a/v(1,0,0,a,S)+2)}}])}import{Fragment as Ee,jsx as s,jsxs as E}from"https://esm.sh/preact@10.26.8/jsx-runtime";function U(){let t=j(1),i=j(10),n=j(new Map),r=C(J(1,1,15));console.log(r);let e=j(!0),a=()=>{if(isNaN(Number(t.value))||isNaN(Number(i.value))){console.error("Warto\u015Bci 'from' lub 'to' nie s\u0105 liczbami."),n.value=new Map;return}n.value=C(D(Number(t.value),1,Number(i.value)))},l=()=>{e.value=!e.value},f=u=>{u!==void 0?t.value=u:t.value=0},x=u=>{u!==void 0?i.value=u:i.value=0};return E("main",{children:[s("h1",{children:"Matematyka w genealogii."}),E("div",{style:{display:"flex",alignItems:"stretch",gap:"40px",marginBottom:"20px",flexFlow:"row nowrap"},children:[s("button",{onClick:a,style:{padding:"0.5rem 1rem",fontSize:"1rem"},children:"Policz"}),E("fieldset",{class:"fieldset-inputs-number",style:{border:"3px solid #6c757d",borderRadius:"8px",padding:"20px",marginTop:"0",marginBottom:"0",display:"flex",alignItems:"flex-start",gap:"40px"},children:[s("legend",{style:{backgroundColor:"#000",color:"#fff",padding:"3px 6px"},children:"Choose range of \u3010i\u3011"}),s(T,{name:"input1",value:t.value,onValueChange:f,def:1,min:1,step:1,placeholder:"Od","aria-label":"Warto\u015B\u0107 pocz\u0105tkowa przedzia\u0142u"}),s(T,{name:"input2",value:i.value,onValueChange:x,def:7,min:t.value>=1?t.value:1,step:1,placeholder:"Do","aria-label":"Warto\u015B\u0107 ko\u0144cowa przedzia\u0142u"})]}),s("p",{children:E("ul",{children:[s("li",{children:"\u3010i\u3011"}),s("li",{children:"\u3010h\u3011 = floor(log\u2082(i)) ||| dla przedzia\u0142u [i]"}),s("li",{children:"\u3010hA\u3011 = 2**h ||| dla przedzia\u0142u [h]"}),s("li",{children:"\u3010hZ\u3011 = 2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),s("li",{children:"\u3010hAZ\u3011 =3*2**h-1 = 1.5*2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),s("li",{children:"\u3010hi\u3011 =\u3010i\u3011 -\u3010hA\u3011"}),s("li",{children:"\u3010hj\u3011 =\u3010hZ\u3011 -\u3010i\u3011"}),s("li",{children:"\u3010j\u3011 =\u3010hAZ\u3011 -\u3010i\u3011"})]})}),s("p",{children:E("ul",{children:[s("li",{children:"\u3010ki\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [i]"}),s("li",{children:"\u3010kj\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [j]"}),s("li",{children:"\u3010kiA\u3011 = 2**\u3010ki\u3011"}),s("li",{children:"\u3010kjA\u3011 = 2**\u3010kj\u3011"}),s("li",{children:"\u3010li\u3011 =\u3010i\u3011/\u3010kiA\u3011"}),s("li",{children:"\u3010lj\u3011 =\u3010j\u3011/\u3010kjA\u3011"}),s("li",{children:"\u3010m\u3011 =\u3010li\u3011+1"}),s("li",{children:"\u3010w\u3011 =\u3010lj\u3011+2"})]})})]}),E("div",{children:[s("input",{type:"checkbox",id:"PlotPosition",name:"PlotPosition",checked:e.value,onClick:l}),s("label",{for:"PlotPosition",children:e.value?"Row":"Col"})]}),n.value.size>0&&E(Ee,{children:[s("h3",{children:"Rezultat oblicze\u0144:"}),s(G,{data:n.value,type:e.value?"row":"col",sort:["ki","mi","li","i","hi","kiA","kiZ","h","hA","hZ","hAZ","kjZ","kjA","hj","j","lj","wj","kj"],caption:"Wyniki oblicze\u0144."})]})]})}import{jsx as _e}from"https://esm.sh/preact@10.26.8/jsx-runtime";Ve(_e(U,{}),document.getElementById("root"));
//# sourceMappingURL=data:application/json;base64,
