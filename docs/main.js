import{render as Te}from"https://esm.sh/preact@10.26.8";import{useSignal as R}from"https://esm.sh/@preact/signals@2.2.0";import{useCallback as B,useEffect as we,useRef as Se}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as Ve,jsx as A,jsxs as O}from"https://esm.sh/preact@10.26.8/jsx-runtime";var xe=A("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"}),Me=O(Ve,{children:[A("rect",{x:"11",y:"5",width:"2",height:"14",rx:"1"}),A("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"})]}),h={baseViewBoxWidth:174,baseViewBoxHeight:72,buttons:{choose:{name:"btn-choose",paths:[{dataName:"btn-fill",d:"M115.75,71.62c-10.03,0-19.93-1.62-28.63-4.67l-.12-.04-.12.04c-8.7,3.06-18.59,4.67-28.63,4.67-13.06,0-25.81-2.75-36.02-7.75l26.96-15.21h75.61l26.96,15.21c-10.2,5-22.96,7.75-36.02,7.75Z",defaultFill:"#919191"},{dataName:"btn-border-fill",d:"M124.71,49.04l26.25,14.81c-10.04,4.78-22.48,7.4-35.21,7.4-9.99,0-19.84-1.61-28.5-4.65l-.25-.09-.25.09c-8.66,3.04-18.51,4.65-28.5,4.65-12.73,0-25.16-2.62-35.21-7.4l26.25-14.81h75.41M124.9,48.29H49.1l-27.66,15.6c10.03,5.06,22.85,8.11,36.82,8.11,10.46,0,20.27-1.71,28.75-4.69,8.48,2.98,18.29,4.69,28.75,4.69,13.97,0,26.78-3.04,36.82-8.11l-27.66-15.6h0Z",defaultFill:"#505050"}]},increment:{name:"btn-increment",paths:[{dataName:"btn-fill",d:"M127.38,43.51V1.1c26.83,3.37,46.25,18.01,46.25,34.9,0,9.19-5.68,17.91-16.01,24.57l-30.24-17.06Z",defaultFill:"#21597f"},{dataName:"btn-border-fill",d:"M127.75,1.53c26.42,3.45,45.5,17.86,45.5,34.47,0,9-5.55,17.56-15.65,24.13l-29.85-16.84V1.53M127,.68v43.05l30.63,17.28c10.13-6.48,16.37-15.29,16.37-25.01,0-17.5-20.21-32.08-47-35.32h0Z",defaultFill:"#104060"}],iconAnchorX:150,iconAnchorY:30},decrement:{name:"btn-decrement",paths:[{dataName:"btn-fill",d:"M16.38,60.57C6.06,53.91.38,45.19.38,36,.38,19.11,19.8,4.47,46.62,1.1v42.41l-30.24,17.06Z",defaultFill:"#b21010"},{dataName:"btn-border-fill",d:"M46.25,1.53v41.76h0s-29.85,16.84-29.85,16.84C6.3,53.56.75,45,.75,36,.75,19.39,19.83,4.97,46.25,1.53M47,.68C20.21,3.92,0,18.5,0,36c0,9.72,6.24,18.53,16.37,25.01l30.63-17.28V.68h0Z",defaultFill:"#800000"}],iconAnchorX:25,iconAnchorY:30}},inputArea:{name:"input",rect:{x:52.38,y:.38,width:69.25,height:42.54,defaultFill:"#fff"},borderPath:{d:"M121.25.75v41.79H52.75V.75h68.5M122,0H52v43.29h70V0h0Z",defaultFill:"#333"}}},Ee="inputnumber-container",Ce="inputnumber-svg",ne="inputnumber-svg-button",ke="inputnumber-html-input";function ae(a){let{value:o,defaultValue:c,def:t=1,min:e,max:n,step:p=1,placeholder:m,required:y,disabled:r=!1,name:s,id:b,readOnly:g=!1,onChange:w,onValueChange:M,ratioSIZE:E=1,wrapperClassName:L,svgClassName:W,inputClassName:H,style:F,selectButtonStyle:_,incrementButtonStyle:X,decrementButtonStyle:J,inputAreaStyle:G,selectButtonFill:U,incrementButtonFill:Z,decrementButtonFill:Y,inputAreaRectFill:q,inputAreaBorderFill:K,...i}=a,l=Se(null);we(()=>{l.current&&(o!==void 0?l.current.value=String(o):c!==void 0?l.current.value=String(c):l.current.value="")},[o,c]);let u=B(v=>{if(l.current&&!r&&!g){v==="up"?l.current.stepUp():l.current.stepDown();let C=new Event("input",{bubbles:!0,cancelable:!0});l.current.dispatchEvent(C)}},[r,g]),N=B(()=>u("down"),[u]),T=B(()=>u("up"),[u]),P=B(()=>{if(l.current&&!r&&!g){let v=t??1;if(l.current.value=String(v),M&&M(v,s),w){let C=new Event("change",{bubbles:!0});Object.defineProperty(C,"target",{writable:!1,value:l.current}),Object.defineProperty(C,"currentTarget",{writable:!1,value:l.current}),w(C)}console.log("Choose button clicked, value set to 1")}},[r,g,s,M,w]),$=v=>{let oe=v.currentTarget.value,te;if(oe==="")te=void 0;else{let se=parseFloat(oe);te=isNaN(se)?void 0:se}M&&M(te,s),w&&w(v)},ye=h.baseViewBoxWidth*E,Ne=h.baseViewBoxHeight*E,Ae={position:"absolute",left:`${h.inputArea.rect.x*E}px`,top:`${h.inputArea.rect.y*E}px`,width:`${h.inputArea.rect.width*E}px`,height:`${h.inputArea.rect.height*E}px`,border:"none",backgroundColor:"transparent",color:"#333",textAlign:"center",fontSize:`${Math.max(8,18*E)}px`,outline:"none",padding:`0 ${Math.max(1,2*E)}px`,margin:0,boxSizing:"border-box",MozAppearance:"textfield",WebkitAppearance:"none",appearance:"none",zIndex:2},S=24,le=1.5*(h.baseViewBoxHeight*.25*(E>.5?1:E*2)/S),Q="";o!==void 0?Q=String(o):c!==void 0&&(Q=String(c));let ee={cursor:r||g?"default":"pointer"};return O("div",{className:`${Ee} ${L||""}`,style:{width:`${ye}px`,height:`${Ne}px`,position:"relative",overflow:"hidden",...F},...i,children:[O("svg",{className:`${Ce} ${W||""}`,"data-name":"input-number",xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${h.baseViewBoxWidth} ${h.baseViewBoxHeight}`,style:{display:"block",width:"100%",height:"100%",position:"absolute",top:0,left:0},"aria-hidden":"true",children:[A("g",{className:ne,"data-name":h.buttons.choose.name,onClick:r?void 0:P,style:{...ee,..._||{}},pointerEvents:r?"none":"auto",children:h.buttons.choose.paths.map((v,C)=>A("path",{"data-name":v.dataName,d:v.d,fill:U||v.defaultFill},`choose-path-${C}`))}),O("g",{"data-name":h.inputArea.name,style:G||{},children:[A("rect",{x:h.inputArea.rect.x,y:h.inputArea.rect.y,width:h.inputArea.rect.width,height:h.inputArea.rect.height,fill:q||h.inputArea.rect.defaultFill}),A("path",{d:h.inputArea.borderPath.d,fill:K||h.inputArea.borderPath.defaultFill})]}),O("g",{className:ne,"data-name":h.buttons.decrement.name,onClick:!r&&!g?N:void 0,style:{...ee,...J||{}},pointerEvents:r||g?"none":"auto",children:[h.buttons.decrement.paths.map((v,C)=>A("path",{"data-name":v.dataName,d:v.d,fill:Y||v.defaultFill},`dec-path-${C}`)),A("g",{transform:`translate(${h.buttons.decrement.iconAnchorX}, ${h.buttons.decrement.iconAnchorY}) scale(${le}) translate(-${S/2}, -${S/2})`,style:{pointerEvents:"none"},children:A("svg",{viewBox:`0 0 ${S} ${S}`,width:S,height:S,fill:"white",overflow:"visible",children:xe})})]}),O("g",{className:ne,"data-name":h.buttons.increment.name,onClick:!r&&!g?T:void 0,style:{...ee,...X||{}},pointerEvents:r||g?"none":"auto",children:[h.buttons.increment.paths.map((v,C)=>A("path",{"data-name":v.dataName,d:v.d,fill:Z||v.defaultFill},`inc-path-${C}`)),A("g",{transform:`translate(${h.buttons.increment.iconAnchorX}, ${h.buttons.increment.iconAnchorY}) scale(${le}) translate(-${S/2}, -${S/2})`,style:{pointerEvents:"none"},children:A("svg",{viewBox:`0 0 ${S} ${S}`,width:S,height:S,fill:"white",overflow:"visible",children:Me})})]})]}),A("input",{ref:l,className:`${ke} ${H||""}`,type:"number",name:s,id:b,value:Q,min:e,max:n,step:p,placeholder:m,required:y,disabled:r,readOnly:g,onInput:$,style:Ae,"aria-label":a["aria-label"]||"Warto\u015B\u0107 liczbowa",...i})]})}import{useEffect as Fe,useRef as ue,useState as De}from"https://esm.sh/preact@10.26.8/hooks";import{useSignal as _e}from"https://esm.sh/@preact/signals@2.2.0";import{Fragment as ce,jsx as k,jsxs as j}from"https://esm.sh/preact@10.26.8/jsx-runtime";function je(a="View",o="Drag",c="Click"){return new Map([["View",a],["Drag",o],["Click",c]])}function pe(a){let{titleAvailable:o,titleSelected:c,titleModeButton:t="Mode",titleMode:e=je(),availableValues:n,values:p,defaultValues:m=[],onChange:y=()=>{}}=a,r=_e("View"),[s,b]=De([...m]),w=(()=>{let i=new Map;s.forEach(u=>{i.set(u,(i.get(u)??0)+1)});let l=[];for(let[u,N]of n.entries()){let T=i.get(u)??0,P=N-T;for(let $=0;$<P;$++)l.push(u)}return l})();Fe(()=>{y([...s])},[s]);let M=()=>{r.value==="View"?r.value="Drag":r.value==="Drag"?r.value="Click":r.value="View"},E=i=>{r.value==="Click"&&b([...s,i])},L=i=>{r.value==="Click"&&b(l=>{let u=[...l];return u.splice(i,1),u})},W=i=>{r.value==="Click"&&(i<=0||b(l=>{let u=[...l];return[u[i-1],u[i]]=[u[i],u[i-1]],u}))},H=i=>{r.value==="Click"&&(i>=s.length-1||b(l=>{let u=[...l];return[u[i],u[i+1]]=[u[i+1],u[i]],u}))},F=ue(null),_=ue(null),X=(i,l)=>{if(r.value!=="Drag"){i.preventDefault();return}_.current=l,i.dataTransfer?.setData("text/plain",l),i.dataTransfer.effectAllowed="copy"},J=i=>{_.current=null},G=(i,l)=>{if(r.value!=="Drag"){i.preventDefault();return}F.current=l,i.dataTransfer?.setData("text/plain",s[l]),i.dataTransfer.effectAllowed="move"},U=i=>{F.current=null},Z=(i,l=null)=>{if(i.preventDefault(),r.value==="Drag"){if(_.current!==null){b(u=>{let N=[...u];return l===null||l>=N.length?N.push(_.current):N.splice(l,0,_.current),N}),_.current=null;return}if(F.current!==null){let u=F.current,N=l!==null?l:s.length-1;if(u===N)return;b(T=>{let P=[...T],[$]=P.splice(u,1);return P.splice(N,0,$),P}),F.current=null}}},Y=i=>{r.value==="Drag"&&i.preventDefault()},q=i=>{if(i.preventDefault(),r.value==="Drag"){if(F.current!==null){let l=F.current;b(u=>{let N=[...u];return N.splice(l,1),N}),F.current=null}_.current=null}},K=i=>{r.value==="Drag"&&i.preventDefault()};return j("div",{class:"inputchips-container",style:{maxWidth:"600px"},children:[k("div",{class:"inputchips-mode",children:j("button",{onClick:M,class:"inputchips-mode-button",children:[t,":",k("br",{}),e.get(r.value)]})}),j("div",{class:"inputchips-container-list",children:[j("div",{class:"inputchips-list",children:[o&&k("div",{class:"inputchips-list-title",children:o}),k("div",{class:"inputchips-list-box",onDrop:q,onDragOver:K,children:w.map((i,l)=>j("span",{"data-input-edit":r.value==="View"?"View":r.value==="Drag"?"Drag":"Click",draggable:r.value==="Drag",onDragStart:u=>X(u,i),onDragEnd:u=>J(u),class:"inputchips-chips inputchips-chips-available",children:[i,r.value==="Click"&&k("button",{onClick:()=>E(i),class:"inputchips-chips-button inputchips-chips-button-add",children:"+"})]},`rem-${i}-${l}`))})]}),j("div",{class:"inputchips-list",children:[c&&k("div",{class:"inputchips-list-title",children:c}),k("div",{class:"inputchips-list-box",onDrop:i=>Z(i),onDragOver:Y,children:s.map((i,l)=>j("span",{draggable:r.value==="Drag","data-input-edit":r.value==="View"?"View":r.value==="Drag"?"Drag":"Click",onDragStart:u=>G(u,l),onDragEnd:u=>U(u),onDrop:u=>{r.value==="Drag"&&(u.preventDefault(),Z(u,l))},onDragOver:u=>{r.value==="Drag"&&u.preventDefault()},class:"inputchips-chips inputchips-chips-selected",children:[r.value==="Click"&&j(ce,{children:[l>0&&k("button",{onClick:()=>W(l),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2190"}),l<s.length-1&&k("button",{onClick:()=>H(l),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2192"})]}),i,r.value==="Click"&&k(ce,{children:k("button",{onClick:()=>L(l),class:"inputchips-chips-button inputchips-chips-button-del",children:"x"})})]},`sel-${i}-${l}`))})]})]})]})}function de(a,o){let c=new Map;return(Array.isArray(a)?a:[a]).forEach(e=>{c.set(e.var,e.val)}),o&&(Array.isArray(o)?o:[o]).forEach(n=>{try{let p=n.val(c);c.set(n.var,p)}catch(p){console.error(`B\u0142\u0105d podczas obliczania zmiennej "${n.var}":`,p instanceof Error?p.message:String(p)),c.set(n.var,void 0)}}),c}function me(a,o,c){if(c<=0)return[];let t=[];for(let e=0;e<c;e++)t.push(a+e*o);return t}function he(a,o,c){let t=[];if(o===0)return a===c&&t.push(a),t;if(o>0){if(a>c)return t;for(let e=a;e<=c;e+=o)t.push(e)}else{if(a<c)return t;for(let e=a;e>=c;e+=o)t.push(e)}return t}function ge(a,o,c){let t=[],e=o.map(m=>m==="=||"?"":`\u3010${m}\u3011`);t.push(e);let n=Math.max(...o.map(m=>Array.isArray(c.get(m))?c.get(m).length:0));for(let m=0;m<n;m++){let y=[];for(let r of o)if(r==="=||")y.push("");else{let s=c.get(r);Array.isArray(s)?y.push(s[m]??""):y.push("")}t.push(y)}function p(m){if(m.length===0)return[];let y=m.length,r=m[0].length,s=Array.from({length:r},()=>new Array(y));for(let b=0;b<y;b++)for(let g=0;g<r;g++)s[g][b]=m[b][g];return s}return a!="COL"?p(t):t}import{Fragment as fe,jsx as D,jsxs as re}from"https://esm.sh/preact@10.26.8/jsx-runtime";function be(a){let{data:o,mode:c,tableClassName:t,caption:e,thClassName:n,tdClassName:p}=a,m=c==="COL";if(o.length===0)return D("table",{className:t??""});let y=m?o[0]:o.map(s=>s[0]),r=m?o.slice(1):o.map(s=>s.slice(1));return re("table",{className:`${m?"plot-col-data1":"plot-row-data1"} ${t??""}`,children:[e&&D("caption",{children:e}),D("tbody",{children:m?re(fe,{children:[D("tr",{children:y.map((s,b)=>{let g=typeof s=="string"&&s!=="=||"?s:"NNOONNEE";return D("th",{className:`table-val-type--${g} ${n??""}`,children:s},g)})}),r.map((s,b)=>D("tr",{children:s.map((g,w)=>{let M=typeof y[w]=="string"&&y[w]!=="=||"?y[w]:"NNOONNEE";return D("td",{className:`table-val-type--${M} ${p??""}`,children:g},`${M}-row-${b}`)})},`row-${b}`))]}):D(fe,{children:o.map((s,b)=>{let g=typeof s[0]=="string"&&s[0]!=="=||"?s[0]:"NNOONNEE";return re("tr",{className:`table-val-type--${g}`,children:[D("th",{scope:"row",className:n,children:s[0]}),s.slice(1).map((w,M)=>D("td",{className:p,children:w},`${g}-col-${M}`))]},`series-row-${g}`)})})})]})}function ie(a){return Math.floor(Math.log2(a))}function x(a,o,c,t,e){let n=e?e(t):t;return a*2**(n+o)+c}function V(a){if(a<=0||!Number.isInteger(a))throw new Error("Argument musi by\u0107 dodatni\u0105 liczb\u0105 ca\u0142kowit\u0105.");return Math.log2(a&-a)}function Pe(a){return typeof a!="number"||isNaN(a)||!Number.isInteger(a)||a<=0}function ze(a){return typeof a!="number"||isNaN(a)||!Number.isInteger(a)||a<0}function f(a,o,c){if(!Array.isArray(o))throw new Error(`Zmienne ${a}  musz\u0105 by\u0107 tablicami.`);switch(c){case"isNotValNaturalPos":if(o.some(Pe))throw new Error(`Wszystkie elementy w tablicy ${a} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi (wi\u0119kszymi od 0).`);break;case"isNotValNaturalPosWithZero":if(o.some(ze))throw new Error(`Wszystkie elementy w tablicy ${a} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi z zero (wi\u0119kszymi od -1).`);break}}function I(a){return de([{var:"i",val:a}],[{var:"h",val:t=>{let e=t.get("i");return f("i",e,"isNotValNaturalPos"),e.map((n,p)=>ie(n))}},{var:"hA",val:t=>{let e=t.get("h");return f("h",e,"isNotValNaturalPosWithZero"),e.map((n,p)=>x(1,0,0,n))}},{var:"hZ",val:t=>{let e=t.get("h");return f("h",e,"isNotValNaturalPosWithZero"),e.map((n,p)=>x(1,1,-1,n))}},{var:"hAZ",val:t=>{let e=t.get("h");return f("h",e,"isNotValNaturalPosWithZero"),e.map((n,p)=>x(1.5,1,-1,n))}},{var:"hi",val:t=>{let e=t.get("i");f("i",e,"isNotValNaturalPos");let n=t.get("hA");return f("hA",n,"isNotValNaturalPos"),e.map((p,m)=>p-n[m])}},{var:"hj",val:t=>{let e=t.get("i");f("i",e,"isNotValNaturalPos");let n=t.get("hZ");return f("hZ",n,"isNotValNaturalPos"),e.map((p,m)=>n[m]-p)}},{var:"j",val:t=>{let e=t.get("i");return f("i",e,"isNotValNaturalPos"),e.map((n,p)=>x(1.5,1,-1,ie(n))-n)}},{var:"ki",val:t=>{let e=t.get("i");return f("i",e,"isNotValNaturalPos"),e.map((n,p)=>V(n))}},{var:"kj",val:t=>{let e=t.get("j");return f("j",e,"isNotValNaturalPos"),e.map((n,p)=>V(n))}},{var:"kiA",val:t=>{let e=t.get("i");return f("i",e,"isNotValNaturalPos"),e.map((n,p)=>x(1,0,0,n,V))}},{var:"kjA",val:t=>{let e=t.get("j");return f("j",e,"isNotValNaturalPos"),e.map((n,p)=>x(1,0,0,n,V))}},{var:"kiZ",val:t=>{let e=t.get("i");return f("i",e,"isNotValNaturalPos"),e.map((n,p)=>x(1,1,-1,n,V))}},{var:"kjZ",val:t=>{let e=t.get("j");return f("j",e,"isNotValNaturalPos"),e.map((n,p)=>x(1,1,-1,n,V))}},{var:"li",val:t=>{let e=t.get("i");return f("i",e,"isNotValNaturalPos"),e.map((n,p)=>n/x(1,0,0,n,V))}},{var:"lj",val:t=>{let e=t.get("j");return f("j",e,"isNotValNaturalPos"),e.map((n,p)=>n/x(1,0,0,n,V))}},{var:"mi",val:t=>{let e=t.get("i");return f("i",e,"isNotValNaturalPos"),e.map((n,p)=>n/x(1,0,0,n,V)+1)}},{var:"wj",val:t=>{let e=t.get("j");return f("j",e,"isNotValNaturalPos"),e.map((n,p)=>n/x(1,0,0,n,V)+2)}}])}import{Fragment as Oe,jsx as d,jsxs as z}from"https://esm.sh/preact@10.26.8/jsx-runtime";function ve(){let a=R(1),o=R(10),c=R(new Map),t=I(me(1,1,15));console.log("RES_MAP",t);let e=R(!0),n=R([]),p=()=>{if(isNaN(Number(a.value))||isNaN(Number(o.value))){console.error("Warto\u015Bci 'from' lub 'to' nie s\u0105 liczbami."),c.value=new Map;return}c.value=I(he(Number(a.value),1,Number(o.value)))},m=()=>{e.value=!e.value},y=s=>{s!==void 0?a.value=s:a.value=0},r=s=>{s!==void 0?o.value=s:o.value=0};return z("main",{children:[d("h1",{children:"Matematyka w genealogii."}),z("div",{style:{display:"flex",alignItems:"stretch",gap:"40px",marginBottom:"20px",flexFlow:"row nowrap"},children:[d("button",{onClick:p,style:{padding:"0.5rem 1rem",fontSize:"1rem"},children:"Policz"}),z("fieldset",{class:"fieldset-inputs-number",style:{border:"3px solid #6c757d",borderRadius:"8px",padding:"20px",marginTop:"0",marginBottom:"0",display:"flex",alignItems:"flex-start",gap:"40px"},children:[d("legend",{style:{backgroundColor:"#000",color:"#fff",padding:"3px 6px"},children:"Choose range of \u3010i\u3011"}),d(ae,{name:"input1",value:a.value,onValueChange:y,def:1,min:1,step:1,placeholder:"Od","aria-label":"Warto\u015B\u0107 pocz\u0105tkowa przedzia\u0142u"}),d(ae,{name:"input2",value:o.value,onValueChange:r,def:7,min:a.value>=1?a.value:1,step:1,placeholder:"Do","aria-label":"Warto\u015B\u0107 ko\u0144cowa przedzia\u0142u"})]}),d(pe,{availableValues:new Map([["h",1],["i",1],["j",1],["hi",1],["hj",1],["ki",1],["mi",1],["li",1],["lj",1],["wj",1],["kj",1],["hA",1],["hZ",1],["hAZ",1],["kiA",1],["kjA",1],["kiZ",1],["kjZ",1],["=||",20]]),defaultValues:["ki","mi","li","i","hi","kiA","kiZ","=||","h","hA","hZ","hAZ","=||","kjZ","kjA","hj","j","lj","wj","kj"],values:n.value,titleAvailable:"Dost\u0119pne:",titleSelected:"Wybrane:",onChange:s=>{n.value=s,console.log(n.value)}})]}),z("div",{children:[d("input",{type:"checkbox",id:"PlotPosition",name:"PlotPosition",checked:e.value,onClick:m}),d("label",{for:"PlotPosition",children:e.value?"Row":"Col"})]}),d("br",{}),d("br",{}),d("br",{}),c.value.size>0&&z(Oe,{children:[d("h3",{children:"Rezultat oblicze\u0144:"}),d(be,{data:ge(e.value?"ROW":"COL",n.value,c.value),mode:e.value?"ROW":"COL",caption:"Wyniki oblicze\u0144."})]}),d("p",{children:z("ul",{children:[d("li",{children:"\u3010i\u3011"}),d("li",{children:"\u3010h\u3011 = floor(log\u2082(i)) ||| dla przedzia\u0142u [i]"}),d("li",{children:"\u3010hA\u3011 = 2**h ||| dla przedzia\u0142u [h]"}),d("li",{children:"\u3010hZ\u3011 = 2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),d("li",{children:"\u3010hAZ\u3011 =3*2**h-1 = 1.5*2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),d("li",{children:"\u3010hi\u3011 =\u3010i\u3011 -\u3010hA\u3011"}),d("li",{children:"\u3010hj\u3011 =\u3010hZ\u3011 -\u3010i\u3011"}),d("li",{children:"\u3010j\u3011 =\u3010hAZ\u3011 -\u3010i\u3011"})]})}),d("p",{children:z("ul",{children:[d("li",{children:"\u3010ki\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [i]"}),d("li",{children:"\u3010kj\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [j]"}),d("li",{children:"\u3010kiA\u3011 = 2**\u3010ki\u3011"}),d("li",{children:"\u3010kjA\u3011 = 2**\u3010kj\u3011"}),d("li",{children:"\u3010li\u3011 =\u3010i\u3011/\u3010kiA\u3011"}),d("li",{children:"\u3010lj\u3011 =\u3010j\u3011/\u3010kjA\u3011"}),d("li",{children:"\u3010m\u3011 =\u3010li\u3011+1"}),d("li",{children:"\u3010w\u3011 =\u3010lj\u3011+2"})]})})]})}import{jsx as Re}from"https://esm.sh/preact@10.26.8/jsx-runtime";Te(Re(ve,{}),document.getElementById("root"));
//# sourceMappingURL=data:application/json;base64,
