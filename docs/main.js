import{render as je}from"https://esm.sh/preact@10.26.8";import{useSignal as B}from"https://esm.sh/@preact/signals@2.2.0";import{useCallback as T,useEffect as Ae,useRef as we}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as ke,jsx as S,jsxs as j}from"https://esm.sh/preact@10.26.8/jsx-runtime";var Se=S("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"}),Me=j(ke,{children:[S("rect",{x:"11",y:"5",width:"2",height:"14",rx:"1"}),S("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"})]}),c={baseViewBoxWidth:174,baseViewBoxHeight:72,buttons:{choose:{name:"btn-choose",paths:[{dataName:"btn-fill",d:"M115.75,71.62c-10.03,0-19.93-1.62-28.63-4.67l-.12-.04-.12.04c-8.7,3.06-18.59,4.67-28.63,4.67-13.06,0-25.81-2.75-36.02-7.75l26.96-15.21h75.61l26.96,15.21c-10.2,5-22.96,7.75-36.02,7.75Z",defaultFill:"#919191"},{dataName:"btn-border-fill",d:"M124.71,49.04l26.25,14.81c-10.04,4.78-22.48,7.4-35.21,7.4-9.99,0-19.84-1.61-28.5-4.65l-.25-.09-.25.09c-8.66,3.04-18.51,4.65-28.5,4.65-12.73,0-25.16-2.62-35.21-7.4l26.25-14.81h75.41M124.9,48.29H49.1l-27.66,15.6c10.03,5.06,22.85,8.11,36.82,8.11,10.46,0,20.27-1.71,28.75-4.69,8.48,2.98,18.29,4.69,28.75,4.69,13.97,0,26.78-3.04,36.82-8.11l-27.66-15.6h0Z",defaultFill:"#505050"}]},increment:{name:"btn-increment",paths:[{dataName:"btn-fill",d:"M127.38,43.51V1.1c26.83,3.37,46.25,18.01,46.25,34.9,0,9.19-5.68,17.91-16.01,24.57l-30.24-17.06Z",defaultFill:"#21597f"},{dataName:"btn-border-fill",d:"M127.75,1.53c26.42,3.45,45.5,17.86,45.5,34.47,0,9-5.55,17.56-15.65,24.13l-29.85-16.84V1.53M127,.68v43.05l30.63,17.28c10.13-6.48,16.37-15.29,16.37-25.01,0-17.5-20.21-32.08-47-35.32h0Z",defaultFill:"#104060"}],iconAnchorX:150,iconAnchorY:30},decrement:{name:"btn-decrement",paths:[{dataName:"btn-fill",d:"M16.38,60.57C6.06,53.91.38,45.19.38,36,.38,19.11,19.8,4.47,46.62,1.1v42.41l-30.24,17.06Z",defaultFill:"#b21010"},{dataName:"btn-border-fill",d:"M46.25,1.53v41.76h0s-29.85,16.84-29.85,16.84C6.3,53.56.75,45,.75,36,.75,19.39,19.83,4.97,46.25,1.53M47,.68C20.21,3.92,0,18.5,0,36c0,9.72,6.24,18.53,16.37,25.01l30.63-17.28V.68h0Z",defaultFill:"#800000"}],iconAnchorX:25,iconAnchorY:30}},inputArea:{name:"input",rect:{x:52.38,y:.38,width:69.25,height:42.54,defaultFill:"#fff"},borderPath:{d:"M121.25.75v41.79H52.75V.75h68.5M122,0H52v43.29h70V0h0Z",defaultFill:"#333"}}},xe="inputnumber-container",Ve="inputnumber-svg",Q="inputnumber-svg-button",Ee="inputnumber-html-input";function ee(t){let{value:i,defaultValue:r,def:n=1,min:e,max:a,step:l=1,placeholder:A,required:M,disabled:m=!1,name:u,id:g,readOnly:y=!1,onChange:w,onValueChange:v,ratioSIZE:f=1,wrapperClassName:z,svgClassName:ae,inputClassName:L,style:H,selectButtonStyle:X,incrementButtonStyle:W,decrementButtonStyle:J,inputAreaStyle:D,selectButtonFill:o,incrementButtonFill:h,decrementButtonFill:p,inputAreaRectFill:G,inputAreaBorderFill:U,...Z}=t,N=we(null);Ae(()=>{N.current&&(i!==void 0?N.current.value=String(i):r!==void 0?N.current.value=String(r):N.current.value="")},[i,r]);let I=T(b=>{if(N.current&&!m&&!y){b==="up"?N.current.stepUp():N.current.stepDown();let E=new Event("input",{bubbles:!0,cancelable:!0});N.current.dispatchEvent(E)}},[m,y]),he=T(()=>I("down"),[I]),be=T(()=>I("up"),[I]),fe=T(()=>{if(N.current&&!m&&!y){let b=n??1;if(N.current.value=String(b),v&&v(b,u),w){let E=new Event("change",{bubbles:!0});Object.defineProperty(E,"target",{writable:!1,value:N.current}),Object.defineProperty(E,"currentTarget",{writable:!1,value:N.current}),w(E)}console.log("Choose button clicked, value set to 1")}},[m,y,u,v,w]),ge=b=>{let ie=b.currentTarget.value,K;if(ie==="")K=void 0;else{let le=parseFloat(ie);K=isNaN(le)?void 0:le}v&&v(K,u),w&&w(b)},ye=c.baseViewBoxWidth*f,ve=c.baseViewBoxHeight*f,Ne={position:"absolute",left:`${c.inputArea.rect.x*f}px`,top:`${c.inputArea.rect.y*f}px`,width:`${c.inputArea.rect.width*f}px`,height:`${c.inputArea.rect.height*f}px`,border:"none",backgroundColor:"transparent",color:"#333",textAlign:"center",fontSize:`${Math.max(8,18*f)}px`,outline:"none",padding:`0 ${Math.max(1,2*f)}px`,margin:0,boxSizing:"border-box",MozAppearance:"textfield",WebkitAppearance:"none",appearance:"none",zIndex:2},x=24,re=1.5*(c.baseViewBoxHeight*.25*(f>.5?1:f*2)/x),Y="";i!==void 0?Y=String(i):r!==void 0&&(Y=String(r));let q={cursor:m||y?"default":"pointer"};return j("div",{className:`${xe} ${z||""}`,style:{width:`${ye}px`,height:`${ve}px`,position:"relative",overflow:"hidden",...H},...Z,children:[j("svg",{className:`${Ve} ${ae||""}`,"data-name":"input-number",xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${c.baseViewBoxWidth} ${c.baseViewBoxHeight}`,style:{display:"block",width:"100%",height:"100%",position:"absolute",top:0,left:0},"aria-hidden":"true",children:[S("g",{className:Q,"data-name":c.buttons.choose.name,onClick:m?void 0:fe,style:{...q,...X||{}},pointerEvents:m?"none":"auto",children:c.buttons.choose.paths.map((b,E)=>S("path",{"data-name":b.dataName,d:b.d,fill:o||b.defaultFill},`choose-path-${E}`))}),j("g",{"data-name":c.inputArea.name,style:D||{},children:[S("rect",{x:c.inputArea.rect.x,y:c.inputArea.rect.y,width:c.inputArea.rect.width,height:c.inputArea.rect.height,fill:G||c.inputArea.rect.defaultFill}),S("path",{d:c.inputArea.borderPath.d,fill:U||c.inputArea.borderPath.defaultFill})]}),j("g",{className:Q,"data-name":c.buttons.decrement.name,onClick:!m&&!y?he:void 0,style:{...q,...J||{}},pointerEvents:m||y?"none":"auto",children:[c.buttons.decrement.paths.map((b,E)=>S("path",{"data-name":b.dataName,d:b.d,fill:p||b.defaultFill},`dec-path-${E}`)),S("g",{transform:`translate(${c.buttons.decrement.iconAnchorX}, ${c.buttons.decrement.iconAnchorY}) scale(${re}) translate(-${x/2}, -${x/2})`,style:{pointerEvents:"none"},children:S("svg",{viewBox:`0 0 ${x} ${x}`,width:x,height:x,fill:"white",overflow:"visible",children:Se})})]}),j("g",{className:Q,"data-name":c.buttons.increment.name,onClick:!m&&!y?be:void 0,style:{...q,...W||{}},pointerEvents:m||y?"none":"auto",children:[c.buttons.increment.paths.map((b,E)=>S("path",{"data-name":b.dataName,d:b.d,fill:h||b.defaultFill},`inc-path-${E}`)),S("g",{transform:`translate(${c.buttons.increment.iconAnchorX}, ${c.buttons.increment.iconAnchorY}) scale(${re}) translate(-${x/2}, -${x/2})`,style:{pointerEvents:"none"},children:S("svg",{viewBox:`0 0 ${x} ${x}`,width:x,height:x,fill:"white",overflow:"visible",children:Me})})]})]}),S("input",{ref:N,className:`${Ee} ${L||""}`,type:"number",name:u,id:g,value:Y,min:e,max:a,step:l,placeholder:A,required:M,disabled:m,readOnly:y,onInput:ge,style:Ne,"aria-label":t["aria-label"]||"Warto\u015B\u0107 liczbowa",...Z})]})}import{useEffect as Fe,useState as te}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as oe,jsx as F,jsxs as _}from"https://esm.sh/preact@10.26.8/jsx-runtime";function se(t){let{titleAvailable:i,titleSelected:r,titleModeButton:n="Mode",titleModeView:e="View",titleModeDrag:a="Drag",titleModeClick:l="Click",availableValues:A,values:M,defaultValues:m=[],onChange:u=()=>{}}=t,[g,y]=te("View"),[w,v]=te("View"),[f,z]=te([...m]),L=(()=>{let o=new Map;f.forEach(p=>{o.set(p,(o.get(p)??0)+1)});let h=[];for(let[p,G]of A.entries()){let U=o.get(p)??0,Z=G-U;for(let N=0;N<Z;N++)h.push(p)}return h})();Fe(()=>{u([...f])},[f]);let H=()=>{y(o=>o==="View"?(v(a),"Drag"):o==="Drag"?(v(l),"Click"):(v(e),"View"))},X=o=>{z([...f,o])},W=o=>{z(h=>{let p=[...h];return p.splice(o,1),p})},J=o=>{o<=0||z(h=>{let p=[...h];return[p[o-1],p[o]]=[p[o],p[o-1]],p})},D=o=>{o>=f.length-1||z(h=>{let p=[...h];return[p[o],p[o+1]]=[p[o+1],p[o]],p})};return _("div",{class:"inputchips-container",children:[_("div",{class:"inputchips-mode",children:[_("span",{class:"inputchips-mode-label",children:[n,":"]}),F("button",{onClick:H,class:"inputchips-mode-button",children:w})]}),_("div",{class:"inputchips-container-list",children:[_("div",{class:"inputchips-list",children:[i&&F("div",{class:"inputchips-list-title",children:i}),F("div",{class:"inputchips-list-box",children:L.map((o,h)=>_("span",{class:"inputchips-chips inputchips-chips-available",children:[o,g==="Click"&&F("button",{onClick:()=>X(o),class:"inputchips-chips-button inputchips-chips-button-add",children:"+"})]},`rem-${o}-${h}`))})]}),_("div",{class:"inputchips-list",children:[r&&F("div",{class:"inputchips-list-title",children:r}),F("div",{class:"inputchips-list-box",children:f.map((o,h)=>_("span",{class:"inputchips-chips inputchips-chips-selected",children:[g==="Click"&&_(oe,{children:[h>0&&F("button",{onClick:()=>J(h),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2190"}),h<f.length-1&&F("button",{onClick:()=>D(h),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2192"})]}),o,g==="Click"&&F(oe,{children:F("button",{onClick:()=>W(h),class:"inputchips-chips-button inputchips-chips-button-del",children:"x"})})]},`sel-${o}-${h}`))})]})]})]})}function ue(t,i){let r=new Map;return(Array.isArray(t)?t:[t]).forEach(e=>{r.set(e.var,e.val)}),i&&(Array.isArray(i)?i:[i]).forEach(a=>{try{let l=a.val(r);r.set(a.var,l)}catch(l){console.error(`B\u0142\u0105d podczas obliczania zmiennej "${a.var}":`,l instanceof Error?l.message:String(l)),r.set(a.var,void 0)}}),r}function ce(t,i,r){if(r<=0)return[];let n=[];for(let e=0;e<r;e++)n.push(t+e*i);return n}function pe(t,i,r){let n=[];if(i===0)return t===r&&n.push(t),n;if(i>0){if(t>r)return n;for(let e=t;e<=r;e+=i)n.push(e)}else{if(t<r)return n;for(let e=t;e>=r;e+=i)n.push(e)}return n}import{jsx as C,jsxs as $}from"https://esm.sh/preact@10.26.8/jsx-runtime";var O=t=>{if(t==null)return"";if(typeof t=="number")return String(t);if(Array.isArray(t))try{return JSON.stringify(t)}catch{return"[B\u0142\u0105d serializacji tablicy]"}return String(t)};function de({data:t,sort:i,type:r,caption:n,tableClassName:e,thClassName:a,tdClassName:l}){if(!t||t.size===0)return C("p",{children:"Brak danych do wy\u015Bwietlenia."});let A=i??Array.from(t.keys()),M=0,m=!1;for(let u of A){let g=t.get(u);m=!0,Array.isArray(g)&&(M=Math.max(M,g.length))}return m&&M===0&&(M=1),M===0&&A.length>0&&(M=1),r==="col"?$("table",{className:"plot-col-data1 "+(e??""),children:[n&&C("caption",{children:n}),C("thead",{children:C("tr",{children:A.map(u=>$("th",{className:`table-val-type--${u} `+(a??""),children:["\u3010",u,"\u3011"]},u))})}),C("tbody",{children:Array.from({length:M}).map((u,g)=>C("tr",{children:A.map(y=>{let w=t.get(y),v="";return Array.isArray(w)?v=O(w[g]):g===0&&(v=O(w)),C("td",{className:`table-val-type--${y} `+(l??""),children:v},`${y}-row-${g}`)})},`row-${g}`))})]}):r==="row"?$("table",{className:"plot-row-data1 "+(e??""),children:[n&&C("caption",{children:n}),C("tbody",{children:A.map(u=>{let g=t.get(u);return $("tr",{className:`table-val-type--${u}`,children:[$("th",{scope:"row",className:a,children:["\u3010",u,"\u3011"]})," ",Array.from({length:M}).map((y,w)=>{let v="";return Array.isArray(g)?v=O(g[w]):w===0&&(v=O(g)),C("td",{className:l,children:v},`${u}-col-${w}`)})]},`series-row-${u}`)})})]}):$("p",{children:["Nieprawid\u0142owy typ tabeli: ",r]})}function ne(t){return Math.floor(Math.log2(t))}function V(t,i,r,n,e){let a=e?e(n):n;return t*2**(a+i)+r}function k(t){if(t<=0||!Number.isInteger(t))throw new Error("Argument musi by\u0107 dodatni\u0105 liczb\u0105 ca\u0142kowit\u0105.");return Math.log2(t&-t)}function Ce(t){return typeof t!="number"||isNaN(t)||!Number.isInteger(t)||t<=0}function _e(t){return typeof t!="number"||isNaN(t)||!Number.isInteger(t)||t<0}function d(t,i,r){if(!Array.isArray(i))throw new Error(`Zmienne ${t}  musz\u0105 by\u0107 tablicami.`);switch(r){case"isNotValNaturalPos":if(i.some(Ce))throw new Error(`Wszystkie elementy w tablicy ${t} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi (wi\u0119kszymi od 0).`);break;case"isNotValNaturalPosWithZero":if(i.some(_e))throw new Error(`Wszystkie elementy w tablicy ${t} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi z zero (wi\u0119kszymi od -1).`);break}}function R(t){return ue([{var:"i",val:t}],[{var:"h",val:n=>{let e=n.get("i");return d("i",e,"isNotValNaturalPos"),e.map((a,l)=>ne(a))}},{var:"hA",val:n=>{let e=n.get("h");return d("h",e,"isNotValNaturalPosWithZero"),e.map((a,l)=>V(1,0,0,a))}},{var:"hZ",val:n=>{let e=n.get("h");return d("h",e,"isNotValNaturalPosWithZero"),e.map((a,l)=>V(1,1,-1,a))}},{var:"hAZ",val:n=>{let e=n.get("h");return d("h",e,"isNotValNaturalPosWithZero"),e.map((a,l)=>V(1.5,1,-1,a))}},{var:"hi",val:n=>{let e=n.get("i");d("i",e,"isNotValNaturalPos");let a=n.get("hA");return d("hA",a,"isNotValNaturalPos"),e.map((l,A)=>l-a[A])}},{var:"hj",val:n=>{let e=n.get("i");d("i",e,"isNotValNaturalPos");let a=n.get("hZ");return d("hZ",a,"isNotValNaturalPos"),e.map((l,A)=>a[A]-l)}},{var:"j",val:n=>{let e=n.get("i");return d("i",e,"isNotValNaturalPos"),e.map((a,l)=>V(1.5,1,-1,ne(a))-a)}},{var:"ki",val:n=>{let e=n.get("i");return d("i",e,"isNotValNaturalPos"),e.map((a,l)=>k(a))}},{var:"kj",val:n=>{let e=n.get("j");return d("j",e,"isNotValNaturalPos"),e.map((a,l)=>k(a))}},{var:"kiA",val:n=>{let e=n.get("i");return d("i",e,"isNotValNaturalPos"),e.map((a,l)=>V(1,0,0,a,k))}},{var:"kjA",val:n=>{let e=n.get("j");return d("j",e,"isNotValNaturalPos"),e.map((a,l)=>V(1,0,0,a,k))}},{var:"kiZ",val:n=>{let e=n.get("i");return d("i",e,"isNotValNaturalPos"),e.map((a,l)=>V(1,1,-1,a,k))}},{var:"kjZ",val:n=>{let e=n.get("j");return d("j",e,"isNotValNaturalPos"),e.map((a,l)=>V(1,1,-1,a,k))}},{var:"li",val:n=>{let e=n.get("i");return d("i",e,"isNotValNaturalPos"),e.map((a,l)=>a/V(1,0,0,a,k))}},{var:"lj",val:n=>{let e=n.get("j");return d("j",e,"isNotValNaturalPos"),e.map((a,l)=>a/V(1,0,0,a,k))}},{var:"mi",val:n=>{let e=n.get("i");return d("i",e,"isNotValNaturalPos"),e.map((a,l)=>a/V(1,0,0,a,k)+1)}},{var:"wj",val:n=>{let e=n.get("j");return d("j",e,"isNotValNaturalPos"),e.map((a,l)=>a/V(1,0,0,a,k)+2)}}])}import{Fragment as ze,jsx as s,jsxs as P}from"https://esm.sh/preact@10.26.8/jsx-runtime";function me(){let t=B(1),i=B(10),r=B(new Map),n=R(ce(1,1,15));console.log(n);let e=B(!0),a=B([]),l=()=>{if(isNaN(Number(t.value))||isNaN(Number(i.value))){console.error("Warto\u015Bci 'from' lub 'to' nie s\u0105 liczbami."),r.value=new Map;return}r.value=R(pe(Number(t.value),1,Number(i.value)))},A=()=>{e.value=!e.value},M=u=>{u!==void 0?t.value=u:t.value=0},m=u=>{u!==void 0?i.value=u:i.value=0};return P("main",{children:[s("h1",{children:"Matematyka w genealogii."}),P("div",{style:{display:"flex",alignItems:"stretch",gap:"40px",marginBottom:"20px",flexFlow:"row nowrap"},children:[s("button",{onClick:l,style:{padding:"0.5rem 1rem",fontSize:"1rem"},children:"Policz"}),P("fieldset",{class:"fieldset-inputs-number",style:{border:"3px solid #6c757d",borderRadius:"8px",padding:"20px",marginTop:"0",marginBottom:"0",display:"flex",alignItems:"flex-start",gap:"40px"},children:[s("legend",{style:{backgroundColor:"#000",color:"#fff",padding:"3px 6px"},children:"Choose range of \u3010i\u3011"}),s(ee,{name:"input1",value:t.value,onValueChange:M,def:1,min:1,step:1,placeholder:"Od","aria-label":"Warto\u015B\u0107 pocz\u0105tkowa przedzia\u0142u"}),s(ee,{name:"input2",value:i.value,onValueChange:m,def:7,min:t.value>=1?t.value:1,step:1,placeholder:"Do","aria-label":"Warto\u015B\u0107 ko\u0144cowa przedzia\u0142u"})]}),s("p",{children:P("ul",{children:[s("li",{children:"\u3010i\u3011"}),s("li",{children:"\u3010h\u3011 = floor(log\u2082(i)) ||| dla przedzia\u0142u [i]"}),s("li",{children:"\u3010hA\u3011 = 2**h ||| dla przedzia\u0142u [h]"}),s("li",{children:"\u3010hZ\u3011 = 2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),s("li",{children:"\u3010hAZ\u3011 =3*2**h-1 = 1.5*2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),s("li",{children:"\u3010hi\u3011 =\u3010i\u3011 -\u3010hA\u3011"}),s("li",{children:"\u3010hj\u3011 =\u3010hZ\u3011 -\u3010i\u3011"}),s("li",{children:"\u3010j\u3011 =\u3010hAZ\u3011 -\u3010i\u3011"})]})}),s("p",{children:P("ul",{children:[s("li",{children:"\u3010ki\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [i]"}),s("li",{children:"\u3010kj\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [j]"}),s("li",{children:"\u3010kiA\u3011 = 2**\u3010ki\u3011"}),s("li",{children:"\u3010kjA\u3011 = 2**\u3010kj\u3011"}),s("li",{children:"\u3010li\u3011 =\u3010i\u3011/\u3010kiA\u3011"}),s("li",{children:"\u3010lj\u3011 =\u3010j\u3011/\u3010kjA\u3011"}),s("li",{children:"\u3010m\u3011 =\u3010li\u3011+1"}),s("li",{children:"\u3010w\u3011 =\u3010lj\u3011+2"})]})})]}),P("div",{children:[s("input",{type:"checkbox",id:"PlotPosition",name:"PlotPosition",checked:e.value,onClick:A}),s("label",{for:"PlotPosition",children:e.value?"Row":"Col"})]}),s("br",{}),s(se,{availableValues:new Map([["\u{1F34E} Jab\u0142ko",2],["\u{1F34C} Banan",3],["\u{1F353} Truskawka",1],["\u{1F95D} Kiwi",2]]),defaultValues:["\u{1F34C} Banan","\u{1F34E} Jab\u0142ko"],values:a.value,titleAvailable:"Dost\u0119pne:",titleSelected:"Wybrane:",onChange:u=>{a.value=u,console.log(a.value)}}),s("br",{}),r.value.size>0&&P(ze,{children:[s("h3",{children:"Rezultat oblicze\u0144:"}),s(de,{data:r.value,type:e.value?"row":"col",sort:["ki","mi","li","i","hi","kiA","kiZ","h","hA","hZ","hAZ","kjZ","kjA","hj","j","lj","wj","kj"],caption:"Wyniki oblicze\u0144."})]})]})}import{jsx as $e}from"https://esm.sh/preact@10.26.8/jsx-runtime";je($e(me,{}),document.getElementById("root"));
//# sourceMappingURL=data:application/json;base64,
