import{render as Re}from"https://esm.sh/preact@10.26.8";import{useSignal as R}from"https://esm.sh/@preact/signals@2.2.0";import{useCallback as B,useEffect as we,useRef as Se}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as Ve,jsx as S,jsxs as T}from"https://esm.sh/preact@10.26.8/jsx-runtime";var xe=S("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"}),Me=T(Ve,{children:[S("rect",{x:"11",y:"5",width:"2",height:"14",rx:"1"}),S("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"})]}),m={baseViewBoxWidth:174,baseViewBoxHeight:72,buttons:{choose:{name:"btn-choose",paths:[{dataName:"btn-fill",d:"M115.75,71.62c-10.03,0-19.93-1.62-28.63-4.67l-.12-.04-.12.04c-8.7,3.06-18.59,4.67-28.63,4.67-13.06,0-25.81-2.75-36.02-7.75l26.96-15.21h75.61l26.96,15.21c-10.2,5-22.96,7.75-36.02,7.75Z",defaultFill:"#919191"},{dataName:"btn-border-fill",d:"M124.71,49.04l26.25,14.81c-10.04,4.78-22.48,7.4-35.21,7.4-9.99,0-19.84-1.61-28.5-4.65l-.25-.09-.25.09c-8.66,3.04-18.51,4.65-28.5,4.65-12.73,0-25.16-2.62-35.21-7.4l26.25-14.81h75.41M124.9,48.29H49.1l-27.66,15.6c10.03,5.06,22.85,8.11,36.82,8.11,10.46,0,20.27-1.71,28.75-4.69,8.48,2.98,18.29,4.69,28.75,4.69,13.97,0,26.78-3.04,36.82-8.11l-27.66-15.6h0Z",defaultFill:"#505050"}]},increment:{name:"btn-increment",paths:[{dataName:"btn-fill",d:"M127.38,43.51V1.1c26.83,3.37,46.25,18.01,46.25,34.9,0,9.19-5.68,17.91-16.01,24.57l-30.24-17.06Z",defaultFill:"#21597f"},{dataName:"btn-border-fill",d:"M127.75,1.53c26.42,3.45,45.5,17.86,45.5,34.47,0,9-5.55,17.56-15.65,24.13l-29.85-16.84V1.53M127,.68v43.05l30.63,17.28c10.13-6.48,16.37-15.29,16.37-25.01,0-17.5-20.21-32.08-47-35.32h0Z",defaultFill:"#104060"}],iconAnchorX:150,iconAnchorY:30},decrement:{name:"btn-decrement",paths:[{dataName:"btn-fill",d:"M16.38,60.57C6.06,53.91.38,45.19.38,36,.38,19.11,19.8,4.47,46.62,1.1v42.41l-30.24,17.06Z",defaultFill:"#b21010"},{dataName:"btn-border-fill",d:"M46.25,1.53v41.76h0s-29.85,16.84-29.85,16.84C6.3,53.56.75,45,.75,36,.75,19.39,19.83,4.97,46.25,1.53M47,.68C20.21,3.92,0,18.5,0,36c0,9.72,6.24,18.53,16.37,25.01l30.63-17.28V.68h0Z",defaultFill:"#800000"}],iconAnchorX:25,iconAnchorY:30}},inputArea:{name:"input",rect:{x:52.38,y:.38,width:69.25,height:42.54,defaultFill:"#fff"},borderPath:{d:"M121.25.75v41.79H52.75V.75h68.5M122,0H52v43.29h70V0h0Z",defaultFill:"#333"}}},Ce="inputnumber-container",Ee="inputnumber-svg",ne="inputnumber-svg-button",ke="inputnumber-html-input";function ae(a){let{value:i,defaultValue:u,def:n=1,min:e,max:t,step:p=1,placeholder:A,required:E,disabled:r=!1,name:h,id:g,readOnly:o=!1,onChange:N,onValueChange:v,ratioSIZE:y=1,wrapperClassName:_,svgClassName:W,inputClassName:H,style:F,selectButtonStyle:P,incrementButtonStyle:X,decrementButtonStyle:J,inputAreaStyle:G,selectButtonFill:U,incrementButtonFill:Z,decrementButtonFill:Y,inputAreaRectFill:q,inputAreaBorderFill:K,...l}=a,s=Se(null);we(()=>{s.current&&(i!==void 0?s.current.value=String(i):u!==void 0?s.current.value=String(u):s.current.value="")},[i,u]);let c=B(b=>{if(s.current&&!r&&!o){b==="up"?s.current.stepUp():s.current.stepDown();let C=new Event("input",{bubbles:!0,cancelable:!0});s.current.dispatchEvent(C)}},[r,o]),w=B(()=>c("down"),[c]),I=B(()=>c("up"),[c]),j=B(()=>{if(s.current&&!r&&!o){let b=n??1;if(s.current.value=String(b),v&&v(b,h),N){let C=new Event("change",{bubbles:!0});Object.defineProperty(C,"target",{writable:!1,value:s.current}),Object.defineProperty(C,"currentTarget",{writable:!1,value:s.current}),N(C)}console.log("Choose button clicked, value set to 1")}},[r,o,h,v,N]),O=b=>{let oe=b.currentTarget.value,te;if(oe==="")te=void 0;else{let se=parseFloat(oe);te=isNaN(se)?void 0:se}v&&v(te,h),N&&N(b)},ye=m.baseViewBoxWidth*y,Ae=m.baseViewBoxHeight*y,Ne={position:"absolute",left:`${m.inputArea.rect.x*y}px`,top:`${m.inputArea.rect.y*y}px`,width:`${m.inputArea.rect.width*y}px`,height:`${m.inputArea.rect.height*y}px`,border:"none",backgroundColor:"transparent",color:"#333",textAlign:"center",fontSize:`${Math.max(8,18*y)}px`,outline:"none",padding:`0 ${Math.max(1,2*y)}px`,margin:0,boxSizing:"border-box",MozAppearance:"textfield",WebkitAppearance:"none",appearance:"none",zIndex:2},x=24,ie=1.5*(m.baseViewBoxHeight*.25*(y>.5?1:y*2)/x),Q="";i!==void 0?Q=String(i):u!==void 0&&(Q=String(u));let ee={cursor:r||o?"default":"pointer"};return T("div",{className:`${Ce} ${_||""}`,style:{width:`${ye}px`,height:`${Ae}px`,position:"relative",overflow:"hidden",...F},...l,children:[T("svg",{className:`${Ee} ${W||""}`,"data-name":"input-number",xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${m.baseViewBoxWidth} ${m.baseViewBoxHeight}`,style:{display:"block",width:"100%",height:"100%",position:"absolute",top:0,left:0},"aria-hidden":"true",children:[S("g",{className:ne,"data-name":m.buttons.choose.name,onClick:r?void 0:j,style:{...ee,...P||{}},pointerEvents:r?"none":"auto",children:m.buttons.choose.paths.map((b,C)=>S("path",{"data-name":b.dataName,d:b.d,fill:U||b.defaultFill},`choose-path-${C}`))}),T("g",{"data-name":m.inputArea.name,style:G||{},children:[S("rect",{x:m.inputArea.rect.x,y:m.inputArea.rect.y,width:m.inputArea.rect.width,height:m.inputArea.rect.height,fill:q||m.inputArea.rect.defaultFill}),S("path",{d:m.inputArea.borderPath.d,fill:K||m.inputArea.borderPath.defaultFill})]}),T("g",{className:ne,"data-name":m.buttons.decrement.name,onClick:!r&&!o?w:void 0,style:{...ee,...J||{}},pointerEvents:r||o?"none":"auto",children:[m.buttons.decrement.paths.map((b,C)=>S("path",{"data-name":b.dataName,d:b.d,fill:Y||b.defaultFill},`dec-path-${C}`)),S("g",{transform:`translate(${m.buttons.decrement.iconAnchorX}, ${m.buttons.decrement.iconAnchorY}) scale(${ie}) translate(-${x/2}, -${x/2})`,style:{pointerEvents:"none"},children:S("svg",{viewBox:`0 0 ${x} ${x}`,width:x,height:x,fill:"white",overflow:"visible",children:xe})})]}),T("g",{className:ne,"data-name":m.buttons.increment.name,onClick:!r&&!o?I:void 0,style:{...ee,...X||{}},pointerEvents:r||o?"none":"auto",children:[m.buttons.increment.paths.map((b,C)=>S("path",{"data-name":b.dataName,d:b.d,fill:Z||b.defaultFill},`inc-path-${C}`)),S("g",{transform:`translate(${m.buttons.increment.iconAnchorX}, ${m.buttons.increment.iconAnchorY}) scale(${ie}) translate(-${x/2}, -${x/2})`,style:{pointerEvents:"none"},children:S("svg",{viewBox:`0 0 ${x} ${x}`,width:x,height:x,fill:"white",overflow:"visible",children:Me})})]})]}),S("input",{ref:s,className:`${ke} ${H||""}`,type:"number",name:h,id:g,value:Q,min:e,max:t,step:p,placeholder:A,required:E,disabled:r,readOnly:o,onInput:O,style:Ne,"aria-label":a["aria-label"]||"Warto\u015B\u0107 liczbowa",...l})]})}import{useEffect as Fe,useRef as ue,useState as De}from"https://esm.sh/preact@10.26.8/hooks";import{useSignal as Pe}from"https://esm.sh/@preact/signals@2.2.0";import{Fragment as ce,jsx as k,jsxs as $}from"https://esm.sh/preact@10.26.8/jsx-runtime";function _e(a="View",i="Drag",u="Click"){return new Map([["View",a],["Drag",i],["Click",u]])}function pe(a){let{titleAvailable:i,titleSelected:u,titleModeButton:n="Mode",titleMode:e=_e(),availableValues:t,values:p,defaultValues:A=[],onChange:E=()=>{}}=a,r=Pe("View"),[h,g]=De([...A]),N=(()=>{let l=new Map;h.forEach(c=>{l.set(c,(l.get(c)??0)+1)});let s=[];for(let[c,w]of t.entries()){let I=l.get(c)??0,j=w-I;for(let O=0;O<j;O++)s.push(c)}return s})();Fe(()=>{E([...h])},[h]);let v=()=>{r.value==="View"?r.value="Drag":r.value==="Drag"?r.value="Click":r.value="View"},y=l=>{r.value==="Click"&&g([...h,l])},_=l=>{r.value==="Click"&&g(s=>{let c=[...s];return c.splice(l,1),c})},W=l=>{r.value==="Click"&&(l<=0||g(s=>{let c=[...s];return[c[l-1],c[l]]=[c[l],c[l-1]],c}))},H=l=>{r.value==="Click"&&(l>=h.length-1||g(s=>{let c=[...s];return[c[l],c[l+1]]=[c[l+1],c[l]],c}))},F=ue(null),P=ue(null),X=(l,s)=>{if(r.value!=="Drag"){l.preventDefault();return}P.current=s,l.dataTransfer?.setData("text/plain",s),l.dataTransfer.effectAllowed="copy"},J=l=>{P.current=null},G=(l,s)=>{if(r.value!=="Drag"){l.preventDefault();return}F.current=s,l.dataTransfer?.setData("text/plain",h[s]),l.dataTransfer.effectAllowed="move"},U=l=>{F.current=null},Z=(l,s=null)=>{if(l.preventDefault(),r.value==="Drag"){if(P.current!==null){g(c=>{let w=[...c];return s===null||s>=w.length?w.push(P.current):w.splice(s,0,P.current),w}),P.current=null;return}if(F.current!==null){let c=F.current,w=s!==null?s:h.length-1;if(c===w)return;g(I=>{let j=[...I],[O]=j.splice(c,1);return j.splice(w,0,O),j}),F.current=null}}},Y=l=>{r.value==="Drag"&&l.preventDefault()},q=l=>{if(l.preventDefault(),r.value==="Drag"){if(F.current!==null){let s=F.current;g(c=>{let w=[...c];return w.splice(s,1),w}),F.current=null}P.current=null}},K=l=>{r.value==="Drag"&&l.preventDefault()};return $("div",{class:"inputchips-container",style:{maxWidth:"600px"},children:[k("div",{class:"inputchips-mode",children:$("button",{onClick:v,class:"inputchips-mode-button",children:[n,":",k("br",{}),e.get(r.value)]})}),$("div",{class:"inputchips-container-list",children:[$("div",{class:"inputchips-list",children:[i&&k("div",{class:"inputchips-list-title",children:i}),k("div",{class:"inputchips-list-box",onDrop:q,onDragOver:K,children:N.map((l,s)=>$("span",{"data-input-edit":r.value==="View"?"View":r.value==="Drag"?"Drag":"Click",draggable:r.value==="Drag",onDragStart:c=>X(c,l),onDragEnd:c=>J(c),class:"inputchips-chips inputchips-chips-available",children:[l,r.value==="Click"&&k("button",{onClick:()=>y(l),class:"inputchips-chips-button inputchips-chips-button-add",children:"+"})]},`rem-${l}-${s}`))})]}),$("div",{class:"inputchips-list",children:[u&&k("div",{class:"inputchips-list-title",children:u}),k("div",{class:"inputchips-list-box",onDrop:l=>Z(l),onDragOver:Y,children:h.map((l,s)=>$("span",{draggable:r.value==="Drag","data-input-edit":r.value==="View"?"View":r.value==="Drag"?"Drag":"Click",onDragStart:c=>G(c,s),onDragEnd:c=>U(c),onDrop:c=>{r.value==="Drag"&&(c.preventDefault(),Z(c,s))},onDragOver:c=>{r.value==="Drag"&&c.preventDefault()},class:"inputchips-chips inputchips-chips-selected",children:[r.value==="Click"&&$(ce,{children:[s>0&&k("button",{onClick:()=>W(s),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2190"}),s<h.length-1&&k("button",{onClick:()=>H(s),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2192"})]}),l,r.value==="Click"&&k(ce,{children:k("button",{onClick:()=>_(s),class:"inputchips-chips-button inputchips-chips-button-del",children:"x"})})]},`sel-${l}-${s}`))})]})]})]})}function de(a,i){let u=new Map;return(Array.isArray(a)?a:[a]).forEach(e=>{u.set(e.var,e.val)}),i&&(Array.isArray(i)?i:[i]).forEach(t=>{try{let p=t.val(u);u.set(t.var,p)}catch(p){console.error(`B\u0142\u0105d podczas obliczania zmiennej "${t.var}":`,p instanceof Error?p.message:String(p)),u.set(t.var,void 0)}}),u}function me(a,i,u){if(u<=0)return[];let n=[];for(let e=0;e<u;e++)n.push(a+e*i);return n}function he(a,i,u){let n=[];if(i===0)return a===u&&n.push(a),n;if(i>0){if(a>u)return n;for(let e=a;e<=u;e+=i)n.push(e)}else{if(a<u)return n;for(let e=a;e>=u;e+=i)n.push(e)}return n}function ge(a,i,u,n=!1){let e=[],t=u.get("h"),p=i.map(r=>r==="=||"?"":`\u3010${r}\u3011`);e.push(p);let A=Math.max(...i.map(r=>Array.isArray(u.get(r))?u.get(r).length:0)),E=t?.[0];for(let r=0;r<A;r++){let h=[];for(let g of i)if(g==="=||")h.push("");else{let o=u.get(g);Array.isArray(o)?h.push(o[r]??""):h.push("")}if(n&&t!==void 0&&r>0){let g=t[r];g!==E&&e.push(new Array(p.length).fill("")),E=g}e.push(h)}return e=a!="COL"?$e(e):e,console.log("result",e),e}function $e(a){if(a.length===0)return[];let i=a.length,u=a[0].length,n=Array.from({length:u},()=>new Array(i));for(let e=0;e<i;e++)for(let t=0;t<u;t++)n[t][e]=a[e][t];return n}import{Fragment as fe,jsx as D,jsxs as re}from"https://esm.sh/preact@10.26.8/jsx-runtime";function be(a){let{data:i,mode:u,tableClassName:n,caption:e,thClassName:t,tdClassName:p}=a,A=u==="COL";if(i.length===0)return D("table",{className:n??""});let E=A?i[0]:i.map(o=>o[0]),r=A?i.slice(1):i.map(o=>o.slice(1));function h(o){return o=`${o}`,typeof o=="string"&&o!=="=||"&&o!==""?o.replaceAll("\u3010","").replaceAll("\u3011",""):"noneNONE"}function g(o,N){return typeof o=="number"||o=="string"&&o.length>0?N:"noneNONE"}return re("table",{className:`${A?"plot-col-data1":"plot-row-data1"} ${n??""}`,children:[e&&D("caption",{children:e}),D("tbody",{children:A?re(fe,{children:[D("tr",{children:E.map((o,N)=>{let v=g(o,h(o));return D("th",{className:`table-val-type--${v} ${t??""}`,children:o},v)})}),r.map((o,N)=>D("tr",{children:o.map((v,y)=>{let _=g(v,h(E[y]));return D("td",{className:`table-val-type--${_} ${p??""}`,children:v},`${_}-row-${N}`)})},`row-${N}`))]}):D(fe,{children:i.map((o,N)=>{let v=h(o[0]);return re("tr",{children:[D("th",{scope:"row",className:`table-val-type--${g(o[0],v)} ${t??""}`,children:o[0]}),o.slice(1).map((y,_)=>D("td",{className:`table-val-type--${g(y,v)} ${p??""}`,children:y},`${v}-col-${_}`))]},`series-row-${v}`)})})})]})}function le(a){return Math.floor(Math.log2(a))}function M(a,i,u,n,e){let t=e?e(n):n;return a*2**(t+i)+u}function V(a){if(a<=0||!Number.isInteger(a))throw new Error("Argument musi by\u0107 dodatni\u0105 liczb\u0105 ca\u0142kowit\u0105.");return Math.log2(a&-a)}function je(a){return typeof a!="number"||isNaN(a)||!Number.isInteger(a)||a<=0}function ze(a){return typeof a!="number"||isNaN(a)||!Number.isInteger(a)||a<0}function f(a,i,u){if(!Array.isArray(i))throw new Error(`Zmienne ${a}  musz\u0105 by\u0107 tablicami.`);switch(u){case"isNotValNaturalPos":if(i.some(je))throw new Error(`Wszystkie elementy w tablicy ${a} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi (wi\u0119kszymi od 0).`);break;case"isNotValNaturalPosWithZero":if(i.some(ze))throw new Error(`Wszystkie elementy w tablicy ${a} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi z zero (wi\u0119kszymi od -1).`);break}}function L(a){return de([{var:"i",val:a}],[{var:"h",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>le(t))}},{var:"hA",val:n=>{let e=n.get("h");return f("h",e,"isNotValNaturalPosWithZero"),e.map((t,p)=>M(1,0,0,t))}},{var:"hZ",val:n=>{let e=n.get("h");return f("h",e,"isNotValNaturalPosWithZero"),e.map((t,p)=>M(1,1,-1,t))}},{var:"hAZ",val:n=>{let e=n.get("h");return f("h",e,"isNotValNaturalPosWithZero"),e.map((t,p)=>M(1.5,1,-1,t))}},{var:"hi",val:n=>{let e=n.get("i");f("i",e,"isNotValNaturalPos");let t=n.get("hA");return f("hA",t,"isNotValNaturalPos"),e.map((p,A)=>p-t[A])}},{var:"hj",val:n=>{let e=n.get("i");f("i",e,"isNotValNaturalPos");let t=n.get("hZ");return f("hZ",t,"isNotValNaturalPos"),e.map((p,A)=>t[A]-p)}},{var:"j",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>M(1.5,1,-1,le(t))-t)}},{var:"ki",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>V(t))}},{var:"kj",val:n=>{let e=n.get("j");return f("j",e,"isNotValNaturalPos"),e.map((t,p)=>V(t))}},{var:"kiA",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>M(1,0,0,t,V))}},{var:"kjA",val:n=>{let e=n.get("j");return f("j",e,"isNotValNaturalPos"),e.map((t,p)=>M(1,0,0,t,V))}},{var:"kiZ",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>M(1,1,-1,t,V))}},{var:"kjZ",val:n=>{let e=n.get("j");return f("j",e,"isNotValNaturalPos"),e.map((t,p)=>M(1,1,-1,t,V))}},{var:"li",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>t/M(1,0,0,t,V))}},{var:"lj",val:n=>{let e=n.get("j");return f("j",e,"isNotValNaturalPos"),e.map((t,p)=>t/M(1,0,0,t,V))}},{var:"mi",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>t/M(1,0,0,t,V)+1)}},{var:"wj",val:n=>{let e=n.get("j");return f("j",e,"isNotValNaturalPos"),e.map((t,p)=>t/M(1,0,0,t,V)+2)}}])}import{Fragment as Te,jsx as d,jsxs as z}from"https://esm.sh/preact@10.26.8/jsx-runtime";function ve(){let a=R(1),i=R(10),u=R(new Map),n=L(me(1,1,15));console.log("RES_MAP",n);let e=R(!0),t=R(!0),p=R([]),A=()=>{if(isNaN(Number(a.value))||isNaN(Number(i.value))){console.error("Warto\u015Bci 'from' lub 'to' nie s\u0105 liczbami."),u.value=new Map;return}u.value=L(he(Number(a.value),1,Number(i.value)))},E=()=>{e.value=!e.value},r=()=>{t.value=!t.value},h=o=>{o!==void 0?a.value=o:a.value=0},g=o=>{o!==void 0?i.value=o:i.value=0};return z("main",{children:[d("h1",{children:"Matematyka w genealogii."}),z("div",{style:{display:"flex",alignItems:"stretch",gap:"40px",marginBottom:"20px",flexFlow:"row nowrap"},children:[d("button",{onClick:A,style:{padding:"0.5rem 1rem",fontSize:"1rem"},children:"Policz"}),z("fieldset",{class:"fieldset-inputs-number",style:{border:"3px solid #6c757d",borderRadius:"8px",padding:"20px",marginTop:"0",marginBottom:"0",display:"flex",alignItems:"flex-start",gap:"40px"},children:[d("legend",{style:{backgroundColor:"#000",color:"#fff",padding:"3px 6px"},children:"Choose range of \u3010i\u3011"}),d(ae,{name:"input1",value:a.value,onValueChange:h,def:1,min:1,step:1,placeholder:"Od","aria-label":"Warto\u015B\u0107 pocz\u0105tkowa przedzia\u0142u"}),d(ae,{name:"input2",value:i.value,onValueChange:g,def:7,min:a.value>=1?a.value:1,step:1,placeholder:"Do","aria-label":"Warto\u015B\u0107 ko\u0144cowa przedzia\u0142u"})]}),d(pe,{availableValues:new Map([["h",1],["i",1],["j",1],["hi",1],["hj",1],["ki",1],["mi",1],["li",1],["lj",1],["wj",1],["kj",1],["hA",1],["hZ",1],["hAZ",1],["kiA",1],["kjA",1],["kiZ",1],["kjZ",1],["=||",20]]),defaultValues:["ki","mi","li","i","hi","kiA","kiZ","=||","h","hA","hZ","hAZ","=||","kjZ","kjA","hj","j","lj","wj","kj"],values:p.value,titleAvailable:"Dost\u0119pne:",titleSelected:"Wybrane:",onChange:o=>{p.value=o,console.log(p.value)}})]}),z("div",{children:[d("input",{type:"checkbox",id:"PlotPosition",name:"PlotPosition",checked:e.value,onClick:E}),d("label",{for:"PlotPosition",children:e.value?"Row":"Col"}),d("input",{type:"checkbox",id:"PlotSplitGeneration",name:"PlotSplitGeneration",checked:t.value,onClick:r}),d("label",{for:"PlotSplitGeneration",children:e.value?"split-h":"nonstop"})]}),d("br",{}),d("br",{}),d("br",{}),u.value.size>0&&z(Te,{children:[d("h3",{children:"Rezultat oblicze\u0144:"}),d(be,{data:ge(e.value?"ROW":"COL",p.value,u.value,t.value),mode:e.value?"ROW":"COL",caption:"Wyniki oblicze\u0144."})]}),d("p",{children:z("ul",{children:[d("li",{children:"\u3010i\u3011"}),d("li",{children:"\u3010h\u3011 = floor(log\u2082(i)) ||| dla przedzia\u0142u [i]"}),d("li",{children:"\u3010hA\u3011 = 2**h ||| dla przedzia\u0142u [h]"}),d("li",{children:"\u3010hZ\u3011 = 2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),d("li",{children:"\u3010hAZ\u3011 =3*2**h-1 = 1.5*2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),d("li",{children:"\u3010hi\u3011 =\u3010i\u3011 -\u3010hA\u3011"}),d("li",{children:"\u3010hj\u3011 =\u3010hZ\u3011 -\u3010i\u3011"}),d("li",{children:"\u3010j\u3011 =\u3010hAZ\u3011 -\u3010i\u3011"})]})}),d("p",{children:z("ul",{children:[d("li",{children:"\u3010ki\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [i]"}),d("li",{children:"\u3010kj\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [j]"}),d("li",{children:"\u3010kiA\u3011 = 2**\u3010ki\u3011"}),d("li",{children:"\u3010kjA\u3011 = 2**\u3010kj\u3011"}),d("li",{children:"\u3010li\u3011 =\u3010i\u3011/\u3010kiA\u3011"}),d("li",{children:"\u3010lj\u3011 =\u3010j\u3011/\u3010kjA\u3011"}),d("li",{children:"\u3010m\u3011 =\u3010li\u3011+1"}),d("li",{children:"\u3010w\u3011 =\u3010lj\u3011+2"})]})})]})}import{jsx as Ie}from"https://esm.sh/preact@10.26.8/jsx-runtime";Re(Ie(ve,{}),document.getElementById("root"));
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbWFpbi50c3giLCAiLi4vYXBwL2FwcC50c3giLCAiLi4vdWkvSW5wdXROdW1iZXIudHN4IiwgIi4uL3VpL0lucHV0Q2hpcHNMaXN0LnRzeCIsICIuLi9sb2dpYy9jYWxjdWxhdGVFeGNlbC50cyIsICIuLi91aS9QbG90SHRtbFRhYmxlLnRzeCIsICIuLi9sb2dpYy9tYXRoRnVuYy50cyIsICIuLi9kYXRhL2dlbmVyVGFibGUxLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKiogQGpzeFJ1bnRpbWUgYXV0b21hdGljICovXG4vKiogQGpzeEltcG9ydFNvdXJjZSBodHRwczovL2VzbS5zaC9wcmVhY3RAMTAuMjYuOCAqL1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL3ByZWFjdEAxMC4yNi44XCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHAvYXBwLnRzeFwiO1xuLy9hYVxucmVuZGVyKDxBcHAgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSEpO1xuIiwgIi8qKiBAanN4UnVudGltZSBhdXRvbWF0aWMgKi9cbi8qKiBAanN4SW1wb3J0U291cmNlIGh0dHBzOi8vZXNtLnNoL3ByZWFjdEAxMC4yNi44ICovXG5pbXBvcnQgeyBzaWduYWwsIHVzZVNpZ25hbCB9IGZyb20gXCJodHRwczovL2VzbS5zaC9AcHJlYWN0L3NpZ25hbHNAMi4yLjBcIjtcbmltcG9ydCB7IElucHV0TnVtYmVyIH0gZnJvbSBcIi4uL3VpL0lucHV0TnVtYmVyLnRzeFwiOyAvLyBVcGV3bmlqIHNpXHUwMTE5LCBcdTAxN0NlIFx1MDE1QmNpZVx1MDE3Q2thIGplc3QgcG9wcmF3bmFcbmltcG9ydCB7IElucHV0Q2hpcHNMaXN0IH0gZnJvbSBcIi4uL3VpL0lucHV0Q2hpcHNMaXN0LnRzeFwiO1xuaW1wb3J0IHtcbiAgdHlwZSBFeGNlbE5lc3RlZE4sXG4gIHR5cGUgRXhjZWxSZXN1bHRzLFxuICBFeGNlbFJlc3VsdFNvcnRpbmdPdXRwdXRBdFRhYmxlLFxuICBpbml0UmFuZ2VGaXJzdFN0ZXBMYXN0LFxuICBpbml0UmFuZ2VGaXJzdFN0ZXBTaXplLFxufSBmcm9tIFwiLi4vbG9naWMvY2FsY3VsYXRlRXhjZWwudHNcIjtcbmltcG9ydCAqIGFzIE1hdGhGIGZyb20gXCIuLi9sb2dpYy9tYXRoRnVuYy50c1wiO1xuaW1wb3J0IHsgUGxvdEh0bWxUYWJsZSB9IGZyb20gXCIuLi91aS9QbG90SHRtbFRhYmxlLnRzeFwiO1xuaW1wb3J0IGdlbmVyVGFibGUxIGZyb20gXCIuLi9kYXRhL2dlbmVyVGFibGUxLnRzXCI7XG5cbnR5cGUgU3RhdGVQbG90TWFwID0gTWFwPHN0cmluZywgKG51bWJlciB8IGJvb2xlYW4pW10+O1xuXG4vL2NvbnN0IHJlc3VsdE0gPSBzaWduYWw8RXhjZWxSZXN1bHRzPihuZXcgTWFwPHN0cmluZywgRXhjZWxOZXN0ZWROPigpKTtcblxuZXhwb3J0IGZ1bmN0aW9uIEFwcCgpIHtcbiAgY29uc3QgZnJvbSA9IHVzZVNpZ25hbCgxKTtcbiAgY29uc3QgdG8gPSB1c2VTaWduYWwoMTApO1xuICBjb25zdCByZXN1bHRNID0gdXNlU2lnbmFsPEV4Y2VsUmVzdWx0cz4obmV3IE1hcDxzdHJpbmcsIEV4Y2VsTmVzdGVkTj4oKSk7XG4gIGNvbnN0IHJlc3VsdFMgPSBnZW5lclRhYmxlMShpbml0UmFuZ2VGaXJzdFN0ZXBTaXplKDEsIDEsIDE1KSk7XG4gIGNvbnNvbGUubG9nKFwiUkVTX01BUFwiLCByZXN1bHRTKTtcbiAgY29uc3QgcGxvdFJvdyA9IHVzZVNpZ25hbCh0cnVlKTtcbiAgY29uc3QgcGxvdFNwbGl0ID0gdXNlU2lnbmFsKHRydWUpO1xuICBjb25zdCBwbG90U2V0ID0gdXNlU2lnbmFsPHN0cmluZ1tdPihbXSk7XG5cbiAgLypjb25zdCBwbG90TWFwID0gdXNlU2lnbmFsPFN0YXRlUGxvdE1hcD4obmV3IE1hcDxzdHJpbmcsIChudW1iZXIgfCBib29sZWFuKVtdPihcblxuICApKTsqL1xuICBjb25zdCBjYWxjdWxhdGUgPSAoKSA9PiB7XG4gICAgLy8gVXBld25paiBzaVx1MDExOSwgXHUwMTdDZSB3YXJ0b1x1MDE1QmNpIHNcdTAxMDUgbGljemJhbWkgcHJ6ZWQgcFx1MDExOXRsXHUwMTA1XG4gICAgaWYgKGlzTmFOKE51bWJlcihmcm9tLnZhbHVlKSkgfHwgaXNOYU4oTnVtYmVyKHRvLnZhbHVlKSkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJXYXJ0b1x1MDE1QmNpICdmcm9tJyBsdWIgJ3RvJyBuaWUgc1x1MDEwNSBsaWN6YmFtaS5cIik7XG4gICAgICByZXN1bHRNLnZhbHVlID0gbmV3IE1hcDxzdHJpbmcsIEV4Y2VsTmVzdGVkTj4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXN1bHRNLnZhbHVlID0gZ2VuZXJUYWJsZTEoXG4gICAgICBpbml0UmFuZ2VGaXJzdFN0ZXBMYXN0KE51bWJlcihmcm9tLnZhbHVlKSwgMSwgTnVtYmVyKHRvLnZhbHVlKSksXG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBjaGFuZ2VQb3MgPSAoKSA9PiB7XG4gICAgcGxvdFJvdy52YWx1ZSA9ICFwbG90Um93LnZhbHVlO1xuICB9O1xuICBjb25zdCBjaGFuZ2VTcGxpdCA9ICgpID0+IHtcbiAgICBwbG90U3BsaXQudmFsdWUgPSAhcGxvdFNwbGl0LnZhbHVlO1xuICB9O1xuXG4gIC8vIEhhbmRsZXIgZGxhIG9uVmFsdWVDaGFuZ2UsIGt0XHUwMEYzcnkgb2R6d2llcmNpZWRsYSB6YWNob3dhbmllIGArKGUuY3VycmVudFRhcmdldC52YWx1ZSlgXG4gIC8vIEtpZWR5IGlucHV0IGplc3QgcHVzdHksIGBlLmN1cnJlbnRUYXJnZXQudmFsdWVgIHRvIFwiXCIsIGEgYCtcIlwiYCB0byAwLlxuICAvLyBOYXN6IGBvblZhbHVlQ2hhbmdlYCBwcnpla2F6dWplIGB1bmRlZmluZWRgLCBnZHkgYHZhbHVlQXNOdW1iZXJgIHRvIE5hTiAobnAuIGRsYSBwdXN0ZWdvIGlucHV0dSkuXG4gIGNvbnN0IGhhbmRsZUZyb21DaGFuZ2UgPSAobmV3VmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCkgPT4ge1xuICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmcm9tLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyb20udmFsdWUgPSAwOyAvLyBMdWIgaW5uYSB3YXJ0b1x1MDE1Qlx1MDEwNyBkb215XHUwMTVCbG5hLCBucC4gMSwgamVcdTAxNUJsaSB0byBiYXJkemllaiBzZW5zb3duZVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVUb0NoYW5nZSA9IChuZXdWYWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgaWYgKG5ld1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRvLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvLnZhbHVlID0gMDsgLy8gTHViIGlubmEgd2FydG9cdTAxNUJcdTAxMDcgZG9teVx1MDE1QmxuYVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxtYWluPlxuICAgICAgPGgxPk1hdGVtYXR5a2EgdyBnZW5lYWxvZ2lpLjwvaDE+XG4gICAgICA8ZGl2XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgYWxpZ25JdGVtczogXCJzdHJldGNoXCIsXG4gICAgICAgICAgZ2FwOiBcIjQwcHhcIixcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IFwiMjBweFwiLFxuICAgICAgICAgIGZsZXhGbG93OiBcInJvdyBub3dyYXBcIixcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e2NhbGN1bGF0ZX1cbiAgICAgICAgICBzdHlsZT17eyBwYWRkaW5nOiBcIjAuNXJlbSAxcmVtXCIsIGZvbnRTaXplOiBcIjFyZW1cIiB9fVxuICAgICAgICA+XG4gICAgICAgICAgUG9saWN6XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8ZmllbGRzZXRcbiAgICAgICAgICBjbGFzcz1cImZpZWxkc2V0LWlucHV0cy1udW1iZXJcIlxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBib3JkZXI6IFwiM3B4IHNvbGlkICM2Yzc1N2RcIixcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI4cHhcIixcbiAgICAgICAgICAgIHBhZGRpbmc6IFwiMjBweFwiLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiBcIjBcIixcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogXCIwXCIsXG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiZmxleC1zdGFydFwiLFxuICAgICAgICAgICAgZ2FwOiBcIjQwcHhcIixcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGxlZ2VuZFxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiMwMDBcIixcbiAgICAgICAgICAgICAgY29sb3I6IFwiI2ZmZlwiLFxuICAgICAgICAgICAgICBwYWRkaW5nOiBcIjNweCA2cHhcIixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ2hvb3NlIHJhbmdlIG9mIFx1MzAxMGlcdTMwMTFcbiAgICAgICAgICA8L2xlZ2VuZD5cblxuICAgICAgICAgIDxJbnB1dE51bWJlclxuICAgICAgICAgICAgbmFtZT1cImlucHV0MVwiXG4gICAgICAgICAgICB2YWx1ZT17ZnJvbS52YWx1ZX1cbiAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e2hhbmRsZUZyb21DaGFuZ2V9XG4gICAgICAgICAgICBkZWY9ezF9XG4gICAgICAgICAgICBtaW49ezF9IC8vIGxvZzIgamVzdCB6ZGVmaW5pb3dhbnkgZGxhIGxpY3piID4gMFxuICAgICAgICAgICAgc3RlcD17MX1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiT2RcIlxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cIldhcnRvXHUwMTVCXHUwMTA3IHBvY3pcdTAxMDV0a293YSBwcnplZHppYVx1MDE0MnVcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPElucHV0TnVtYmVyXG4gICAgICAgICAgICBuYW1lPVwiaW5wdXQyXCJcbiAgICAgICAgICAgIHZhbHVlPXt0by52YWx1ZX1cbiAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e2hhbmRsZVRvQ2hhbmdlfVxuICAgICAgICAgICAgZGVmPXs3fVxuICAgICAgICAgICAgbWluPXtmcm9tLnZhbHVlID49IDEgPyBmcm9tLnZhbHVlIDogMX0gLy8gJ3RvJyBuaWUgcG93aW5ubyBieVx1MDEwNyBtbmllanN6ZSBuaVx1MDE3QyAnZnJvbSdcbiAgICAgICAgICAgIHN0ZXA9ezF9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRvXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJXYXJ0b1x1MDE1Qlx1MDEwNyBrb1x1MDE0NGNvd2EgcHJ6ZWR6aWFcdTAxNDJ1XCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2ZpZWxkc2V0PlxuICAgICAgICA8SW5wdXRDaGlwc0xpc3RcbiAgICAgICAgICBhdmFpbGFibGVWYWx1ZXM9e25ldyBNYXA8c3RyaW5nLCBudW1iZXI+KFtcbiAgICAgICAgICAgIFtcImhcIiwgMV0sXG4gICAgICAgICAgICBbXCJpXCIsIDFdLFxuICAgICAgICAgICAgW1wialwiLCAxXSxcbiAgICAgICAgICAgIC8vXCIgXCIsXG4gICAgICAgICAgICBbXCJoaVwiLCAxXSxcbiAgICAgICAgICAgIFtcImhqXCIsIDFdLFxuICAgICAgICAgICAgLy9cIiBcIixcbiAgICAgICAgICAgIFtcImtpXCIsIDFdLFxuICAgICAgICAgICAgW1wibWlcIiwgMV0sXG4gICAgICAgICAgICBbXCJsaVwiLCAxXSxcbiAgICAgICAgICAgIC8vXCIgXCIsXG4gICAgICAgICAgICBbXCJsalwiLCAxXSxcbiAgICAgICAgICAgIFtcIndqXCIsIDFdLFxuICAgICAgICAgICAgW1wia2pcIiwgMV0sXG4gICAgICAgICAgICAvL1wiIFwiLFxuICAgICAgICAgICAgW1wiaEFcIiwgMV0sXG4gICAgICAgICAgICBbXCJoWlwiLCAxXSxcbiAgICAgICAgICAgIFtcImhBWlwiLCAxXSxcbiAgICAgICAgICAgIC8vXCIgXCIsXG4gICAgICAgICAgICBbXCJraUFcIiwgMV0sXG4gICAgICAgICAgICBbXCJrakFcIiwgMV0sXG4gICAgICAgICAgICAvL1wiIFwiLFxuICAgICAgICAgICAgW1wia2laXCIsIDFdLFxuICAgICAgICAgICAgW1wia2paXCIsIDFdLFxuICAgICAgICAgICAgLy9cIiBcIixcbiAgICAgICAgICAgIFtcIj18fFwiLCAyMF0sXG4gICAgICAgICAgXSl9XG4gICAgICAgICAgZGVmYXVsdFZhbHVlcz17W1xuICAgICAgICAgICAgXCJraVwiLFxuICAgICAgICAgICAgXCJtaVwiLFxuICAgICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgICAgXCJpXCIsXG4gICAgICAgICAgICBcImhpXCIsXG4gICAgICAgICAgICBcImtpQVwiLFxuICAgICAgICAgICAgXCJraVpcIixcbiAgICAgICAgICAgIFwiPXx8XCIsXG4gICAgICAgICAgICBcImhcIixcbiAgICAgICAgICAgIFwiaEFcIixcbiAgICAgICAgICAgIFwiaFpcIixcbiAgICAgICAgICAgIFwiaEFaXCIsXG4gICAgICAgICAgICBcIj18fFwiLFxuICAgICAgICAgICAgXCJralpcIixcbiAgICAgICAgICAgIFwia2pBXCIsXG4gICAgICAgICAgICBcImhqXCIsXG4gICAgICAgICAgICBcImpcIixcbiAgICAgICAgICAgIFwibGpcIixcbiAgICAgICAgICAgIFwid2pcIixcbiAgICAgICAgICAgIFwia2pcIixcbiAgICAgICAgICBdfVxuICAgICAgICAgIHZhbHVlcz17cGxvdFNldC52YWx1ZX1cbiAgICAgICAgICB0aXRsZUF2YWlsYWJsZT1cIkRvc3RcdTAxMTlwbmU6XCJcbiAgICAgICAgICB0aXRsZVNlbGVjdGVkPVwiV3licmFuZTpcIlxuICAgICAgICAgIG9uQ2hhbmdlPXsodmFsKSA9PiB7XG4gICAgICAgICAgICBwbG90U2V0LnZhbHVlID0gdmFsO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocGxvdFNldC52YWx1ZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICBpZD1cIlBsb3RQb3NpdGlvblwiXG4gICAgICAgICAgbmFtZT1cIlBsb3RQb3NpdGlvblwiXG4gICAgICAgICAgY2hlY2tlZD17cGxvdFJvdy52YWx1ZX1cbiAgICAgICAgICBvbkNsaWNrPXtjaGFuZ2VQb3N9XG4gICAgICAgIC8+XG4gICAgICAgIDxsYWJlbCBmb3I9XCJQbG90UG9zaXRpb25cIj57cGxvdFJvdy52YWx1ZSA/IFwiUm93XCIgOiBcIkNvbFwifTwvbGFiZWw+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgaWQ9XCJQbG90U3BsaXRHZW5lcmF0aW9uXCJcbiAgICAgICAgICBuYW1lPVwiUGxvdFNwbGl0R2VuZXJhdGlvblwiXG4gICAgICAgICAgY2hlY2tlZD17cGxvdFNwbGl0LnZhbHVlfVxuICAgICAgICAgIG9uQ2xpY2s9e2NoYW5nZVNwbGl0fVxuICAgICAgICAvPlxuICAgICAgICA8bGFiZWwgZm9yPVwiUGxvdFNwbGl0R2VuZXJhdGlvblwiPlxuICAgICAgICAgIHtwbG90Um93LnZhbHVlID8gXCJzcGxpdC1oXCIgOiBcIm5vbnN0b3BcIn1cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGJyIC8+XG4gICAgICA8YnIgLz5cbiAgICAgIDxiciAvPlxuXG4gICAgICB7cmVzdWx0TS52YWx1ZS5zaXplID4gMCAmJiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPGgzPlJlenVsdGF0IG9ibGljemVcdTAxNDQ6PC9oMz5cbiAgICAgICAgICA8UGxvdEh0bWxUYWJsZVxuICAgICAgICAgICAgZGF0YT17RXhjZWxSZXN1bHRTb3J0aW5nT3V0cHV0QXRUYWJsZShcbiAgICAgICAgICAgICAgcGxvdFJvdy52YWx1ZSA/IFwiUk9XXCIgOiBcIkNPTFwiLFxuICAgICAgICAgICAgICBwbG90U2V0LnZhbHVlLFxuICAgICAgICAgICAgICByZXN1bHRNLnZhbHVlLFxuICAgICAgICAgICAgICBwbG90U3BsaXQudmFsdWUsXG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgbW9kZT17cGxvdFJvdy52YWx1ZSA/IFwiUk9XXCIgOiBcIkNPTFwifVxuICAgICAgICAgICAgY2FwdGlvbj1cIld5bmlraSBvYmxpY3plXHUwMTQ0LlwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC8+XG4gICAgICApfVxuXG4gICAgICA8cD5cbiAgICAgICAgPHVsPlxuICAgICAgICAgIDxsaT5cdTMwMTBpXHUzMDExPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwaFx1MzAxMSA9IGZsb29yKGxvZ1x1MjA4MihpKSkgfHx8IGRsYSBwcnplZHppYVx1MDE0MnUgW2ldPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwaEFcdTMwMTEgPSAyKipoIHx8fCBkbGEgcHJ6ZWR6aWFcdTAxNDJ1IFtoXTwvbGk+XG4gICAgICAgICAgPGxpPlx1MzAxMGhaXHUzMDExID0gMioqKGgrMSktMSB8fHwgZGxhIHByemVkemlhXHUwMTQydSBbaF08L2xpPlxuICAgICAgICAgIDxsaT5cdTMwMTBoQVpcdTMwMTEgPTMqMioqaC0xID0gMS41KjIqKihoKzEpLTEgfHx8IGRsYSBwcnplZHppYVx1MDE0MnUgW2hdPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwaGlcdTMwMTEgPVx1MzAxMGlcdTMwMTEgLVx1MzAxMGhBXHUzMDExPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwaGpcdTMwMTEgPVx1MzAxMGhaXHUzMDExIC1cdTMwMTBpXHUzMDExPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwalx1MzAxMSA9XHUzMDEwaEFaXHUzMDExIC1cdTMwMTBpXHUzMDExPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvcD5cbiAgICAgIDxwPlxuICAgICAgICA8dWw+XG4gICAgICAgICAgPGxpPlxuICAgICAgICAgICAgXHUzMDEwa2lcdTMwMTEgPSB3YWx1YWNqYSBkd3UtYWR5Y3puYSBsaWN6YnkgbmF0dXJhbG5laiBkb2RhdG5pZWogW2ldXG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICA8bGk+XG4gICAgICAgICAgICBcdTMwMTBralx1MzAxMSA9IHdhbHVhY2phIGR3dS1hZHljem5hIGxpY3pieSBuYXR1cmFsbmVqIGRvZGF0bmllaiBbal1cbiAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDxsaT5cdTMwMTBraUFcdTMwMTEgPSAyKipcdTMwMTBraVx1MzAxMTwvbGk+XG4gICAgICAgICAgPGxpPlx1MzAxMGtqQVx1MzAxMSA9IDIqKlx1MzAxMGtqXHUzMDExPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwbGlcdTMwMTEgPVx1MzAxMGlcdTMwMTEvXHUzMDEwa2lBXHUzMDExPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwbGpcdTMwMTEgPVx1MzAxMGpcdTMwMTEvXHUzMDEwa2pBXHUzMDExPC9saT5cbiAgICAgICAgICA8bGk+XHUzMDEwbVx1MzAxMSA9XHUzMDEwbGlcdTMwMTErMTwvbGk+XG4gICAgICAgICAgPGxpPlx1MzAxMHdcdTMwMTEgPVx1MzAxMGxqXHUzMDExKzI8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9wPlxuICAgIDwvbWFpbj5cbiAgKTtcbn1cbiIsICIvKiogQGpzeFJ1bnRpbWUgYXV0b21hdGljICovXG4vKiogQGpzeEltcG9ydFNvdXJjZSBodHRwczovL2VzbS5zaC9wcmVhY3RAMTAuMjYuOCAqL1xuXG5pbXBvcnQge1xuICB1c2VDYWxsYmFjayxcbiAgdXNlRWZmZWN0LFxuICB1c2VSZWYsXG59IGZyb20gXCJodHRwczovL2VzbS5zaC9wcmVhY3RAMTAuMjYuOC9ob29rc1wiO1xuaW1wb3J0IHsgSlNYIH0gZnJvbSBcImh0dHBzOi8vZXNtLnNoL3ByZWFjdEAxMC4yNi44XCI7XG5cbi8vIFphd2FydG9cdTAxNUJcdTAxMDcgU1ZHIGRsYSBkb215XHUwMTVCbG55Y2ggaWtvbiArLy0gKGplXHUwMTVCbGkgemRlY3lkdWplc3ogc2lcdTAxMTkgamUgbmFrXHUwMTQyYWRhXHUwMTA3KVxuLy8gTmEgcmF6aWUgbmllIHNcdTAxMDUgb25lIGF1dG9tYXR5Y3puaWUgcmVuZGVyb3dhbmUgdyB0ZWogd2Vyc2ppLFxuLy8gcG9uaWV3YVx1MDE3QyB6YWtcdTAxNDJhZGFtLCBcdTAxN0NlIFR3XHUwMEYzaiBnXHUwMTQyXHUwMEYzd255IFNWRyBkZWZpbml1amUgd3lnbFx1MDEwNWQgcHJ6eWNpc2tcdTAwRjN3LlxuLy8gSmVcdTAxNUJsaSBjaGNlc3ogamUgZG9kYVx1MDEwNywgbXVzaXN6IHByenl3clx1MDBGM2NpXHUwMTA3IGxvZ2lrXHUwMTE5IGljaCByZW5kZXJvd2FuaWEgeiB0cmFuc2Zvcm1hY2phbWkuXG5jb25zdCBEZWZhdWx0RGVjcmVtZW50SWNvblN2Z0NvbnRlbnQgPSAoXG4gIDxyZWN0IHg9XCI1XCIgeT1cIjExXCIgd2lkdGg9XCIxNFwiIGhlaWdodD1cIjJcIiByeD1cIjFcIiAvPlxuKTtcbmNvbnN0IERlZmF1bHRJbmNyZW1lbnRJY29uU3ZnQ29udGVudCA9IChcbiAgPD5cbiAgICA8cmVjdCB4PVwiMTFcIiB5PVwiNVwiIHdpZHRoPVwiMlwiIGhlaWdodD1cIjE0XCIgcng9XCIxXCIgLz5cbiAgICA8cmVjdCB4PVwiNVwiIHk9XCIxMVwiIHdpZHRoPVwiMTRcIiBoZWlnaHQ9XCIyXCIgcng9XCIxXCIgLz5cbiAgPC8+XG4pO1xuXG5leHBvcnQgaW50ZXJmYWNlIElucHV0TnVtYmVyUHJvcHMge1xuICB2YWx1ZT86IHN0cmluZyB8IG51bWJlcjtcbiAgZGVmYXVsdFZhbHVlPzogc3RyaW5nIHwgbnVtYmVyO1xuICBkZWY/OiBzdHJpbmcgfCBudW1iZXI7XG4gIG1pbj86IHN0cmluZyB8IG51bWJlcjtcbiAgbWF4Pzogc3RyaW5nIHwgbnVtYmVyO1xuICBzdGVwPzogc3RyaW5nIHwgbnVtYmVyO1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGlkPzogc3RyaW5nO1xuICByZWFkT25seT86IGJvb2xlYW47XG4gIG9uQ2hhbmdlPzogKGV2ZW50OiBKU1guVGFyZ2V0ZWRFdmVudDxIVE1MSW5wdXRFbGVtZW50LCBFdmVudD4pID0+IHZvaWQ7XG4gIG9uVmFsdWVDaGFuZ2U/OiAobmV3VmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCwgbmFtZT86IHN0cmluZykgPT4gdm9pZDtcbiAgcmF0aW9TSVpFPzogbnVtYmVyO1xuICB3cmFwcGVyQ2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdmdDbGFzc05hbWU/OiBzdHJpbmc7XG4gIGlucHV0Q2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdHlsZT86IEpTWC5DU1NQcm9wZXJ0aWVzO1xuICBzZWxlY3RCdXR0b25TdHlsZT86IEpTWC5DU1NQcm9wZXJ0aWVzO1xuICBpbmNyZW1lbnRCdXR0b25TdHlsZT86IEpTWC5DU1NQcm9wZXJ0aWVzO1xuICBkZWNyZW1lbnRCdXR0b25TdHlsZT86IEpTWC5DU1NQcm9wZXJ0aWVzO1xuICBpbnB1dEFyZWFTdHlsZT86IEpTWC5DU1NQcm9wZXJ0aWVzO1xuICBzZWxlY3RCdXR0b25GaWxsPzogc3RyaW5nO1xuICBpbmNyZW1lbnRCdXR0b25GaWxsPzogc3RyaW5nO1xuICBkZWNyZW1lbnRCdXR0b25GaWxsPzogc3RyaW5nO1xuICBpbnB1dEFyZWFSZWN0RmlsbD86IHN0cmluZztcbiAgaW5wdXRBcmVhQm9yZGVyRmlsbD86IHN0cmluZztcbiAgLy8gaWNvbkZpbGw/OiBzdHJpbmc7IC8vIEplXHUwMTVCbGkgYlx1MDExOWR6aWVzeiB1XHUwMTdDeXdhXHUwMTQyIG9zb2JueWNoIGlrb24gKy8tXG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuY29uc3Qgc3ZnTGF5b3V0RGF0YSA9IHtcbiAgYmFzZVZpZXdCb3hXaWR0aDogMTc0LFxuICBiYXNlVmlld0JveEhlaWdodDogNzIsXG4gIGJ1dHRvbnM6IHtcbiAgICBjaG9vc2U6IHsgLy8gWm1pZW5pb25vIHogJ3NlbGVjZWN0JyBuYSAnY2hvb3NlJyBkbGEgc3BcdTAwRjNqbm9cdTAxNUJjaSB6IFR3b2ltIEhUTUxcbiAgICAgIG5hbWU6IFwiYnRuLWNob29zZVwiLFxuICAgICAgcGF0aHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGRhdGFOYW1lOiBcImJ0bi1maWxsXCIsXG4gICAgICAgICAgZDogXCJNMTE1Ljc1LDcxLjYyYy0xMC4wMywwLTE5LjkzLTEuNjItMjguNjMtNC42N2wtLjEyLS4wNC0uMTIuMDRjLTguNywzLjA2LTE4LjU5LDQuNjctMjguNjMsNC42Ny0xMy4wNiwwLTI1LjgxLTIuNzUtMzYuMDItNy43NWwyNi45Ni0xNS4yMWg3NS42MWwyNi45NiwxNS4yMWMtMTAuMiw1LTIyLjk2LDcuNzUtMzYuMDIsNy43NVpcIixcbiAgICAgICAgICBkZWZhdWx0RmlsbDogXCIjOTE5MTkxXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRhTmFtZTogXCJidG4tYm9yZGVyLWZpbGxcIixcbiAgICAgICAgICBkOiBcIk0xMjQuNzEsNDkuMDRsMjYuMjUsMTQuODFjLTEwLjA0LDQuNzgtMjIuNDgsNy40LTM1LjIxLDcuNC05Ljk5LDAtMTkuODQtMS42MS0yOC41LTQuNjVsLS4yNS0uMDktLjI1LjA5Yy04LjY2LDMuMDQtMTguNTEsNC42NS0yOC41LDQuNjUtMTIuNzMsMC0yNS4xNi0yLjYyLTM1LjIxLTcuNGwyNi4yNS0xNC44MWg3NS40MU0xMjQuOSw0OC4yOUg0OS4xbC0yNy42NiwxNS42YzEwLjAzLDUuMDYsMjIuODUsOC4xMSwzNi44Miw4LjExLDEwLjQ2LDAsMjAuMjctMS43MSwyOC43NS00LjY5LDguNDgsMi45OCwxOC4yOSw0LjY5LDI4Ljc1LDQuNjksMTMuOTcsMCwyNi43OC0zLjA0LDM2LjgyLTguMTFsLTI3LjY2LTE1LjZoMFpcIixcbiAgICAgICAgICBkZWZhdWx0RmlsbDpcbiAgICAgICAgICAgIFwiIzUwNTA1MFwiLCAvKiBLb2xvciBkbGEgb2JyeXN1L2RydWdpZWogd2Fyc3R3eSwgZG9zdG9zdWogKi9cbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICBpbmNyZW1lbnQ6IHtcbiAgICAgIG5hbWU6IFwiYnRuLWluY3JlbWVudFwiLFxuICAgICAgcGF0aHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGRhdGFOYW1lOiBcImJ0bi1maWxsXCIsXG4gICAgICAgICAgZDogXCJNMTI3LjM4LDQzLjUxVjEuMWMyNi44MywzLjM3LDQ2LjI1LDE4LjAxLDQ2LjI1LDM0LjksMCw5LjE5LTUuNjgsMTcuOTEtMTYuMDEsMjQuNTdsLTMwLjI0LTE3LjA2WlwiLFxuICAgICAgICAgIGRlZmF1bHRGaWxsOiBcIiMyMTU5N2ZcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRhdGFOYW1lOiBcImJ0bi1ib3JkZXItZmlsbFwiLFxuICAgICAgICAgIGQ6IFwiTTEyNy43NSwxLjUzYzI2LjQyLDMuNDUsNDUuNSwxNy44Niw0NS41LDM0LjQ3LDAsOS01LjU1LDE3LjU2LTE1LjY1LDI0LjEzbC0yOS44NS0xNi44NFYxLjUzTTEyNywuNjh2NDMuMDVsMzAuNjMsMTcuMjhjMTAuMTMtNi40OCwxNi4zNy0xNS4yOSwxNi4zNy0yNS4wMSwwLTE3LjUtMjAuMjEtMzIuMDgtNDctMzUuMzJoMFpcIixcbiAgICAgICAgICBkZWZhdWx0RmlsbDogXCIjMTA0MDYwXCIsIC8qIENpZW1uaWVqc3p5IGRsYSBvYnJ5c3U/IERvc3Rvc3VqICovXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgaWNvbkFuY2hvclg6IDE1MCwgLy8gMTUwcHggdyBwcmF3byAodyBzeXN0ZW1pZSB2aWV3Qm94IDE3NHg3MilcbiAgICAgIGljb25BbmNob3JZOiAzMCwgLy8gMzBweCB3IGRcdTAwRjNcdTAxNDIgKHcgc3lzdGVtaWUgdmlld0JveCAxNzR4NzIpXG4gICAgfSxcbiAgICBkZWNyZW1lbnQ6IHtcbiAgICAgIG5hbWU6IFwiYnRuLWRlY3JlbWVudFwiLFxuICAgICAgcGF0aHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGRhdGFOYW1lOiBcImJ0bi1maWxsXCIsXG4gICAgICAgICAgZDogXCJNMTYuMzgsNjAuNTdDNi4wNiw1My45MS4zOCw0NS4xOS4zOCwzNiwuMzgsMTkuMTEsMTkuOCw0LjQ3LDQ2LjYyLDEuMXY0Mi40MWwtMzAuMjQsMTcuMDZaXCIsXG4gICAgICAgICAgZGVmYXVsdEZpbGw6IFwiI2IyMTAxMFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGF0YU5hbWU6IFwiYnRuLWJvcmRlci1maWxsXCIsXG4gICAgICAgICAgZDogXCJNNDYuMjUsMS41M3Y0MS43Nmgwcy0yOS44NSwxNi44NC0yOS44NSwxNi44NEM2LjMsNTMuNTYuNzUsNDUsLjc1LDM2LC43NSwxOS4zOSwxOS44Myw0Ljk3LDQ2LjI1LDEuNTNNNDcsLjY4QzIwLjIxLDMuOTIsMCwxOC41LDAsMzZjMCw5LjcyLDYuMjQsMTguNTMsMTYuMzcsMjUuMDFsMzAuNjMtMTcuMjhWLjY4aDBaXCIsXG4gICAgICAgICAgZGVmYXVsdEZpbGw6IFwiIzgwMDAwMFwiLCAvKiBDaWVtbmllanN6eSBkbGEgb2JyeXN1PyBEb3N0b3N1aiAqL1xuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGljb25BbmNob3JYOiAyNSwgLy8gMjBweCB3IHByYXdvICh3IHN5c3RlbWllIHZpZXdCb3ggMTc0eDcyKVxuICAgICAgaWNvbkFuY2hvclk6IDMwLCAvLyAzMHB4IHcgZFx1MDBGM1x1MDE0MiAodyBzeXN0ZW1pZSB2aWV3Qm94IDE3NHg3MilcbiAgICB9LFxuICB9LFxuICBpbnB1dEFyZWE6IHtcbiAgICBuYW1lOiBcImlucHV0XCIsXG4gICAgcmVjdDoge1xuICAgICAgeDogNTIuMzgsXG4gICAgICB5OiAwLjM4LFxuICAgICAgd2lkdGg6IDY5LjI1LFxuICAgICAgaGVpZ2h0OiA0Mi41NCxcbiAgICAgIGRlZmF1bHRGaWxsOiBcIiNmZmZcIixcbiAgICB9LFxuICAgIGJvcmRlclBhdGg6IHtcbiAgICAgIGQ6IFwiTTEyMS4yNS43NXY0MS43OUg1Mi43NVYuNzVoNjguNU0xMjIsMEg1MnY0My4yOWg3MFYwaDBaXCIsXG4gICAgICBkZWZhdWx0RmlsbDogXCIjMzMzXCIsXG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IENPTlRBSU5FUl9DTEFTU19OQU1FID0gXCJpbnB1dG51bWJlci1jb250YWluZXJcIjtcbmNvbnN0IFNWR19DTEFTU19OQU1FID0gXCJpbnB1dG51bWJlci1zdmdcIjtcbmNvbnN0IFNWR19CVVRUT05fQ0xBU1NfTkFNRSA9IFwiaW5wdXRudW1iZXItc3ZnLWJ1dHRvblwiOyAvLyBVXHUwMTdDeXdhbmUgdyBUd29pbSBIVE1MXG5jb25zdCBIVE1MX0lOUFVUX0NMQVNTX05BTUUgPSBcImlucHV0bnVtYmVyLWh0bWwtaW5wdXRcIjsgLy8gVVx1MDE3Q3l3YW5lIHcgVHdvaW0gSFRNTFxuXG5leHBvcnQgZnVuY3Rpb24gSW5wdXROdW1iZXIocHJvcHM6IElucHV0TnVtYmVyUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZSxcbiAgICBkZWZhdWx0VmFsdWUsXG4gICAgZGVmID0gMSxcbiAgICBtaW4sXG4gICAgbWF4LFxuICAgIHN0ZXAgPSAxLFxuICAgIHBsYWNlaG9sZGVyLFxuICAgIHJlcXVpcmVkLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgbmFtZSxcbiAgICBpZCxcbiAgICByZWFkT25seSA9IGZhbHNlLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uVmFsdWVDaGFuZ2UsXG4gICAgcmF0aW9TSVpFID0gMSxcbiAgICB3cmFwcGVyQ2xhc3NOYW1lLFxuICAgIHN2Z0NsYXNzTmFtZSxcbiAgICBpbnB1dENsYXNzTmFtZSxcbiAgICBzdHlsZSxcbiAgICBzZWxlY3RCdXR0b25TdHlsZSxcbiAgICBpbmNyZW1lbnRCdXR0b25TdHlsZSxcbiAgICBkZWNyZW1lbnRCdXR0b25TdHlsZSxcbiAgICBpbnB1dEFyZWFTdHlsZSxcbiAgICBzZWxlY3RCdXR0b25GaWxsLFxuICAgIGluY3JlbWVudEJ1dHRvbkZpbGwsXG4gICAgZGVjcmVtZW50QnV0dG9uRmlsbCxcbiAgICBpbnB1dEFyZWFSZWN0RmlsbCxcbiAgICBpbnB1dEFyZWFCb3JkZXJGaWxsLFxuICAgIC8vIGljb25GaWxsID0gXCJ3aGl0ZVwiLCAvLyBKZVx1MDE1QmxpIGJcdTAxMTlkemllc3ogcmVuZGVyb3dhXHUwMTA3IG9zb2JuZSBpa29ueSArLy1cbiAgICAuLi5yZXN0RGl2UHJvcHNcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGlucHV0UmVmID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIC8vIEluaWNqYWxpemFjamEgd2FydG9cdTAxNUJjaSBpbnB1dGEgcHJ6eSBtb250b3dhbml1IGx1YiB6bWlhbmllIGRlZmF1bHRWYWx1ZS92YWx1ZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50KSB7XG4gICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbnB1dFJlZi5jdXJyZW50LnZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5wdXRSZWYuY3VycmVudC52YWx1ZSA9IFN0cmluZyhkZWZhdWx0VmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRSZWYuY3VycmVudC52YWx1ZSA9IFwiXCI7IC8vIEphd25lIHVzdGF3aWVuaWUgbmEgcHVzdHkgc3RyaW5nLCBqZVx1MDE1QmxpIGJyYWsgd2FydG9cdTAxNUJjaVxuICAgICAgfVxuICAgIH1cbiAgfSwgW3ZhbHVlLCBkZWZhdWx0VmFsdWVdKTtcblxuICBjb25zdCBoYW5kbGVTdGVwID0gdXNlQ2FsbGJhY2soKGRpcmVjdGlvbjogXCJ1cFwiIHwgXCJkb3duXCIpID0+IHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiAhZGlzYWJsZWQgJiYgIXJlYWRPbmx5KSB7XG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBcInVwXCIpIGlucHV0UmVmLmN1cnJlbnQuc3RlcFVwKCk7XG4gICAgICBlbHNlIGlucHV0UmVmLmN1cnJlbnQuc3RlcERvd24oKTtcblxuICAgICAgLy8gU3ltdWxhY2phIHpkYXJ6ZW5pYSBpbnB1dCwgYWJ5IHd5d29cdTAxNDJhXHUwMTA3IGhhbmRsZUlucHV0Q2hhbmdlXG4gICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudChcImlucHV0XCIsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KTtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuICB9LCBbZGlzYWJsZWQsIHJlYWRPbmx5XSk7XG5cbiAgY29uc3QgaGFuZGxlRGVjcmVtZW50ID0gdXNlQ2FsbGJhY2soKCkgPT4gaGFuZGxlU3RlcChcImRvd25cIiksIFtoYW5kbGVTdGVwXSk7XG4gIGNvbnN0IGhhbmRsZUluY3JlbWVudCA9IHVzZUNhbGxiYWNrKCgpID0+IGhhbmRsZVN0ZXAoXCJ1cFwiKSwgW2hhbmRsZVN0ZXBdKTtcblxuICBjb25zdCBoYW5kbGVDaG9vc2VDbGljayA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiAhZGlzYWJsZWQgJiYgIXJlYWRPbmx5KSB7XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IGRlZiA/PyAxOyAvLyBKYWsgdyBUd29pbSBKU1xuICAgICAgaW5wdXRSZWYuY3VycmVudC52YWx1ZSA9IFN0cmluZyhuZXdWYWx1ZSk7XG5cbiAgICAgIC8vIFJcdTAxMTljem5lIHd5d29cdTAxNDJhbmllIGxvZ2lraSB6bWlhbnkgd2FydG9cdTAxNUJjaVxuICAgICAgaWYgKG9uVmFsdWVDaGFuZ2UpIG9uVmFsdWVDaGFuZ2UobmV3VmFsdWUsIG5hbWUpO1xuICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50KFwiY2hhbmdlXCIsIHtcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICB9KSBhcyB1bmtub3duIGFzIEpTWC5UYXJnZXRlZEV2ZW50PEhUTUxJbnB1dEVsZW1lbnQsIEV2ZW50PjtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCBcInRhcmdldFwiLCB7XG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiBpbnB1dFJlZi5jdXJyZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCBcImN1cnJlbnRUYXJnZXRcIiwge1xuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogaW5wdXRSZWYuY3VycmVudCxcbiAgICAgICAgfSk7XG4gICAgICAgIG9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKFwiQ2hvb3NlIGJ1dHRvbiBjbGlja2VkLCB2YWx1ZSBzZXQgdG8gMVwiKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlZCwgcmVhZE9ubHksIG5hbWUsIG9uVmFsdWVDaGFuZ2UsIG9uQ2hhbmdlXSk7XG5cbiAgLy8gPT09IFBPQ1pcdTAxMDRURUsgREVGSU5JQ0pJIGhhbmRsZUlucHV0Q2hhbmdlID09PVxuICBjb25zdCBoYW5kbGVJbnB1dENoYW5nZSA9IChlOiBKU1guVGFyZ2V0ZWRFdmVudDxIVE1MSW5wdXRFbGVtZW50LCBFdmVudD4pID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCByYXdWYWx1ZSA9IHRhcmdldC52YWx1ZTtcbiAgICBsZXQgbnVtZXJpY1ZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgICBpZiAocmF3VmFsdWUgPT09IFwiXCIpIHtcbiAgICAgIG51bWVyaWNWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3ByXHUwMEYzYnVqIHNwYXJzb3dhXHUwMTA3IGpha28gbGljemJcdTAxMTk7IHBhcnNlRmxvYXQgamVzdCBiYXJkemllaiBlbGFzdHljem55XG4gICAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUZsb2F0KHJhd1ZhbHVlKTtcbiAgICAgIG51bWVyaWNWYWx1ZSA9IGlzTmFOKHBhcnNlZCkgPyB1bmRlZmluZWQgOiBwYXJzZWQ7XG4gICAgfVxuXG4gICAgaWYgKG9uVmFsdWVDaGFuZ2UpIHtcbiAgICAgIG9uVmFsdWVDaGFuZ2UobnVtZXJpY1ZhbHVlLCBuYW1lKTtcbiAgICB9XG4gICAgLy8gSmVcdTAxNUJsaSB1XHUwMTdDeXRrb3duaWsgcHJ6ZWthemFcdTAxNDIgd1x1MDE0MmFzbnkgb25DaGFuZ2UsIHRlXHUwMTdDIGdvIHd5d29cdTAxNDJhalxuICAgIC8vIFRvIHpkYXJ6ZW5pZSBcImlucHV0XCIgeiBlbGVtZW50dSBIVE1MXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShlKTtcbiAgICB9XG4gIH07XG4gIC8vID09PSBLT05JRUMgREVGSU5JQ0pJIGhhbmRsZUlucHV0Q2hhbmdlID09PVxuXG4gIGNvbnN0IGNvbnRhaW5lcldpZHRoID0gc3ZnTGF5b3V0RGF0YS5iYXNlVmlld0JveFdpZHRoICogcmF0aW9TSVpFO1xuICBjb25zdCBjb250YWluZXJIZWlnaHQgPSBzdmdMYXlvdXREYXRhLmJhc2VWaWV3Qm94SGVpZ2h0ICogcmF0aW9TSVpFO1xuXG4gIC8vIFN0eWxlIGRsYSBuYVx1MDE0Mm9cdTAxN0NvbmVnbyBpbnB1dHUgSFRNTCwgc2thbG93YW5lIHByemV6IHJhdGlvU0laRVxuICBjb25zdCBodG1sSW5wdXRTdHlsZTogSlNYLkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICBsZWZ0OiBgJHtzdmdMYXlvdXREYXRhLmlucHV0QXJlYS5yZWN0LnggKiByYXRpb1NJWkV9cHhgLFxuICAgIHRvcDogYCR7c3ZnTGF5b3V0RGF0YS5pbnB1dEFyZWEucmVjdC55ICogcmF0aW9TSVpFfXB4YCxcbiAgICB3aWR0aDogYCR7c3ZnTGF5b3V0RGF0YS5pbnB1dEFyZWEucmVjdC53aWR0aCAqIHJhdGlvU0laRX1weGAsXG4gICAgaGVpZ2h0OiBgJHtzdmdMYXlvdXREYXRhLmlucHV0QXJlYS5yZWN0LmhlaWdodCAqIHJhdGlvU0laRX1weGAsXG4gICAgYm9yZGVyOiBcIm5vbmVcIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogXCIjMzMzXCIsXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIGZvbnRTaXplOiBgJHtNYXRoLm1heCg4LCAxOCAqIHJhdGlvU0laRSl9cHhgLCAvLyBEb3N0b3N1aiBjemNpb25rXHUwMTE5XG4gICAgb3V0bGluZTogXCJub25lXCIsXG4gICAgcGFkZGluZzogYDAgJHtNYXRoLm1heCgxLCAyICogcmF0aW9TSVpFKX1weGAsXG4gICAgbWFyZ2luOiAwLFxuICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgTW96QXBwZWFyYW5jZTogXCJ0ZXh0ZmllbGRcIixcbiAgICBXZWJraXRBcHBlYXJhbmNlOiBcIm5vbmVcIixcbiAgICBhcHBlYXJhbmNlOiBcIm5vbmVcIixcbiAgICB6SW5kZXg6IDIsXG4gIH07XG5cbiAgLy8gUm96bWlhciBpa29uICsvLS4gWmFcdTAxNDJcdTAwRjNcdTAxN0NteSwgXHUwMTdDZSBvcnlnaW5hbG5lIGlrb255IHNcdTAxMDUgMjR4MjQuXG4gIC8vIENoY2VteSBqZSBwcnplc2thbG93YVx1MDEwNywgYWJ5IHBhc293YVx1MDE0MnkgZG8gcHJ6eWNpc2tcdTAwRjN3LlxuICAvLyBQcnp5a1x1MDE0MmFkb3dvLCBuaWVjaCB6YWptdWpcdTAxMDUgb2tvXHUwMTQybyA1MCUgd3lzb2tvXHUwMTVCY2kgcHJ6eWNpc2t1ICh3IGplZG5vc3RrYWNoIHZpZXdCb3gpXG4gIGNvbnN0IGljb25WaWV3Qm94U2l6ZSA9IDI0OyAvLyBPcnlnaW5hbG55IHJvem1pYXIgdmlld0JveCBpa29uICsvLVxuICBjb25zdCB0YXJnZXRJY29uSGVpZ2h0SW5TdmdVbml0cyA9IHN2Z0xheW91dERhdGEuYmFzZVZpZXdCb3hIZWlnaHQgKiAwLjI1ICpcbiAgICAocmF0aW9TSVpFID4gMC41ID8gMSA6IHJhdGlvU0laRSAqIDIpOyAvLyBucC4gMjUlIHd5c29rb1x1MDE1QmNpIGNhXHUwMTQyZWdvIGtvbXBvbmVudHVcbiAgY29uc3QgaWNvbkFjdHVhbFNjYWxlID0gMS41ICogKHRhcmdldEljb25IZWlnaHRJblN2Z1VuaXRzIC8gaWNvblZpZXdCb3hTaXplKTtcblxuICBsZXQgZGlzcGxheVZhbHVlOiBzdHJpbmcgPSBcIlwiOyAvLyBJbnB1dCB2YWx1ZSB6YXdzemUgamFrbyBzdHJpbmdcbiAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICBkaXNwbGF5VmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICB9IGVsc2UgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGlzcGxheVZhbHVlID0gU3RyaW5nKGRlZmF1bHRWYWx1ZSk7XG4gIH1cblxuICBjb25zdCBjb21tb25TdmdCdXR0b25TdHlsZTogSlNYLkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgY3Vyc29yOiBkaXNhYmxlZCB8fCByZWFkT25seSA/IFwiZGVmYXVsdFwiIDogXCJwb2ludGVyXCIsXG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2Ake0NPTlRBSU5FUl9DTEFTU19OQU1FfSAke3dyYXBwZXJDbGFzc05hbWUgfHwgXCJcIn1gfVxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgd2lkdGg6IGAke2NvbnRhaW5lcldpZHRofXB4YCxcbiAgICAgICAgaGVpZ2h0OiBgJHtjb250YWluZXJIZWlnaHR9cHhgLFxuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgLi4uc3R5bGUsXG4gICAgICB9fVxuICAgICAgey4uLnJlc3REaXZQcm9wc31cbiAgICA+XG4gICAgICA8c3ZnXG4gICAgICAgIGNsYXNzTmFtZT17YCR7U1ZHX0NMQVNTX05BTUV9ICR7c3ZnQ2xhc3NOYW1lIHx8IFwiXCJ9YH1cbiAgICAgICAgZGF0YS1uYW1lPVwiaW5wdXQtbnVtYmVyXCIgLy8gWiBUd29qZWdvIEhUTUxcbiAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgIHZpZXdCb3g9e2AwIDAgJHtzdmdMYXlvdXREYXRhLmJhc2VWaWV3Qm94V2lkdGh9ICR7c3ZnTGF5b3V0RGF0YS5iYXNlVmlld0JveEhlaWdodH1gfVxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB9fVxuICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgPlxuICAgICAgICB7LyogR3J1cGEgXCJDaG9vc2UvU2VsZWN0XCIgKi99XG4gICAgICAgIDxnXG4gICAgICAgICAgY2xhc3NOYW1lPXtTVkdfQlVUVE9OX0NMQVNTX05BTUV9IC8vIEtsYXNhIHogVHdvamVnbyBIVE1MXG4gICAgICAgICAgZGF0YS1uYW1lPXtzdmdMYXlvdXREYXRhLmJ1dHRvbnMuY2hvb3NlLm5hbWV9IC8vIGRhdGEtbmFtZSB6IFR3b2plZ28gSFRNTFxuICAgICAgICAgIG9uQ2xpY2s9eyFkaXNhYmxlZCA/IGhhbmRsZUNob29zZUNsaWNrIDogdW5kZWZpbmVkfVxuICAgICAgICAgIHN0eWxlPXt7IC4uLmNvbW1vblN2Z0J1dHRvblN0eWxlLCAuLi4oc2VsZWN0QnV0dG9uU3R5bGUgfHwge30pIH19XG4gICAgICAgICAgcG9pbnRlckV2ZW50cz17ZGlzYWJsZWQgPyBcIm5vbmVcIiA6IFwiYXV0b1wifVxuICAgICAgICA+XG4gICAgICAgICAge3N2Z0xheW91dERhdGEuYnV0dG9ucy5jaG9vc2UucGF0aHMubWFwKChwLCBpKSA9PiAoXG4gICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICBrZXk9e2BjaG9vc2UtcGF0aC0ke2l9YH1cbiAgICAgICAgICAgICAgZGF0YS1uYW1lPXtwLmRhdGFOYW1lfVxuICAgICAgICAgICAgICBkPXtwLmR9XG4gICAgICAgICAgICAgIGZpbGw9e3NlbGVjdEJ1dHRvbkZpbGwgfHwgcC5kZWZhdWx0RmlsbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZz5cblxuICAgICAgICB7LyogR3J1cGEgXCJJbnB1dCBBcmVhXCIgKi99XG4gICAgICAgIDxnXG4gICAgICAgICAgZGF0YS1uYW1lPXtzdmdMYXlvdXREYXRhLmlucHV0QXJlYS5uYW1lfVxuICAgICAgICAgIHN0eWxlPXtpbnB1dEFyZWFTdHlsZSB8fCB7fX1cbiAgICAgICAgPlxuICAgICAgICAgIDxyZWN0XG4gICAgICAgICAgICB4PXtzdmdMYXlvdXREYXRhLmlucHV0QXJlYS5yZWN0Lnh9XG4gICAgICAgICAgICB5PXtzdmdMYXlvdXREYXRhLmlucHV0QXJlYS5yZWN0Lnl9XG4gICAgICAgICAgICB3aWR0aD17c3ZnTGF5b3V0RGF0YS5pbnB1dEFyZWEucmVjdC53aWR0aH1cbiAgICAgICAgICAgIGhlaWdodD17c3ZnTGF5b3V0RGF0YS5pbnB1dEFyZWEucmVjdC5oZWlnaHR9XG4gICAgICAgICAgICBmaWxsPXtpbnB1dEFyZWFSZWN0RmlsbCB8fCBzdmdMYXlvdXREYXRhLmlucHV0QXJlYS5yZWN0LmRlZmF1bHRGaWxsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIGQ9e3N2Z0xheW91dERhdGEuaW5wdXRBcmVhLmJvcmRlclBhdGguZH1cbiAgICAgICAgICAgIGZpbGw9e2lucHV0QXJlYUJvcmRlckZpbGwgfHxcbiAgICAgICAgICAgICAgc3ZnTGF5b3V0RGF0YS5pbnB1dEFyZWEuYm9yZGVyUGF0aC5kZWZhdWx0RmlsbH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2c+XG5cbiAgICAgICAgey8qIEdydXBhIFwiRGVjcmVtZW50XCIgKi99XG4gICAgICAgIDxnXG4gICAgICAgICAgY2xhc3NOYW1lPXtTVkdfQlVUVE9OX0NMQVNTX05BTUV9XG4gICAgICAgICAgZGF0YS1uYW1lPXtzdmdMYXlvdXREYXRhLmJ1dHRvbnMuZGVjcmVtZW50Lm5hbWV9XG4gICAgICAgICAgb25DbGljaz17IWRpc2FibGVkICYmICFyZWFkT25seSA/IGhhbmRsZURlY3JlbWVudCA6IHVuZGVmaW5lZH1cbiAgICAgICAgICBzdHlsZT17eyAuLi5jb21tb25TdmdCdXR0b25TdHlsZSwgLi4uKGRlY3JlbWVudEJ1dHRvblN0eWxlIHx8IHt9KSB9fVxuICAgICAgICAgIHBvaW50ZXJFdmVudHM9e2Rpc2FibGVkIHx8IHJlYWRPbmx5ID8gXCJub25lXCIgOiBcImF1dG9cIn1cbiAgICAgICAgPlxuICAgICAgICAgIHtzdmdMYXlvdXREYXRhLmJ1dHRvbnMuZGVjcmVtZW50LnBhdGhzLm1hcCgocCwgaSkgPT4gKFxuICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAga2V5PXtgZGVjLXBhdGgtJHtpfWB9XG4gICAgICAgICAgICAgIGRhdGEtbmFtZT17cC5kYXRhTmFtZX1cbiAgICAgICAgICAgICAgZD17cC5kfVxuICAgICAgICAgICAgICBmaWxsPXtkZWNyZW1lbnRCdXR0b25GaWxsIHx8IHAuZGVmYXVsdEZpbGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpfVxuICAgICAgICAgIHsvKiBKZVx1MDE1QmxpIGNoY2VzeiBkb2RhXHUwMTA3IGlrb25cdTAxMTkgU1ZHIFwiLVwiIG5hIHR5bSBrc3p0YVx1MDE0MmNpZSwgenJcdTAwRjNiIHRvIHR1dGFqLCBucC46ICovfVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8qPGcgdHJhbnNmb3JtPVwidHJhbnNsYXRlKFggWSkgc2NhbGUoUylcIj5cbiAgICAgICAgICAgIHtEZWZhdWx0RGVjcmVtZW50SWNvblN2Z0NvbnRlbnR9XG4gICAgICAgICAgPC9nPiovXG4gICAgICAgICAgfVxuICAgICAgICAgIHsvKiBJa29uYSBEZWNyZW1lbnQgKC0pICovfVxuICAgICAgICAgIDxnXG4gICAgICAgICAgICB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoJHtzdmdMYXlvdXREYXRhLmJ1dHRvbnMuZGVjcmVtZW50Lmljb25BbmNob3JYfSwgJHtzdmdMYXlvdXREYXRhLmJ1dHRvbnMuZGVjcmVtZW50Lmljb25BbmNob3JZfSkgc2NhbGUoJHtpY29uQWN0dWFsU2NhbGV9KSB0cmFuc2xhdGUoLSR7XG4gICAgICAgICAgICAgIGljb25WaWV3Qm94U2l6ZSAvIDJcbiAgICAgICAgICAgIH0sIC0ke2ljb25WaWV3Qm94U2l6ZSAvIDJ9KWB9XG4gICAgICAgICAgICBzdHlsZT17eyBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIiB9fSAvLyBJa29ueSBuaWUgcG93aW5ueSBwcnplY2h3eXR5d2FcdTAxMDcga2xpa25pXHUwMTE5XHUwMTA3XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICB2aWV3Qm94PXtgMCAwICR7aWNvblZpZXdCb3hTaXplfSAke2ljb25WaWV3Qm94U2l6ZX1gfVxuICAgICAgICAgICAgICB3aWR0aD17aWNvblZpZXdCb3hTaXplfVxuICAgICAgICAgICAgICBoZWlnaHQ9e2ljb25WaWV3Qm94U2l6ZX1cbiAgICAgICAgICAgICAgZmlsbD1cIndoaXRlXCJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c9XCJ2aXNpYmxlXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge0RlZmF1bHREZWNyZW1lbnRJY29uU3ZnQ29udGVudH1cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgIDwvZz5cbiAgICAgICAgPC9nPlxuXG4gICAgICAgIHsvKiBHcnVwYSBcIkluY3JlbWVudFwiICovfVxuICAgICAgICA8Z1xuICAgICAgICAgIGNsYXNzTmFtZT17U1ZHX0JVVFRPTl9DTEFTU19OQU1FfVxuICAgICAgICAgIGRhdGEtbmFtZT17c3ZnTGF5b3V0RGF0YS5idXR0b25zLmluY3JlbWVudC5uYW1lfVxuICAgICAgICAgIG9uQ2xpY2s9eyFkaXNhYmxlZCAmJiAhcmVhZE9ubHkgPyBoYW5kbGVJbmNyZW1lbnQgOiB1bmRlZmluZWR9XG4gICAgICAgICAgc3R5bGU9e3sgLi4uY29tbW9uU3ZnQnV0dG9uU3R5bGUsIC4uLihpbmNyZW1lbnRCdXR0b25TdHlsZSB8fCB7fSkgfX1cbiAgICAgICAgICBwb2ludGVyRXZlbnRzPXtkaXNhYmxlZCB8fCByZWFkT25seSA/IFwibm9uZVwiIDogXCJhdXRvXCJ9XG4gICAgICAgID5cbiAgICAgICAgICB7c3ZnTGF5b3V0RGF0YS5idXR0b25zLmluY3JlbWVudC5wYXRocy5tYXAoKHAsIGkpID0+IChcbiAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgIGtleT17YGluYy1wYXRoLSR7aX1gfVxuICAgICAgICAgICAgICBkYXRhLW5hbWU9e3AuZGF0YU5hbWV9XG4gICAgICAgICAgICAgIGQ9e3AuZH1cbiAgICAgICAgICAgICAgZmlsbD17aW5jcmVtZW50QnV0dG9uRmlsbCB8fCBwLmRlZmF1bHRGaWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgICB7LyogSmVcdTAxNUJsaSBjaGNlc3ogZG9kYVx1MDEwNyBpa29uXHUwMTE5IFNWRyBcIitcIiBuYSB0eW0ga3N6dGFcdTAxNDJjaWUsIHpyXHUwMEYzYiB0byB0dXRhaiwgbnAuOiAqL31cbiAgICAgICAgICB7XG4gICAgICAgICAgICAvKjxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZShYIFkpIHNjYWxlKFMpXCI+XG4gICAgICAgICAgICB7RGVmYXVsdEluY3JlbWVudEljb25TdmdDb250ZW50fVxuICAgICAgICAgIDwvZz4qL1xuICAgICAgICAgIH1cbiAgICAgICAgICB7LyogSWtvbmEgSW5jcmVtZW50ICgrKSAqL31cbiAgICAgICAgICA8Z1xuICAgICAgICAgICAgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7c3ZnTGF5b3V0RGF0YS5idXR0b25zLmluY3JlbWVudC5pY29uQW5jaG9yWH0sICR7c3ZnTGF5b3V0RGF0YS5idXR0b25zLmluY3JlbWVudC5pY29uQW5jaG9yWX0pIHNjYWxlKCR7aWNvbkFjdHVhbFNjYWxlfSkgdHJhbnNsYXRlKC0ke1xuICAgICAgICAgICAgICBpY29uVmlld0JveFNpemUgLyAyXG4gICAgICAgICAgICB9LCAtJHtpY29uVmlld0JveFNpemUgLyAyfSlgfVxuICAgICAgICAgICAgc3R5bGU9e3sgcG9pbnRlckV2ZW50czogXCJub25lXCIgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgIHZpZXdCb3g9e2AwIDAgJHtpY29uVmlld0JveFNpemV9ICR7aWNvblZpZXdCb3hTaXplfWB9XG4gICAgICAgICAgICAgIHdpZHRoPXtpY29uVmlld0JveFNpemV9XG4gICAgICAgICAgICAgIGhlaWdodD17aWNvblZpZXdCb3hTaXplfVxuICAgICAgICAgICAgICBmaWxsPVwid2hpdGVcIlxuICAgICAgICAgICAgICBvdmVyZmxvdz1cInZpc2libGVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7RGVmYXVsdEluY3JlbWVudEljb25TdmdDb250ZW50fVxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgPC9nPlxuICAgICAgICA8L2c+XG4gICAgICA8L3N2Zz5cblxuICAgICAgPGlucHV0XG4gICAgICAgIHJlZj17aW5wdXRSZWZ9XG4gICAgICAgIGNsYXNzTmFtZT17YCR7SFRNTF9JTlBVVF9DTEFTU19OQU1FfSAke2lucHV0Q2xhc3NOYW1lIHx8IFwiXCJ9YH0gLy8gS2xhc2EgeiBUd29qZWdvIEhUTUxcbiAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgIGlkPXtpZH1cbiAgICAgICAgdmFsdWU9e2Rpc3BsYXlWYWx1ZX0gLy8gZGlzcGxheVZhbHVlIGplc3QganVcdTAxN0Mgc3RyaW5naWVtIGx1YiBwdXN0eW0gc3RyaW5naWVtXG4gICAgICAgIG1pbj17bWlufVxuICAgICAgICBtYXg9e21heH1cbiAgICAgICAgc3RlcD17c3RlcH1cbiAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgICByZXF1aXJlZD17cmVxdWlyZWR9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgcmVhZE9ubHk9e3JlYWRPbmx5fVxuICAgICAgICBvbklucHV0PXtoYW5kbGVJbnB1dENoYW5nZX0gLy8gUG9kXHUwMTQyXHUwMTA1Y3pvbnkgcG9wcmF3bnkgaGFuZGxlclxuICAgICAgICBzdHlsZT17aHRtbElucHV0U3R5bGV9XG4gICAgICAgIGFyaWEtbGFiZWw9e3Byb3BzW1wiYXJpYS1sYWJlbFwiXSB8fCBcIldhcnRvXHUwMTVCXHUwMTA3IGxpY3pib3dhXCJ9XG4gICAgICAgIHsuLi5yZXN0RGl2UHJvcHN9XG4gICAgICAvPlxuICAgICAge1xuICAgICAgICAvLyBabWllbmlvbmUgeiByZXN0SW5wdXRQcm9wcywgYm8gdGUgc1x1MDEwNSBkbGEgZ1x1MDE0Mlx1MDBGM3duZWdvIGRpdmFcbiAgICAgICAgLy8gSmVcdTAxNUJsaSBjaGNlc3ogcHJ6ZWthenl3YVx1MDEwNyBkb2RhdGtvd2UgYXRyeWJ1dHkgZG8gaW5wdXRhLFxuICAgICAgICAvLyBtdXNpc3ogamUgb3NvYm5vIG9ic1x1MDE0MnVcdTAxN0N5XHUwMTA3IGx1YiBuYXp3YVx1MDEwNyBucC4gaHRtbElucHV0UHJvcHNcbiAgICAgIH1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsICIvLyAuL3VpL0lucHV0Q2hpcHNMaXN0LnRzeFxuLyoqIEBqc3hSdW50aW1lIGF1dG9tYXRpYyAqL1xuLyoqIEBqc3hJbXBvcnRTb3VyY2UgaHR0cHM6Ly9lc20uc2gvcHJlYWN0QDEwLjI2LjggKi9cblxuaW1wb3J0IHtcbiAgdXNlRWZmZWN0LFxuICB1c2VSZWYsXG4gIHVzZVN0YXRlLFxufSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvcHJlYWN0QDEwLjI2LjgvaG9va3NcIjtcbmltcG9ydCB7IEpTWCB9IGZyb20gXCJodHRwczovL2VzbS5zaC9wcmVhY3RAMTAuMjYuOFwiO1xuaW1wb3J0IHsgc2lnbmFsLCB1c2VTaWduYWwgfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvQHByZWFjdC9zaWduYWxzQDIuMi4wXCI7XG50eXBlIE1vZGUgPSBcIlZpZXdcIiB8IFwiRHJhZ1wiIHwgXCJDbGlja1wiO1xuXG5pbnRlcmZhY2UgSW5wdXRDaGlwc0xpc3RQcm9wcyB7XG4gIGF2YWlsYWJsZVZhbHVlczogTWFwPHN0cmluZywgbnVtYmVyPjtcbiAgdmFsdWVzOiBzdHJpbmdbXTtcbiAgZGVmYXVsdFZhbHVlcz86IHN0cmluZ1tdO1xuICB0aXRsZUF2YWlsYWJsZT86IHN0cmluZztcbiAgdGl0bGVTZWxlY3RlZD86IHN0cmluZztcbiAgdGl0bGVNb2RlPzogTWFwPFwiVmlld1wiIHwgXCJEcmFnXCIgfCBcIkNsaWNrXCIsIHN0cmluZz47XG4gIHRpdGxlTW9kZUJ1dHRvbj86IHN0cmluZztcbiAgb25DaGFuZ2U/OiAodXBkYXRlZDogc3RyaW5nW10pID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBJbnB1dENoaXBzTW9kZShcbiAgVmlldzogc3RyaW5nID0gXCJWaWV3XCIsXG4gIERyYWc6IHN0cmluZyA9IFwiRHJhZ1wiLFxuICBDbGljazogc3RyaW5nID0gXCJDbGlja1wiLFxuKTogTWFwPFwiVmlld1wiIHwgXCJEcmFnXCIgfCBcIkNsaWNrXCIsIHN0cmluZz4ge1xuICByZXR1cm4gbmV3IE1hcDxcIlZpZXdcIiB8IFwiRHJhZ1wiIHwgXCJDbGlja1wiLCBzdHJpbmc+KFtcbiAgICBbXCJWaWV3XCIsIFZpZXddLFxuICAgIFtcIkRyYWdcIiwgRHJhZ10sXG4gICAgW1wiQ2xpY2tcIiwgQ2xpY2tdLFxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIElucHV0Q2hpcHNMaXN0KHByb3BzOiBJbnB1dENoaXBzTGlzdFByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICB0aXRsZUF2YWlsYWJsZSxcbiAgICB0aXRsZVNlbGVjdGVkLFxuICAgIHRpdGxlTW9kZUJ1dHRvbiA9IFwiTW9kZVwiLFxuICAgIHRpdGxlTW9kZSA9IElucHV0Q2hpcHNNb2RlKCksXG4gICAgYXZhaWxhYmxlVmFsdWVzLFxuICAgIHZhbHVlcyxcbiAgICBkZWZhdWx0VmFsdWVzID0gW10sXG4gICAgb25DaGFuZ2UgPSAoKSA9PiB7fSxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IG1vZGUzID0gdXNlU2lnbmFsPE1vZGU+KFwiVmlld1wiKTtcblxuICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihbLi4uZGVmYXVsdFZhbHVlc10pO1xuXG4gIC8vIGNvbXB1dGUgYXZhaWxhYmxlIGxpc3RcbiAgY29uc3QgY29tcHV0ZVJlbWFpbmluZyA9ICgpOiBzdHJpbmdbXSA9PiB7XG4gICAgY29uc3QgdXNlZENvdW50ID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcbiAgICBzZWxlY3RlZC5mb3JFYWNoKCh2YWwpID0+IHtcbiAgICAgIHVzZWRDb3VudC5zZXQodmFsLCAodXNlZENvdW50LmdldCh2YWwpID8/IDApICsgMSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG4gICAgZm9yIChjb25zdCBba2V5LCB0b3RhbF0gb2YgYXZhaWxhYmxlVmFsdWVzLmVudHJpZXMoKSkge1xuICAgICAgY29uc3QgdXNlZCA9IHVzZWRDb3VudC5nZXQoa2V5KSA/PyAwO1xuICAgICAgY29uc3QgcmVtYWluaW5nID0gdG90YWwgLSB1c2VkO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW1haW5pbmc7IGkrKykge1xuICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvbnN0IHJlbWFpbmluZyA9IGNvbXB1dGVSZW1haW5pbmcoKTtcblxuICAvLyBTeW5jIHdpdGggcGFyZW50XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgb25DaGFuZ2UoWy4uLnNlbGVjdGVkXSk7XG4gIH0sIFtzZWxlY3RlZF0pO1xuXG4gIC8vIFRvZ2dsZSBtb2RlIGN5Y2xpbmc6IFZpZXcgLT4gRHJhZyAtPiBDbGljayAtPiBWaWV3IC4uLlxuICBjb25zdCB0b2dnbGVNb2RlID0gKCkgPT4ge1xuICAgIGlmIChtb2RlMy52YWx1ZSA9PT0gXCJWaWV3XCIpIHtcbiAgICAgIG1vZGUzLnZhbHVlID0gXCJEcmFnXCI7XG4gICAgfSBlbHNlIGlmIChtb2RlMy52YWx1ZSA9PT0gXCJEcmFnXCIpIHtcbiAgICAgIG1vZGUzLnZhbHVlID0gXCJDbGlja1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICBtb2RlMy52YWx1ZSA9IFwiVmlld1wiO1xuICAgIH1cbiAgICAvL3NldE1vZGUoKHByZXYpID0+IHtcbiAgICAvLyAgaWYgKHByZXYgPT09IFwiVmlld1wiKSByZXR1cm4gXCJEcmFnXCI7XG4gICAgLy8gIGlmIChwcmV2ID09PSBcIkRyYWdcIikgcmV0dXJuIFwiQ2xpY2tcIjtcbiAgICAvLyAgcmV0dXJuIFwiVmlld1wiO1xuICAgIC8vfSk7XG4gIH07XG5cbiAgLy8gQ2xpY2sgaGFuZGxlcnMgKG9ubHkgYWN0aXZlIGluIENsaWNrIG1vZGUpXG4gIGNvbnN0IGhhbmRsZUFkZCA9ICh2YWw6IHN0cmluZykgPT4ge1xuICAgIGlmIChtb2RlMy52YWx1ZSAhPT0gXCJDbGlja1wiKSByZXR1cm47IC8vIEJsb2thZGEgcG96YSB0cnliZW0gQ2xpY2tcbiAgICBzZXRTZWxlY3RlZChbLi4uc2VsZWN0ZWQsIHZhbF0pO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVJlbW92ZSA9IChpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgaWYgKG1vZGUzLnZhbHVlICE9PSBcIkNsaWNrXCIpIHJldHVybjsgLy8gQmxva2FkYSBwb3phIHRyeWJlbSBDbGlja1xuICAgIHNldFNlbGVjdGVkKChwcmV2KSA9PiB7XG4gICAgICBjb25zdCBjb3B5ID0gWy4uLnByZXZdO1xuICAgICAgY29weS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlTW92ZUxlZnQgPSAoaW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGlmIChtb2RlMy52YWx1ZSAhPT0gXCJDbGlja1wiKSByZXR1cm47IC8vIEJsb2thZGEgcG96YSB0cnliZW0gQ2xpY2tcbiAgICBpZiAoaW5kZXggPD0gMCkgcmV0dXJuO1xuICAgIHNldFNlbGVjdGVkKChwcmV2KSA9PiB7XG4gICAgICBjb25zdCBjb3B5ID0gWy4uLnByZXZdO1xuICAgICAgW2NvcHlbaW5kZXggLSAxXSwgY29weVtpbmRleF1dID0gW2NvcHlbaW5kZXhdLCBjb3B5W2luZGV4IC0gMV1dO1xuICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlTW92ZVJpZ2h0ID0gKGluZGV4OiBudW1iZXIpID0+IHtcbiAgICBpZiAobW9kZTMudmFsdWUgIT09IFwiQ2xpY2tcIikgcmV0dXJuOyAvLyBCbG9rYWRhIHBvemEgdHJ5YmVtIENsaWNrXG4gICAgaWYgKGluZGV4ID49IHNlbGVjdGVkLmxlbmd0aCAtIDEpIHJldHVybjtcbiAgICBzZXRTZWxlY3RlZCgocHJldikgPT4ge1xuICAgICAgY29uc3QgY29weSA9IFsuLi5wcmV2XTtcbiAgICAgIFtjb3B5W2luZGV4XSwgY29weVtpbmRleCArIDFdXSA9IFtjb3B5W2luZGV4ICsgMV0sIGNvcHlbaW5kZXhdXTtcbiAgICAgIHJldHVybiBjb3B5O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIC0tLS0tLS0tLS0tIERyYWcgJiBEcm9wIGxvZ2ljIChha3R5d255IHR5bGtvIHcgdHJ5YmllIERyYWcpIC0tLS0tLS0tLS0tXG5cbiAgLy8gUHJ6ZWNob3d1amUgaW5kZWtzIHByemVjaVx1MDEwNWdhbmVnbyBlbGVtZW50dSB6IHNlbGVjdGVkIGx1YiBudWxsXG4gIGNvbnN0IGRyYWdJbmRleCA9IHVzZVJlZjxudW1iZXIgfCBudWxsPihudWxsKTtcblxuICAvLyBQcnplY2hvd3VqZSBjaGlwIHByemVjaVx1MDEwNWdhbnkgeiBhdmFpbGFibGUgKGt0XHUwMEYzcnkgamVzemN6ZSBuaWUgamVzdCB3IHNlbGVjdGVkKVxuICBjb25zdCBkcmFnQXZhaWxhYmxlQ2hpcCA9IHVzZVJlZjxzdHJpbmcgfCBudWxsPihudWxsKTtcblxuICAvLyBIYW5kbGVyeSBkbGEgZWxlbWVudFx1MDBGM3cgZG9zdFx1MDExOXBueWNoIChhdmFpbGFibGUgY2hpcHMpXG4gIGNvbnN0IG9uRHJhZ1N0YXJ0QXZhaWxhYmxlID0gKGU6IERyYWdFdmVudCwgY2hpcDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKG1vZGUzLnZhbHVlICE9PSBcIkRyYWdcIikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFnQXZhaWxhYmxlQ2hpcC5jdXJyZW50ID0gY2hpcDtcbiAgICBlLmRhdGFUcmFuc2Zlcj8uc2V0RGF0YShcInRleHQvcGxhaW5cIiwgY2hpcCk7XG4gICAgZS5kYXRhVHJhbnNmZXIhLmVmZmVjdEFsbG93ZWQgPSBcImNvcHlcIjtcbiAgfTtcblxuICBjb25zdCBvbkRyYWdFbmRBdmFpbGFibGUgPSAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgZHJhZ0F2YWlsYWJsZUNoaXAuY3VycmVudCA9IG51bGw7XG4gIH07XG5cbiAgLy8gSGFuZGxlcnkgZGxhIGVsZW1lbnRcdTAwRjN3IHd5YnJhbnljaCAoc2VsZWN0ZWQgY2hpcHMpXG4gIGNvbnN0IG9uRHJhZ1N0YXJ0U2VsZWN0ZWQgPSAoZTogRHJhZ0V2ZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgaWYgKG1vZGUzLnZhbHVlICE9PSBcIkRyYWdcIikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFnSW5kZXguY3VycmVudCA9IGluZGV4O1xuICAgIGUuZGF0YVRyYW5zZmVyPy5zZXREYXRhKFwidGV4dC9wbGFpblwiLCBzZWxlY3RlZFtpbmRleF0pO1xuICAgIGUuZGF0YVRyYW5zZmVyIS5lZmZlY3RBbGxvd2VkID0gXCJtb3ZlXCI7XG4gIH07XG5cbiAgY29uc3Qgb25EcmFnRW5kU2VsZWN0ZWQgPSAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgZHJhZ0luZGV4LmN1cnJlbnQgPSBudWxsO1xuICB9O1xuXG4gIC8vIE9ic3phciB1cHVzemN6YW5pYSAtIHBvbGUgc2VsZWN0ZWQgY2hpcHNcbiAgY29uc3Qgb25Ecm9wU2VsZWN0ZWQgPSAoZTogRHJhZ0V2ZW50LCB0YXJnZXRJbmRleDogbnVtYmVyIHwgbnVsbCA9IG51bGwpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKG1vZGUzLnZhbHVlICE9PSBcIkRyYWdcIikgcmV0dXJuO1xuXG4gICAgLy8gUHJ6ZWNpXHUwMTA1Z25pXHUwMTE5dG8gY2hpcCB6IGF2YWlsYWJsZVxuICAgIGlmIChkcmFnQXZhaWxhYmxlQ2hpcC5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAvLyBEb2RhaiBnbyBuYSBrb25pZWMgKGx1YiBuYSB3c2themFuZSBtaWVqc2NlKVxuICAgICAgc2V0U2VsZWN0ZWQoKHByZXYpID0+IHtcbiAgICAgICAgY29uc3QgbmV3U2VsZWN0ZWQgPSBbLi4ucHJldl07XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA9PT0gbnVsbCB8fCB0YXJnZXRJbmRleCA+PSBuZXdTZWxlY3RlZC5sZW5ndGgpIHtcbiAgICAgICAgICBuZXdTZWxlY3RlZC5wdXNoKGRyYWdBdmFpbGFibGVDaGlwLmN1cnJlbnQhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdTZWxlY3RlZC5zcGxpY2UodGFyZ2V0SW5kZXgsIDAsIGRyYWdBdmFpbGFibGVDaGlwLmN1cnJlbnQhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3U2VsZWN0ZWQ7XG4gICAgICB9KTtcbiAgICAgIGRyYWdBdmFpbGFibGVDaGlwLmN1cnJlbnQgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFByemVjaVx1MDEwNWduaVx1MDExOXRvIGNoaXAgeiBzZWxlY3RlZCAoem1pYW5hIGtvbGVqbm9cdTAxNUJjaSlcbiAgICBpZiAoZHJhZ0luZGV4LmN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGZyb21JbmRleCA9IGRyYWdJbmRleC5jdXJyZW50O1xuICAgICAgY29uc3QgdG9JbmRleCA9IHRhcmdldEluZGV4ICE9PSBudWxsID8gdGFyZ2V0SW5kZXggOiBzZWxlY3RlZC5sZW5ndGggLSAxO1xuXG4gICAgICBpZiAoZnJvbUluZGV4ID09PSB0b0luZGV4KSByZXR1cm47XG5cbiAgICAgIHNldFNlbGVjdGVkKChwcmV2KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBbLi4ucHJldl07XG4gICAgICAgIGNvbnN0IFttb3ZlZF0gPSBjb3B5LnNwbGljZShmcm9tSW5kZXgsIDEpO1xuICAgICAgICBjb3B5LnNwbGljZSh0b0luZGV4LCAwLCBtb3ZlZCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgfSk7XG4gICAgICBkcmFnSW5kZXguY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uRHJhZ092ZXJTZWxlY3RlZCA9IChlOiBEcmFnRXZlbnQpID0+IHtcbiAgICBpZiAobW9kZTMudmFsdWUgPT09IFwiRHJhZ1wiKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHBvendcdTAwRjNsIG5hIGRyb3BcbiAgICB9XG4gIH07XG5cbiAgLy8gT2JzemFyIHVwdXN6Y3phbmlhIC0gcG9sZSBhdmFpbGFibGUgY2hpcHMgKGRvIHVzdXdhbmlhIHogc2VsZWN0ZWQpXG4gIGNvbnN0IG9uRHJvcEF2YWlsYWJsZSA9IChlOiBEcmFnRXZlbnQpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKG1vZGUzLnZhbHVlICE9PSBcIkRyYWdcIikgcmV0dXJuO1xuXG4gICAgaWYgKGRyYWdJbmRleC5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAvLyBVc3VcdTAxNDQgeiBzZWxlY3RlZCAoY28gb3puYWN6YSBcInByemVuaWVzaWVuaWVcIiBuYSBhdmFpbGFibGUpXG4gICAgICBjb25zdCBpbmRleFRvUmVtb3ZlID0gZHJhZ0luZGV4LmN1cnJlbnQ7XG4gICAgICBzZXRTZWxlY3RlZCgocHJldikgPT4ge1xuICAgICAgICBjb25zdCBjb3B5ID0gWy4uLnByZXZdO1xuICAgICAgICBjb3B5LnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgICB9KTtcbiAgICAgIGRyYWdJbmRleC5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBOaWUgbWEgc2Vuc3UgcHJ6ZWNpXHUwMTA1Z2FcdTAxMDcgeiBhdmFpbGFibGUgbmEgYXZhaWxhYmxlIC0gaWdub3J1amVteVxuICAgIGRyYWdBdmFpbGFibGVDaGlwLmN1cnJlbnQgPSBudWxsO1xuICB9O1xuXG4gIGNvbnN0IG9uRHJhZ092ZXJBdmFpbGFibGUgPSAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgaWYgKG1vZGUzLnZhbHVlID09PSBcIkRyYWdcIikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tLSBSZW5kZXJvd2FuaWUgLS0tLS0tLS0tLS1cblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzPVwiaW5wdXRjaGlwcy1jb250YWluZXJcIlxuICAgICAgc3R5bGU9e3sgbWF4V2lkdGg6IFwiNjAwcHhcIiB9fVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dGNoaXBzLW1vZGVcIj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e3RvZ2dsZU1vZGV9XG4gICAgICAgICAgY2xhc3M9XCJpbnB1dGNoaXBzLW1vZGUtYnV0dG9uXCJcbiAgICAgICAgPlxuICAgICAgICAgIHt0aXRsZU1vZGVCdXR0b259OjxiciAvPlxuICAgICAgICAgIHt0aXRsZU1vZGUuZ2V0KG1vZGUzLnZhbHVlKX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cImlucHV0Y2hpcHMtY29udGFpbmVyLWxpc3RcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0Y2hpcHMtbGlzdFwiPlxuICAgICAgICAgIHt0aXRsZUF2YWlsYWJsZSAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXRjaGlwcy1saXN0LXRpdGxlXCI+e3RpdGxlQXZhaWxhYmxlfTwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJpbnB1dGNoaXBzLWxpc3QtYm94XCJcbiAgICAgICAgICAgIG9uRHJvcD17b25Ecm9wQXZhaWxhYmxlfVxuICAgICAgICAgICAgb25EcmFnT3Zlcj17b25EcmFnT3ZlckF2YWlsYWJsZX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7cmVtYWluaW5nLm1hcCgoY2hpcCwgaSkgPT4gKFxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGtleT17YHJlbS0ke2NoaXB9LSR7aX1gfVxuICAgICAgICAgICAgICAgIGRhdGEtaW5wdXQtZWRpdD17bW9kZTMudmFsdWUgPT09IFwiVmlld1wiXG4gICAgICAgICAgICAgICAgICA/IFwiVmlld1wiXG4gICAgICAgICAgICAgICAgICA6IG1vZGUzLnZhbHVlID09PSBcIkRyYWdcIlxuICAgICAgICAgICAgICAgICAgPyBcIkRyYWdcIlxuICAgICAgICAgICAgICAgICAgOiBcIkNsaWNrXCJ9XG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlPXttb2RlMy52YWx1ZSA9PT0gXCJEcmFnXCJ9XG4gICAgICAgICAgICAgICAgb25EcmFnU3RhcnQ9eyhlKSA9PlxuICAgICAgICAgICAgICAgICAgb25EcmFnU3RhcnRBdmFpbGFibGUoZSBhcyB1bmtub3duIGFzIERyYWdFdmVudCwgY2hpcCl9XG4gICAgICAgICAgICAgICAgb25EcmFnRW5kPXsoZSkgPT4gb25EcmFnRW5kQXZhaWxhYmxlKGUgYXMgdW5rbm93biBhcyBEcmFnRXZlbnQpfVxuICAgICAgICAgICAgICAgIGNsYXNzPVwiaW5wdXRjaGlwcy1jaGlwcyBpbnB1dGNoaXBzLWNoaXBzLWF2YWlsYWJsZVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y2hpcH1cbiAgICAgICAgICAgICAgICB7bW9kZTMudmFsdWUgPT09IFwiQ2xpY2tcIiAmJiAoXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUFkZChjaGlwKX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpbnB1dGNoaXBzLWNoaXBzLWJ1dHRvbiBpbnB1dGNoaXBzLWNoaXBzLWJ1dHRvbi1hZGRcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0Y2hpcHMtbGlzdFwiPlxuICAgICAgICAgIHt0aXRsZVNlbGVjdGVkICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dGNoaXBzLWxpc3QtdGl0bGVcIj57dGl0bGVTZWxlY3RlZH08L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPVwiaW5wdXRjaGlwcy1saXN0LWJveFwiXG4gICAgICAgICAgICBvbkRyb3A9eyhlKSA9PiBvbkRyb3BTZWxlY3RlZChlKX1cbiAgICAgICAgICAgIG9uRHJhZ092ZXI9e29uRHJhZ092ZXJTZWxlY3RlZH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7c2VsZWN0ZWQubWFwKChjaGlwLCBpKSA9PiAoXG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAga2V5PXtgc2VsLSR7Y2hpcH0tJHtpfWB9XG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlPXttb2RlMy52YWx1ZSA9PT0gXCJEcmFnXCJ9XG4gICAgICAgICAgICAgICAgZGF0YS1pbnB1dC1lZGl0PXttb2RlMy52YWx1ZSA9PT0gXCJWaWV3XCJcbiAgICAgICAgICAgICAgICAgID8gXCJWaWV3XCJcbiAgICAgICAgICAgICAgICAgIDogbW9kZTMudmFsdWUgPT09IFwiRHJhZ1wiXG4gICAgICAgICAgICAgICAgICA/IFwiRHJhZ1wiXG4gICAgICAgICAgICAgICAgICA6IFwiQ2xpY2tcIn1cbiAgICAgICAgICAgICAgICBvbkRyYWdTdGFydD17KGUpID0+XG4gICAgICAgICAgICAgICAgICBvbkRyYWdTdGFydFNlbGVjdGVkKGUgYXMgdW5rbm93biBhcyBEcmFnRXZlbnQsIGkpfVxuICAgICAgICAgICAgICAgIG9uRHJhZ0VuZD17KGUpID0+IG9uRHJhZ0VuZFNlbGVjdGVkKGUgYXMgdW5rbm93biBhcyBEcmFnRXZlbnQpfVxuICAgICAgICAgICAgICAgIG9uRHJvcD17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChtb2RlMy52YWx1ZSA9PT0gXCJEcmFnXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBvbkRyb3BTZWxlY3RlZChlLCBpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAobW9kZTMudmFsdWUgPT09IFwiRHJhZ1wiKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBjbGFzcz1cImlucHV0Y2hpcHMtY2hpcHMgaW5wdXRjaGlwcy1jaGlwcy1zZWxlY3RlZFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7bW9kZTMudmFsdWUgPT09IFwiQ2xpY2tcIiAmJiAoXG4gICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICB7aSA+IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZU1vdmVMZWZ0KGkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpbnB1dGNoaXBzLWNoaXBzLWJ1dHRvbiBpbnB1dGNoaXBzLWNoaXBzLWJ1dHRvbi1vcmRcIlxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIFx1MjE5MFxuICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICB7aSA8IHNlbGVjdGVkLmxlbmd0aCAtIDEgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZU1vdmVSaWdodChpKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaW5wdXRjaGlwcy1jaGlwcy1idXR0b24gaW5wdXRjaGlwcy1jaGlwcy1idXR0b24tb3JkXCJcbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICBcdTIxOTJcbiAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAge2NoaXB9XG4gICAgICAgICAgICAgICAge21vZGUzLnZhbHVlID09PSBcIkNsaWNrXCIgJiYgKFxuICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVJlbW92ZShpKX1cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImlucHV0Y2hpcHMtY2hpcHMtYnV0dG9uIGlucHV0Y2hpcHMtY2hpcHMtYnV0dG9uLWRlbFwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB4XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCAiLy8gRGVmaW5pY2plIHR5cFx1MDBGM3dcbnR5cGUgRXhjZWxOZXN0ZWROdW1iZXJBcnJheSA9IG51bWJlciB8IEV4Y2VsTmVzdGVkTnVtYmVyQXJyYXlbXTtcblxuZXhwb3J0IHR5cGUgRXhjZWxOZXN0ZWROID0gRXhjZWxOZXN0ZWROdW1iZXJBcnJheTtcbmV4cG9ydCB0eXBlIEV4Y2VsUmVzdWx0cyA9IE1hcDxzdHJpbmcsIEV4Y2VsTmVzdGVkTnVtYmVyQXJyYXk+O1xuZXhwb3J0IHR5cGUgRXhjZWxTZXRzU2V0ID0ge1xuICB2YXI6IHN0cmluZzsgLy8gTmF6d2Egem1pZW5uZWogd2VqXHUwMTVCY2lvd2VqXG4gIHZhbDogRXhjZWxOZXN0ZWROdW1iZXJBcnJheTsgLy8gV2FydG9cdTAxNUJcdTAxMDcgem1pZW5uZWogKGxpY3piYSBsdWIgemFnbmllXHUwMTdDZFx1MDE3Q29uYSB0YWJsaWNhIGxpY3piKVxufTtcblxuLy8gVHlwIGRsYSBmdW5rY2ppIG9ibGljemVuaW93ZWo6IHByenlqbXVqZSBtYXBcdTAxMTksIHp3cmFjYSBvYmxpY3pvblx1MDEwNSB3YXJ0b1x1MDE1Qlx1MDEwN1xudHlwZSBDYWxjdWxhdGlvbkZ1bmN0aW9uID0gKGN1cnJlbnRNYXA6IEV4Y2VsUmVzdWx0cykgPT4gRXhjZWxOZXN0ZWROdW1iZXJBcnJheTtcblxuZXhwb3J0IHR5cGUgRXhjZWxTZXRzR2V0ID0ge1xuICB2YXI6IHN0cmluZzsgLy8gTmF6d2Egbm93ZWosIG9ibGljem9uZWogem1pZW5uZWpcbiAgdmFsOiBDYWxjdWxhdGlvbkZ1bmN0aW9uOyAvLyBGdW5rY2phIG9ibGljemFqXHUwMTA1Y2Egd2FydG9cdTAxNUJcdTAxMDcgdGVqIHptaWVubmVqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBabWllbmlvbm8geiBgZnVuYCBuYSBgdmFsYCB6Z29kbmllIHogVHdvaW0gcHJ6eWtcdTAxNDJhZGVtIHVcdTAxN0N5Y2lhXG59O1xuXG4vKipcbiAqIEZ1bmtjamEgRXhjZWwgcHJ6ZXR3YXJ6YSB3YXJ0b1x1MDE1QmNpIHdlalx1MDE1QmNpb3dlIGkgd3lrb251amUgemRlZmluaW93YW5lIG9ibGljemVuaWEuXG4gKiBAcGFyYW0gaW5wdXRWYWx1ZXMgV2FydG9cdTAxNUJjaSBwb2N6XHUwMTA1dGtvd2UgZG8gdW1pZXN6Y3plbmlhIHcgbWFwaWUuXG4gKiBAcGFyYW0gY2FsY3NWYWx1ZXMgRGVmaW5pY2plIG9ibGljemVcdTAxNDQgZG8gd3lrb25hbmlhLlxuICogQHJldHVybnMgTWFwYSB6YXdpZXJhalx1MDEwNWNhIHdzenlzdGtpZSB3YXJ0b1x1MDE1QmNpIHdlalx1MDE1QmNpb3dlIGkgb2JsaWN6b25lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gRXhjZWwoXG4gIGlucHV0VmFsdWVzOiBFeGNlbFNldHNTZXQgfCBFeGNlbFNldHNTZXRbXSxcbiAgY2FsY3NWYWx1ZXM/OiBFeGNlbFNldHNHZXQgfCBFeGNlbFNldHNHZXRbXSAvLyBEcnVnaSBhcmd1bWVudCBqZXN0IG9wY2pvbmFsbnlcbik6IEV4Y2VsUmVzdWx0cyB7IC8vIFp3cmFjYW15IG1hcFx1MDExOSB6IGJhcmR6aWVqIHN6Y3plZ1x1MDBGM1x1MDE0Mm93eW0gdHlwZW1cbiAgXG4gIC8vIEluaWNqYWxpemFjamEgbWFweSB6IHBvcHJhd255bWkgdHlwYW1pXG4gIGNvbnN0IE06RXhjZWxSZXN1bHRzID0gbmV3IE1hcDxzdHJpbmcsIEV4Y2VsTmVzdGVkTnVtYmVyQXJyYXk+KCk7XG5cbiAgLy8gMS4gUHJ6ZXR3YXJ6YW5pZSB3YXJ0b1x1MDE1QmNpIHdlalx1MDE1QmNpb3d5Y2ggKGlucHV0VmFsdWVzKVxuICAvLyBOb3JtYWxpemFjamEgaW5wdXRWYWx1ZXMgZG8gdGFibGljeSwgamVcdTAxNUJsaSBwcnpla2F6YW5vIHBvamVkeW5jenkgb2JpZWt0XG4gIGNvbnN0IHJlc29sdmVkSW5wdXRWYWx1ZXMgPSAhQXJyYXkuaXNBcnJheShpbnB1dFZhbHVlcykgPyBbaW5wdXRWYWx1ZXNdIDogaW5wdXRWYWx1ZXM7XG4gIHJlc29sdmVkSW5wdXRWYWx1ZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBNLnNldChpdGVtLnZhciwgaXRlbS52YWwpO1xuICB9KTtcblxuICAvLyAyLiBQcnpldHdhcnphbmllIHdhcnRvXHUwMTVCY2kgb2JsaWN6ZW5pb3d5Y2ggKGNhbGNzVmFsdWVzKVxuICBpZiAoY2FsY3NWYWx1ZXMpIHsgLy8gV3lrb25haiB0eWxrbywgamVcdTAxNUJsaSBjYWxjc1ZhbHVlcyB6b3N0YVx1MDE0MnkgZG9zdGFyY3pvbmVcbiAgICAvLyBOb3JtYWxpemFjamEgY2FsY3NWYWx1ZXMgZG8gdGFibGljeSwgamVcdTAxNUJsaSBwcnpla2F6YW5vIHBvamVkeW5jenkgb2JpZWt0XG4gICAgY29uc3QgcmVzb2x2ZWRDYWxjc1ZhbHVlcyA9ICFBcnJheS5pc0FycmF5KGNhbGNzVmFsdWVzKSA/IFtjYWxjc1ZhbHVlc10gOiBjYWxjc1ZhbHVlcztcbiAgICBcbiAgICByZXNvbHZlZENhbGNzVmFsdWVzLmZvckVhY2goY2FsY0l0ZW0gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gV3l3b1x1MDE0MmFuaWUgZnVua2NqaSBvYmxpY3plbmlvd2VqIHVcdTAxN0N5dGtvd25pa2EsIHByemVrYXp1alx1MDEwNWMgYWt0dWFsblx1MDEwNSBtYXBcdTAxMTkgTVxuICAgICAgICBjb25zdCByZXN1bHRWYWx1ZSA9IGNhbGNJdGVtLnZhbChNKTtcbiAgICAgICAgLy8gWmFwaXNhbmllIHd5bmlrdSBvYmxpY3plXHUwMTQ0IGRvIG1hcHkgTVxuICAgICAgICBNLnNldChjYWxjSXRlbS52YXIsIHJlc3VsdFZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEJcdTAxNDJcdTAxMDVkIHBvZGN6YXMgb2JsaWN6YW5pYSB6bWllbm5laiBcIiR7Y2FsY0l0ZW0udmFyfVwiOmAsIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSk7XG4gICAgICAgIC8vIE1vXHUwMTdDZXN6IHpkZWN5ZG93YVx1MDEwNywgamFrIG9ic1x1MDE0MnVcdTAxN0N5XHUwMTA3IGJcdTAxNDJcdTAxMDVkOiBwb21pblx1MDEwNVx1MDEwNywgemFwaXNhXHUwMTA3IGJcdTAxNDJcdTAxMDVkLCBwcnplcndhXHUwMTA3LCBpdHAuXG4gICAgICAgIC8vIE5hIHJhemllIHphcGlzdWplbXkgYHVuZGVmaW5lZGAsIGFieSB3c2themFcdTAxMDcgcHJvYmxlbS5cbiAgICAgICAgTS5zZXQoY2FsY0l0ZW0udmFyLCB1bmRlZmluZWQgYXMgYW55KTsgLy8gVVx1MDE3Q3l3YW15IGBhcyBhbnlgIGFieSBwb3p3b2xpXHUwMTA3IG5hIGB1bmRlZmluZWRgIHcgbWFwaWUgeiB0eXBlbSBFeGNlbE5lc3RlZE51bWJlckFycmF5XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gTTtcbn1cblxuLyoqXG4gKiBHZW5lcnVqZSB0YWJsaWNcdTAxMTkgbGljemIgKHByemVkemlhXHUwMTQyKSBvIG9rcmVcdTAxNUJsb25laiBsaWN6YmllIGVsZW1lbnRcdTAwRjN3LCBrcm9rdSBpIHdhcnRvXHUwMTVCY2kgcG9jelx1MDEwNXRrb3dlai5cbiAqXG4gKiBAcGFyYW0gc3RhcnRBdCBXYXJ0b1x1MDE1Qlx1MDEwNyBwb2N6XHUwMTA1dGtvd2EgcGllcndzemVnbyBlbGVtZW50dSB3IHRhYmxpY3kuXG4gKiBAcGFyYW0gc3RlcCBLcm9rIChyXHUwMEYzXHUwMTdDbmljYSkgbWlcdTAxMTlkenkga29sZWpueW1pIGVsZW1lbnRhbWkgdyB0YWJsaWN5LiBNb1x1MDE3Q2UgYnlcdTAxMDcgZG9kYXRuaSwgdWplbW55IGx1YiB6ZXJvd3kuXG4gKiBAcGFyYW0gaXRlbXMgTGljemJhIGVsZW1lbnRcdTAwRjN3IGRvIHd5Z2VuZXJvd2FuaWEgdyB0YWJsaWN5LlxuICogQHJldHVybnMgVGFibGljYSBsaWN6YiAobnVtYmVyW10pIHJlcHJlemVudHVqXHUwMTA1Y2Egd3lnZW5lcm93YW55IHByemVkemlhXHUwMTQyLlxuICogWndyYWNhIHB1c3RcdTAxMDUgdGFibGljXHUwMTE5LCBqZVx1MDE1QmxpIGBpdGVtc2AgamVzdCBtbmllanN6ZSBsdWIgclx1MDBGM3duZSAwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlRmlyc3RTdGVwU2l6ZShzdGFydEF0OiBudW1iZXIsIHN0ZXA6IG51bWJlciwgaXRlbXM6IG51bWJlcik6IG51bWJlcltdIHtcbiAgaWYgKGl0ZW1zIDw9IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCByZXN1bHQ6IG51bWJlcltdID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXM7IGkrKykge1xuICAgIHJlc3VsdC5wdXNoKHN0YXJ0QXQgKyAoaSAqIHN0ZXApKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdlbmVydWplIHRhYmxpY1x1MDExOSBsaWN6YiAocHJ6ZWR6aWFcdTAxNDIpLCB6YWN6eW5halx1MDEwNWMgb2QgYHN0YXJ0QXRgLCBwb3N0XHUwMTE5cHVqXHUwMTA1YyBvIGBzdGVwYCxcbiAqIGFcdTAxN0MgZG8gb3NpXHUwMTA1Z25pXHUwMTE5Y2lhIChpIHBvdGVuY2phbG5pZSB3XHUwMTQyXHUwMTA1Y3plbmlhKSBgZW5kQXRgLlxuICpcbiAqIEBwYXJhbSBzdGFydEF0IFdhcnRvXHUwMTVCXHUwMTA3IHBvY3pcdTAxMDV0a293YSBwaWVyd3N6ZWdvIGVsZW1lbnR1IHcgdGFibGljeS5cbiAqIEBwYXJhbSBzdGVwIEtyb2sgKHJcdTAwRjNcdTAxN0NuaWNhKSBtaVx1MDExOWR6eSBrb2xlam55bWkgZWxlbWVudGFtaSB3IHRhYmxpY3kuIE1vXHUwMTdDZSBieVx1MDEwNyBkb2RhdG5pLCB1amVtbnkgbHViIHplcm93eS5cbiAqIEBwYXJhbSBlbmRBdCBXYXJ0b1x1MDE1Qlx1MDEwNyBrb1x1MDE0NGNvd2EgcHJ6ZWR6aWFcdTAxNDJ1LiBFbGVtZW50eSBiXHUwMTE5ZFx1MDEwNSBnZW5lcm93YW5lIHRhayBkXHUwMTQydWdvLCBqYWtcbiAqIGRcdTAxNDJ1Z28gbWllc3pjelx1MDEwNSBzaVx1MDExOSB3IHByemVkemlhbGUgb2tyZVx1MDE1QmxvbnltIHByemV6IGBzdGFydEF0YCwgYHN0ZXBgIGkgYGVuZEF0YCAod1x1MDE0Mlx1MDEwNWN6bmllKS5cbiAqIEByZXR1cm5zIFRhYmxpY2EgbGljemIgKG51bWJlcltdKSByZXByZXplbnR1alx1MDEwNWNhIHd5Z2VuZXJvd2FueSBwcnplZHppYVx1MDE0Mi5cbiAqIFp3cmFjYSBwdXN0XHUwMTA1IHRhYmxpY1x1MDExOSwgamVcdTAxNUJsaSBuaWUgbW9cdTAxN0NuYSB3eWdlbmVyb3dhXHUwMTA3IFx1MDE3Q2FkbnljaCBlbGVtZW50XHUwMEYzd1xuICogKG5wLiBzdGFydEF0ID4gZW5kQXQgcHJ6eSBkb2RhdG5pbSBrcm9rdSwgbHViIGplXHUwMTVCbGkgc3RlcD0wIGEgc3RhcnRBdCAhPT0gZW5kQXQpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlRmlyc3RTdGVwTGFzdChzdGFydEF0OiBudW1iZXIsIHN0ZXA6IG51bWJlciwgZW5kQXQ6IG51bWJlcik6IG51bWJlcltdIHtcbiAgY29uc3QgcmVzdWx0OiBudW1iZXJbXSA9IFtdO1xuXG4gIGlmIChzdGVwID09PSAwKSB7XG4gICAgLy8gSmVcdTAxNUJsaSBrcm9rIHd5bm9zaSAwLCBwcnplZHppYVx1MDE0MiBtb1x1MDE3Q2UgemF3aWVyYVx1MDEwNyB0eWxrbyBqZWRlbiBlbGVtZW50LFxuICAgIC8vIGplXHUwMTVCbGkgc3RhcnRBdCBqZXN0IHJcdTAwRjN3bmUgZW5kQXQuXG4gICAgaWYgKHN0YXJ0QXQgPT09IGVuZEF0KSB7XG4gICAgICByZXN1bHQucHVzaChzdGFydEF0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDsgLy8gWndyYWNhIFtzdGFydEF0XSBsdWIgW11cbiAgfVxuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIC8vIEtyb2sgZG9kYXRuaTogaWR6aWVteSB3IGdcdTAwRjNyXHUwMTE5XG4gICAgaWYgKHN0YXJ0QXQgPiBlbmRBdCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDsgLy8gV2FydG9cdTAxNUJcdTAxMDcgcG9jelx1MDEwNXRrb3dhIGplc3QganVcdTAxN0MgemEgd2FydG9cdTAxNUJjaVx1MDEwNSBrb1x1MDE0NGNvd1x1MDEwNVxuICAgIH1cbiAgICBmb3IgKGxldCBjdXJyZW50VmFsdWUgPSBzdGFydEF0OyBjdXJyZW50VmFsdWUgPD0gZW5kQXQ7IGN1cnJlbnRWYWx1ZSArPSBzdGVwKSB7XG4gICAgICByZXN1bHQucHVzaChjdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHsgLy8gc3RlcCA8IDBcbiAgICAvLyBLcm9rIHVqZW1ueTogaWR6aWVteSB3IGRcdTAwRjNcdTAxNDJcbiAgICBpZiAoc3RhcnRBdCA8IGVuZEF0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0OyAvLyBXYXJ0b1x1MDE1Qlx1MDEwNyBwb2N6XHUwMTA1dGtvd2EgamVzdCBqdVx1MDE3QyB6YSB3YXJ0b1x1MDE1QmNpXHUwMTA1IGtvXHUwMTQ0Y293XHUwMTA1ICh3IHpcdTAxNDJcdTAxMDUgc3Ryb25cdTAxMTkpXG4gICAgfVxuICAgIGZvciAobGV0IGN1cnJlbnRWYWx1ZSA9IHN0YXJ0QXQ7IGN1cnJlbnRWYWx1ZSA+PSBlbmRBdDsgY3VycmVudFZhbHVlICs9IHN0ZXApIHtcbiAgICAgIHJlc3VsdC5wdXNoKGN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gQWx0ZXJuYXR5d25hLCBiYXJkemllaiB6d2lcdTAxMTl6XHUwMTQyYSBpbXBsZW1lbnRhY2phIHVcdTAxN0N5d2FqXHUwMTA1Y2EgQXJyYXkuZnJvbSAoZHppYVx1MDE0MmEgdGFrIHNhbW8pOlxuLypcbmZ1bmN0aW9uIGluaXRSYW5nZUZpcnN0U3RlcFNpemVBbHRlcm5hdGl2ZShpdGVtczogbnVtYmVyLCBzdGVwOiBudW1iZXIsIHN0YXJ0QXQ6IG51bWJlcik6IG51bWJlcltdIHtcbiAgaWYgKGl0ZW1zIDw9IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IGl0ZW1zIH0sIChfLCBpbmRleCkgPT4gc3RhcnRBdCArIGluZGV4ICogc3RlcCk7XG59XG5cbmNvbnNvbGUubG9nKFwiLS0tIFRlc3QgYWx0ZXJuYXR5d25laiBpbXBsZW1lbnRhY2ppIC0tLVwiKTtcbmNvbnN0IHJhbmdlMV9hbHQgPSBpbml0UmFuZ2VGaXJzdFN0ZXBTaXplQWx0ZXJuYXRpdmUoNSwgMiwgMTApO1xuY29uc29sZS5sb2coXCJSYW5nZSAxIEFsdCAoaXRlbXM6IDUsIHN0ZXA6IDIsIHN0YXJ0QXQ6IDEwKTpcIiwgcmFuZ2UxX2FsdCk7XG4qL1xuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIEV4Y2VsUmVzdWx0U29ydGluZ091dHB1dEF0VGFibGUoXG4gIG1vZGU6IFwiUk9XXCIgfCBcIkNPTFwiLFxuICBzb3J0OiBzdHJpbmdbXSxcbiAgZGF0YTogRXhjZWxSZXN1bHRzLFxuICBwYXJ0OiBib29sZWFuID0gZmFsc2Vcbik6IChzdHJpbmcgfCBudW1iZXIpW11bXSB7XG4gIGxldCByZXN1bHQ6IChzdHJpbmcgfCBudW1iZXIpW11bXSA9IFtdO1xuXG4gIGNvbnN0IFRSSU0gPSBkYXRhLmdldChcImhcIikgYXMgbnVtYmVyW10gfCB1bmRlZmluZWQ7XG5cbiAgLy8gTmFnXHUwMTQyXHUwMEYzd2tpIChwaWVyd3N6eSB3aWVyc3ogbHViIGtvbHVtbmEpXG4gIGNvbnN0IGhlYWRlcnMgPSBzb3J0Lm1hcCgoa2V5KSA9PiBrZXkgPT09IFwiPXx8XCIgPyBcIlwiIDogYFx1MzAxMCR7a2V5fVx1MzAxMWApO1xuXG4gIHJlc3VsdC5wdXNoKGhlYWRlcnMpOyAvLyBwaWVyd3N6eSB3aWVyc3ogdG8gbmFnXHUwMTQyXHUwMEYzd2tpXG5cbiAgLy8gWmFrXHUwMTQyYWRhbXksIFx1MDE3Q2Ugd3N6eXN0a2llIHRhYmxpY2UgbWFqXHUwMTA1IHRcdTAxMTkgc2FtXHUwMTA1IGRcdTAxNDJ1Z29cdTAxNUJcdTAxMDdcbiAgY29uc3Qgcm93Q291bnQgPSBNYXRoLm1heChcbiAgICAuLi5zb3J0Lm1hcCgoa2V5KSA9PlxuICAgICAgQXJyYXkuaXNBcnJheShkYXRhLmdldChrZXkpKSA/IChkYXRhLmdldChrZXkpIGFzIG51bWJlcltdKS5sZW5ndGggOiAwXG4gICAgKSxcbiAgKTtcblxuICAvLyAhIGNvdG9cbiAgbGV0IGxhc3RUcmltVmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCA9IFRSSU0/LlswXTtcblxuICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCByb3dDb3VudDsgcm93KyspIHtcbiAgICBjb25zdCByb3dEYXRhOiAoc3RyaW5nIHwgbnVtYmVyKVtdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBzb3J0KSB7XG4gICAgICBpZiAoa2V5ID09PSBcIj18fFwiKSB7XG4gICAgICAgIHJvd0RhdGEucHVzaChcIlwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvbERhdGEgPSBkYXRhLmdldChrZXkpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2xEYXRhKSkge1xuICAgICAgICAgIHJvd0RhdGEucHVzaCgoY29sRGF0YSBhcyBudW1iZXJbXSlbcm93XSA/PyBcIlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3dEYXRhLnB1c2goXCJcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFydCAmJiBUUklNICE9PSB1bmRlZmluZWQgJiYgcm93ID4gMCkge1xuICAgICAgY29uc3QgY3VycmVudFRyaW1WYWx1ZSA9IFRSSU1bcm93XTtcbiAgICAgIGlmIChjdXJyZW50VHJpbVZhbHVlICE9PSBsYXN0VHJpbVZhbHVlKSB7XG4gICAgICAgIC8vIFdzdGF3aWFteSBwdXN0eSB3aWVyc3ogamFrbyBzZXBhcmF0b3JcbiAgICAgICAgcmVzdWx0LnB1c2gobmV3IEFycmF5KGhlYWRlcnMubGVuZ3RoKS5maWxsKFwiXCIpKTtcbiAgICAgIH1cbiAgICAgIGxhc3RUcmltVmFsdWUgPSBjdXJyZW50VHJpbVZhbHVlO1xuICAgIH1cblxuICAgIHJlc3VsdC5wdXNoKHJvd0RhdGEpO1xuICB9ICBcbiAgcmVzdWx0ID0gbW9kZSAhPSBcIkNPTFwiID8gdHJhbnNwb3NlVEFCTEUocmVzdWx0KSA6IHJlc3VsdDtcbiAgY29uc29sZS5sb2coXCJyZXN1bHRcIixyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4gIGZ1bmN0aW9uIHRyYW5zcG9zZVRBQkxFPFQ+KG1hdHJpeDogVFtdW10pOiBUW11bXSB7XG4gICAgaWYgKG1hdHJpeC5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgICBjb25zdCByb3dzID0gbWF0cml4Lmxlbmd0aDtcbiAgICBjb25zdCBjb2xzID0gbWF0cml4WzBdLmxlbmd0aDtcbiAgXG4gICAgY29uc3QgcmVzdWx0OiBUW11bXSA9IEFycmF5LmZyb20oeyBsZW5ndGg6IGNvbHMgfSwgKCkgPT4gbmV3IEFycmF5PFQ+KHJvd3MpKTtcbiAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sczsgaisrKSB7XG4gICAgICAgIHJlc3VsdFtqXVtpXSA9IG1hdHJpeFtpXVtqXTtcbiAgICAgIH1cbiAgICB9XG4gIFxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuXG5leHBvcnQgZGVmYXVsdCBFeGNlbDtcblxuLy8gLS0tIFByenlrXHUwMTQyYWQgdVx1MDE3Q3ljaWEgLS0tXG4vLy8vIERlZmluaWNqYSB3YXJ0b1x1MDE1QmNpIHdlalx1MDE1QmNpb3d5Y2hcbi8vY29uc3QgaW5wdXRzOiBFeGNlbFNldHNTZXRbXSA9IFtcbi8vICB7IHZhcjogXCJpXCIsIHZhbDogWzEsIDIsIDMsIDQsIDUsIDYsIDddIH0sXG4vLyAgeyB2YXI6IFwialwiLCB2YWw6IFsxLCAzLCAyLCA3LCA2LCA1LCA0XSB9XG4vL107XG4vL1xuLy8vLyBEZWZpbmljamEgb2JsaWN6ZVx1MDE0NFxuLy9jb25zdCBjYWxjdWxhdGlvbnM6IEV4Y2VsU2V0c0dldFtdID0gW1xuLy8gIHtcbi8vICAgIHZhcjogXCJpal9zdW1cIiwgLy8gTm93YSB6bWllbm5hLCBrdFx1MDBGM3JhIGJcdTAxMTlkemllIHN1bVx1MDEwNSBpW2tdICsgaltrXVxuLy8gICAgdmFsOiAoY3VycmVudE1hcCkgPT4ge1xuLy8gICAgICAvLyBQb2JpZXJhbXkgdGFibGljZSAnaScgb3JheiAnaicgeiBtYXB5XG4vLyAgICAgIGNvbnN0IGlBcnJheSA9IGN1cnJlbnRNYXAuZ2V0KFwiaVwiKTtcbi8vICAgICAgY29uc3QgakFycmF5ID0gY3VycmVudE1hcC5nZXQoXCJqXCIpO1xuLy9cbi8vICAgICAgLy8gV2FcdTAxN0NuZTogU3ByYXdkemVuaWUgdHlwXHUwMEYzdyBpIG9ic1x1MDE0MnVnYSBiXHUwMTQyXHUwMTE5ZFx1MDBGM3cgd2V3blx1MDEwNXRyeiBmdW5rY2ppIHVcdTAxN0N5dGtvd25pa2Fcbi8vICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlBcnJheSkgfHwgIUFycmF5LmlzQXJyYXkoakFycmF5KSkge1xuLy8gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlptaWVubmUgJ2knIG9yYXogJ2onIG11c3pcdTAxMDUgYnlcdTAxMDcgdGFibGljYW1pIGRsYSB0ZWogb3BlcmFjamkgc3Vtb3dhbmlhLlwiKTtcbi8vICAgICAgfVxuLy8gICAgICBpZiAoaUFycmF5LnNvbWUoaXNOYU4pIHx8IGpBcnJheS5zb21lKGlzTmFOKSkge1xuLy8gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3N6eXN0a2llIGVsZW1lbnR5IHcgdGFibGljYWNoICdpJyBvcmF6ICdqJyBtdXN6XHUwMTA1IGJ5XHUwMTA3IGxpY3piYW1pLlwiKTtcbi8vICAgICAgfVxuLy8gICAgICBpZiAoaUFycmF5Lmxlbmd0aCAhPT0gakFycmF5Lmxlbmd0aCkge1xuLy8gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRhYmxpY2UgJ2knIG9yYXogJ2onIG11c3pcdTAxMDUgbWllXHUwMTA3IHRha1x1MDEwNSBzYW1cdTAxMDUgZFx1MDE0MnVnb1x1MDE1Qlx1MDEwNyBkbyBzdW1vd2FuaWEgZWxlbWVudCBwbyBlbGVtZW5jaWUuXCIpO1xuLy8gICAgICB9XG4vL1xuLy8gICAgICAvLyBXeWtvbmFuaWUgb3BlcmFjamkgc3Vtb3dhbmlhIGVsZW1lbnQgcG8gZWxlbWVuY2llXG4vLyAgICAgIC8vIFpha1x1MDE0MmFkYW15LCBcdTAxN0NlIHNcdTAxMDUgdG8gcFx1MDE0MmFza2llIHRhYmxpY2UgbGljemIsIHpnb2RuaWUgeiBwcnp5a1x1MDE0MmFkZW0uXG4vLyAgICAgIC8vIERsYSBFeGNlbE5lc3RlZE51bWJlckFycmF5IG9wZXJhY2phIGJ5XHUwMTQyYWJ5IGJhcmR6aWVqIHpcdTAxNDJvXHUwMTdDb25hIChyZWt1cmVuY3lqbmEpLlxuLy8gICAgICByZXR1cm4gaUFycmF5Lm1hcCgodmFsX2ksIGluZGV4KSA9PiAodmFsX2kgYXMgbnVtYmVyKSArIChqQXJyYXlbaW5kZXhdIGFzIG51bWJlcikpO1xuLy8gICAgfVxuLy8gIH0sXG4vLyAge1xuLy8gICAgdmFyOiBcImtcIiwgLy8gUHJ6eWtcdTAxNDJhZCBpbm5laiB6bWllbm5laiwgbnAuIHNrYWxhclxuLy8gICAgdmFsOiAoKSA9PiAxMDAgLy8gUHJvc3RhIGZ1bmtjamEgendyYWNhalx1MDEwNWNhIHdhcnRvXHUwMTVCXHUwMTA3XG4vLyAgfSxcbi8vICB7XG4vLyAgICB2YXI6IFwiaV9wbHVzX2tcIiwgLy8gUHJ6eWtcdTAxNDJhZCBvcGVyYWNqaSB0YWJsaWNhICsgc2thbGFyIChicm9hZGNhc3RpbmcpXG4vLyAgICB2YWw6IChjdXJyZW50TWFwKSA9PiB7XG4vLyAgICAgICAgY29uc3QgaUFycmF5ID0gY3VycmVudE1hcC5nZXQoXCJpXCIpO1xuLy8gICAgICAgIGNvbnN0IGtWYWwgPSBjdXJyZW50TWFwLmdldChcImtcIik7XG4vL1xuLy8gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpQXJyYXkpIHx8IHR5cGVvZiBrVmFsICE9PSAnbnVtYmVyJykge1xuLy8gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInaScgbXVzaSBieVx1MDEwNyB0YWJsaWNcdTAxMDUsIGEgJ2snIGxpY3piXHUwMTA1LlwiKTtcbi8vICAgICAgICB9XG4vLyAgICAgICAgcmV0dXJuIGlBcnJheS5tYXAodmFsX2kgPT4gKHZhbF9pIGFzIG51bWJlcikgKyAoa1ZhbCBhcyBudW1iZXIpKTtcbi8vICAgIH1cbi8vICB9XG4vL107XG4vL1xuLy8vLyBXeXdvXHUwMTQyYW5pZSBmdW5rY2ppIEV4Y2VsXG4vL2NvbnN0IEExID0gRXhjZWwoaW5wdXRzLCBjYWxjdWxhdGlvbnMpO1xuLy9cbi8vLy8gV3lcdTAxNUJ3aWV0bGVuaWUgd3luaWtcdTAwRjN3XG4vL2NvbnNvbGUubG9nKFwiQ2FcdTAxNDJhIG1hcGEgQTE6XCIsIEExKTtcbi8vY29uc29sZS5sb2coXCJBMS5nZXQoJ2knKTpcIiwgQTEuZ2V0KFwiaVwiKSk7XG4vL2NvbnNvbGUubG9nKFwiQTEuZ2V0KCdqJyk6XCIsIEExLmdldChcImpcIikpO1xuLy9jb25zb2xlLmxvZyhcIkExLmdldCgnaWpfc3VtJyk6XCIsIEExLmdldChcImlqX3N1bVwiKSk7IC8vIE9jemVraXdhbmU6IFsyLCA1LCA1LCAxMSwgMTEsIDExLCAxMV1cbi8vY29uc29sZS5sb2coXCJBMS5nZXQoJ2snKTpcIiwgQTEuZ2V0KFwia1wiKSk7ICAgICAgICAgLy8gT2N6ZWtpd2FuZTogMTAwXG4vL2NvbnNvbGUubG9nKFwiQTEuZ2V0KCdpX3BsdXNfaycpOlwiLCBBMS5nZXQoXCJpX3BsdXNfa1wiKSk7IC8vIE9jemVraXdhbmU6IFsxMDEsIDEwMiwgMTAzLCAxMDQsIDEwNSwgMTA2LCAxMDddXG4vL2NvbnNvbGUubG9nKFwiV2FydG9cdTAxNUJcdTAxMDcgaVszXSAoaW5kZWtzIDMsIGN6eWxpIGN6d2FydHkgZWxlbWVudCk6XCIsIChBMS5nZXQoXCJpXCIpIGFzIG51bWJlcltdKVszXSk7IC8vIE9jemVraXdhbmU6IDRcbiIsICIvKiogQGpzeFJ1bnRpbWUgYXV0b21hdGljICovXG4vKiogQGpzeEltcG9ydFNvdXJjZSBodHRwczovL2VzbS5zaC9wcmVhY3RAMTAuMjYuOCAqL1xuXG5pbXBvcnQgeyBKU1ggfSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvcHJlYWN0QDEwLjI2LjhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFBsb3RIdG1sVGFibGUoXG4gIHByb3BzOiB7XG4gICAgZGF0YTogKHN0cmluZyB8IG51bWJlcilbXVtdO1xuICAgIG1vZGU6IFwiUk9XXCIgfCBcIkNPTFwiO1xuICAgIHRhYmxlQ2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGNhcHRpb24/OiBzdHJpbmc7XG4gICAgdGhDbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgdGRDbGFzc05hbWU/OiBzdHJpbmc7XG4gIH0sXG4pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IHtcbiAgICBkYXRhLFxuICAgIG1vZGUsXG4gICAgdGFibGVDbGFzc05hbWUsXG4gICAgY2FwdGlvbixcbiAgICB0aENsYXNzTmFtZSxcbiAgICB0ZENsYXNzTmFtZSxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGlzQ29sTW9kZSA9IG1vZGUgPT09IFwiQ09MXCI7XG5cbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIDx0YWJsZSBjbGFzc05hbWU9e3RhYmxlQ2xhc3NOYW1lID8/IFwiXCJ9PjwvdGFibGU+O1xuICB9XG5cbiAgY29uc3QgaGVhZGVyUm93ID0gaXNDb2xNb2RlID8gZGF0YVswXSA6IGRhdGEubWFwKChyb3cpID0+IHJvd1swXSk7XG4gIGNvbnN0IGJvZHlSb3dzID0gaXNDb2xNb2RlID8gZGF0YS5zbGljZSgxKSA6IGRhdGEubWFwKChyb3cpID0+IHJvdy5zbGljZSgxKSk7XG5cbiAgZnVuY3Rpb24ga2V5SUQoa2V5OiBzdHJpbmcgfCBudW1iZXIpOiBzdHJpbmcge1xuICAgIGtleSA9IGAke2tleX1gO1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgIGtleSAhPT0gXCI9fHxcIiAmJlxuICAgICAgICBrZXkgIT09IFwiXCJcbiAgICAgID8ga2V5LnJlcGxhY2VBbGwoXCJcdTMwMTBcIiwgXCJcIikucmVwbGFjZUFsbChcIlx1MzAxMVwiLCBcIlwiKSBhcyBzdHJpbmdcbiAgICAgIDogXCJub25lTk9ORVwiO1xuICB9XG4gIGZ1bmN0aW9uIGlmTlVMTCh2YWx1ZUNlbGw6IHN0cmluZyB8IG51bWJlciwga2V5SUQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZUNlbGwgPT0gXCJudW1iZXJcIlxuICAgICAgPyBrZXlJRFxuICAgICAgOiB2YWx1ZUNlbGwgPT0gXCJzdHJpbmdcIiAmJiB2YWx1ZUNlbGwubGVuZ3RoID4gMFxuICAgICAgPyBrZXlJRFxuICAgICAgOiBcIm5vbmVOT05FXCI7XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8dGFibGVcbiAgICAgIGNsYXNzTmFtZT17YCR7aXNDb2xNb2RlID8gXCJwbG90LWNvbC1kYXRhMVwiIDogXCJwbG90LXJvdy1kYXRhMVwifSAke1xuICAgICAgICB0YWJsZUNsYXNzTmFtZSA/PyBcIlwiXG4gICAgICB9YH1cbiAgICA+XG4gICAgICB7Y2FwdGlvbiAmJiA8Y2FwdGlvbj57Y2FwdGlvbn08L2NhcHRpb24+fVxuXG4gICAgICA8dGJvZHk+XG4gICAgICAgIHtpc0NvbE1vZGVcbiAgICAgICAgICA/IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIHsvKiBOYWdcdTAxNDJcdTAwRjN3a2kgKi99XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICB7aGVhZGVyUm93Lm1hcCgoa2V5LCBjb2xJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3Qga2V5U3RyID0gaWZOVUxMKGtleSwga2V5SUQoa2V5KSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8dGhcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0YWJsZS12YWwtdHlwZS0tJHtrZXlTdHJ9ICR7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aENsYXNzTmFtZSA/PyBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtrZXlTdHJ9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB7a2V5fVxuICAgICAgICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgey8qIERhbmUgKi99XG4gICAgICAgICAgICAgIHtib2R5Um93cy5tYXAoKHJvdywgcm93SW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICA8dHIga2V5PXtgcm93LSR7cm93SW5kZXh9YH0+XG4gICAgICAgICAgICAgICAgICB7cm93Lm1hcCgoY2VsbCwgY29sSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gaWZOVUxMKGNlbGwsIGtleUlEKGhlYWRlclJvd1tjb2xJbmRleF0pKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICA8dGRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHRhYmxlLXZhbC10eXBlLS0ke2tleX0gJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGRDbGFzc05hbWUgPz8gXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2Ake2tleX0tcm93LSR7cm93SW5kZXh9YH1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Y2VsbH1cbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApXG4gICAgICAgICAgOiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICB7ZGF0YS5tYXAoKHJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyAhIG5pZSBqZXN0ZW0gcGV3aWVuXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5SUQocm93WzBdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPHRyIGtleT17YHNlcmllcy1yb3ctJHtrZXl9YH0+XG4gICAgICAgICAgICAgICAgICAgIDx0aFxuICAgICAgICAgICAgICAgICAgICAgIHNjb3BlPVwicm93XCJcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0YWJsZS12YWwtdHlwZS0tJHtpZk5VTEwocm93WzBdLCBrZXkpfSAke1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhDbGFzc05hbWUgPz8gXCJcIlxuICAgICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAge3Jvd1swXX1cbiAgICAgICAgICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICAgICAgICAge3Jvdy5zbGljZSgxKS5tYXAoKGNlbGwsIGNvbEluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgPHRkXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0YWJsZS12YWwtdHlwZS0tJHtpZk5VTEwoY2VsbCwga2V5KX0gJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGRDbGFzc05hbWUgPz8gXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2Ake2tleX0tY29sLSR7Y29sSW5kZXh9YH1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Y2VsbH1cbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApfVxuICAgICAgPC90Ym9keT5cbiAgICA8L3RhYmxlPlxuICApO1xufVxuIiwgImV4cG9ydCBmdW5jdGlvbiBmbG9vckxvZzIoeDpudW1iZXIpOm51bWJlciB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgubG9nMih4KSk7XG59XG5cbi8vICB0byBrbGFzeWN6bmEgcG90XHUwMTE5Z2EgZHdcdTAwRjNqa2kuXG5leHBvcnQgZnVuY3Rpb24gcG93Mih4Om51bWJlcik6bnVtYmVyIHtcbiAgcmV0dXJuIE1hdGgucG93KDIseCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcG93MkFmZmluZShcbiAgYTogbnVtYmVyLFxuICBiOiBudW1iZXIsXG4gIGM6IG51bWJlcixcbiAgeDogbnVtYmVyLFxuICBmPzogKHZhbDogbnVtYmVyKSA9PiBudW1iZXIgLy8gT3Bjam9uYWxueSBhcmd1bWVudCBjYWxsYmFja1xuKTogbnVtYmVyIHtcbiAgY29uc3QgcHJvY2Vzc2VkWCA9IGYgPyBmKHgpIDogeDsgLy8gSmVcdTAxNUJsaSBmIGlzdG5pZWplLCB6YXN0b3N1aiBqZSBkbyB4LCB3IHByemVjaXdueW0gcmF6aWUgdVx1MDE3Q3lqIHhcbiAgcmV0dXJuIGEgKiAyICoqIChwcm9jZXNzZWRYICsgYikgKyBjO1xufVxuXG4vKlxuZXhwb3J0IGZ1bmN0aW9uIHBvdzJBZmZpbmUoeDogbnVtYmVyLCBhOiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIGEgKiAyICoqICh4ICsgYikgKyBjO1xufVxuKi9cblxuLy8gIHdhbHVhY2phIGR3dS1hZHljem5hIGxpY3pieSBuYXR1cmFsbmVqIGRvZGF0bmllaiBcbi8vICBjenlsaSBuYWp3aVx1MDExOWtzelx1MDEwNSBwb3RcdTAxMTlnXHUwMTE5IGxpY3pieSAyLCBrdFx1MDBGM3JhIGR6aWVsaSB4XG4vLyAgbWFwbGUgYGsgOj0geCAtPiBpbG9nMih4IC0gQml0c1tBbmRdKHgsIHggLSAxKSlgXG4vLyAgayh4KT1vcmRfMih4KVxuLy8gIEN6eWxpOiBpbGUgcmF6eSB4IG1vXHUwMTdDbmEgcG9kemllbGlcdTAxMDcgcHJ6ZXogMiwgemFuaW0gcHJ6ZXN0YW5pZSBieVx1MDEwNyBjYVx1MDE0Mmtvd2l0ZSBcbi8vICAobHViLCByXHUwMEYzd25vem5hY3puaWUsIHBvenljamEgbmFqbVx1MDE0Mm9kc3plZ28gdXN0YXdpb25lZ28gYml0dSB3IHgpLlxuZXhwb3J0IGZ1bmN0aW9uIHZhbDJBZGljKHg6IG51bWJlcik6IG51bWJlciB7XG4gIGlmICh4IDw9IDAgfHwgIU51bWJlci5pc0ludGVnZXIoeCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCBtdXNpIGJ5XHUwMTA3IGRvZGF0bmlcdTAxMDUgbGljemJcdTAxMDUgY2FcdTAxNDJrb3dpdFx1MDEwNS5cIik7XG4gIH1cbiAgcmV0dXJuIE1hdGgubG9nMih4ICYgLXgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG93MkFmZmluZV92YWwyQWRpYyh4OiBudW1iZXIsIGE6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gYSAqIDIgKiogKHZhbDJBZGljKHgpICsgYikgKyBjO1xufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgZnVuY3Rpb24gaXNOb3RWYWxOYXR1cmFsUG9zKHZhbDp1bmtub3duKTpib29sZWFuIHtcbiAgcmV0dXJuICh0eXBlb2YgdmFsICE9PSBcIm51bWJlclwiIHx8IGlzTmFOKHZhbCkgfHwgIU51bWJlci5pc0ludGVnZXIodmFsKSB8fFxuICB2YWwgPD0gMCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOb3RWYWxOYXR1cmFsUG9zV2l0aFplcm8odmFsOnVua25vd24pOmJvb2xlYW4ge1xuICByZXR1cm4gKHR5cGVvZiB2YWwgIT09IFwibnVtYmVyXCIgfHwgaXNOYU4odmFsKSB8fCAhTnVtYmVyLmlzSW50ZWdlcih2YWwpIHx8XG4gIHZhbCA8IDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVzdFNvbU5vdE9mVmFsc0FycmF5KHY6c3RyaW5nLCBhcnI6dW5rbm93biwgdGVzdDpcImlzTm90VmFsTmF0dXJhbFBvc1wifFwiaXNOb3RWYWxOYXR1cmFsUG9zV2l0aFplcm9cIik6dm9pZCB7XG4gIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFptaWVubmUgJHt2fSAgbXVzelx1MDEwNSBieVx1MDEwNyB0YWJsaWNhbWkuYCxcbiAgICApO1xuICB9XG4gIHN3aXRjaCAodGVzdCkge1xuICAgIGNhc2UgXCJpc05vdFZhbE5hdHVyYWxQb3NcIjpcbiAgICAgIGlmIChhcnIuc29tZShpc05vdFZhbE5hdHVyYWxQb3MpKSB7dGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBXc3p5c3RraWUgZWxlbWVudHkgdyB0YWJsaWN5ICR7dn0gbXVzelx1MDEwNSBieVx1MDEwNyBsaWN6YmFtaSBuYXR1cmFsbnltaSBkb2RhdG5pbWkgKHdpXHUwMTE5a3N6eW1pIG9kIDApLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaXNOb3RWYWxOYXR1cmFsUG9zV2l0aFplcm9cIjpcbiAgICAgIGlmIChhcnIuc29tZShpc05vdFZhbE5hdHVyYWxQb3NXaXRoWmVybykpIHt0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBXc3p5c3RraWUgZWxlbWVudHkgdyB0YWJsaWN5ICR7dn0gbXVzelx1MDEwNSBieVx1MDEwNyBsaWN6YmFtaSBuYXR1cmFsbnltaSBkb2RhdG5pbWkgeiB6ZXJvICh3aVx1MDExOWtzenltaSBvZCAtMSkuYCxcbiAgICAgICk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIEV4Y2VsLFxuICAvL3R5cGUgRXhjZWxOZXN0ZWROLFxuICB0eXBlIEV4Y2VsUmVzdWx0cyxcbiAgdHlwZSBFeGNlbFNldHNHZXQsXG4gIHR5cGUgRXhjZWxTZXRzU2V0LFxuICAvL2luaXRSYW5nZUZpcnN0U3RlcExhc3QsXG4gIC8vaW5pdFJhbmdlRmlyc3RTdGVwU2l6ZSxcbn0gZnJvbSBcIi4uL2xvZ2ljL2NhbGN1bGF0ZUV4Y2VsLnRzXCI7XG5pbXBvcnQgKiBhcyBNYXRoRiBmcm9tIFwiLi4vbG9naWMvbWF0aEZ1bmMudHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJUYWJsZTEoaURhdGE6IG51bWJlcltdKTpFeGNlbFJlc3VsdHMge1xuICBjb25zdCBtYXRoRW50ZXI6IEV4Y2VsU2V0c1NldFtdID0gW1xuICAgIHtcbiAgICAgIHZhcjogXCJpXCIsXG4gICAgICB2YWw6IGlEYXRhLFxuICAgIH0sXG4gIF07XG4gIGNvbnN0IG1hdGhDYWxjczogRXhjZWxTZXRzR2V0W10gPSBbXG4gICAge1xuICAgICAgdmFyOiBcImhcIixcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XG4gICAgICAgIGNvbnN0IGlfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwiaVwiKTtcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwiaVwiLCBpX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxuICAgICAgICByZXR1cm4gaV9fQXJyYXkubWFwKCh2YWxfaSwgX2luZGV4KSA9PlxuICAgICAgICAgIE1hdGhGLmZsb29yTG9nMih2YWxfaSBhcyBudW1iZXIpXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdmFyOiBcImhBXCIsXG4gICAgICB2YWw6IChjdXJyZW50TSkgPT4ge1xuICAgICAgICBjb25zdCBoX19BcnJheSA9IGN1cnJlbnRNLmdldChcImhcIik7XG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcbiAgICAgICAgICBcImhcIixcbiAgICAgICAgICBoX19BcnJheSxcbiAgICAgICAgICBcImlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvXCIsXG4gICAgICAgICk7XG4gICAgICAgIC8vIGhfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KCdoJyxoX19BcnJheSxcImlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvXCIpOyFcblxuICAgICAgICByZXR1cm4gaF9fQXJyYXkubWFwKCh2YWxfaCwgX2luZGV4KSA9PlxuICAgICAgICAgIE1hdGhGLnBvdzJBZmZpbmUoMSwgMCwgMCwgdmFsX2ggYXMgbnVtYmVyKVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHZhcjogXCJoWlwiLFxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcbiAgICAgICAgY29uc3QgaF9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJoXCIpO1xuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXG4gICAgICAgICAgXCJoXCIsXG4gICAgICAgICAgaF9fQXJyYXksXG4gICAgICAgICAgXCJpc05vdFZhbE5hdHVyYWxQb3NXaXRoWmVyb1wiLFxuICAgICAgICApO1xuICAgICAgICAvLyBoX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaCcsaF9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NXaXRoWmVyb1wiKTshXG5cbiAgICAgICAgcmV0dXJuIGhfX0FycmF5Lm1hcCgodmFsX2gsIF9pbmRleCkgPT5cbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDEsIC0xLCB2YWxfaCBhcyBudW1iZXIpXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdmFyOiBcImhBWlwiLFxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcbiAgICAgICAgY29uc3QgaF9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJoXCIpO1xuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXG4gICAgICAgICAgXCJoXCIsXG4gICAgICAgICAgaF9fQXJyYXksXG4gICAgICAgICAgXCJpc05vdFZhbE5hdHVyYWxQb3NXaXRoWmVyb1wiLFxuICAgICAgICApO1xuICAgICAgICAvLyBoX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaCcsaF9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NXaXRoWmVyb1wiKTshXG5cbiAgICAgICAgcmV0dXJuIGhfX0FycmF5Lm1hcCgodmFsX2gsIF9pbmRleCkgPT5cbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEuNSwgMSwgLTEsIHZhbF9oIGFzIG51bWJlcilcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB2YXI6IFwiaGlcIixcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XG4gICAgICAgIGNvbnN0IGlfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwiaVwiKTtcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwiaVwiLCBpX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XG4gICAgICAgIGNvbnN0IGhBX19BcnJheSA9IGN1cnJlbnRNLmdldChcImhBXCIpO1xuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXG4gICAgICAgICAgXCJoQVwiLFxuICAgICAgICAgIGhBX19BcnJheSxcbiAgICAgICAgICBcImlzTm90VmFsTmF0dXJhbFBvc1wiLFxuICAgICAgICApO1xuICAgICAgICAvLyBoX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaCcsaF9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NXaXRoWmVyb1wiKTshXG5cbiAgICAgICAgcmV0dXJuIGlfX0FycmF5Lm1hcCgodmFsX2ksIGluZGV4KSA9PlxuICAgICAgICAgICh2YWxfaSBhcyBudW1iZXIpIC0gaEFfX0FycmF5W2luZGV4XVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHZhcjogXCJoalwiLFxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcbiAgICAgICAgY29uc3QgaV9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJpXCIpO1xuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXCJpXCIsIGlfX0FycmF5LCBcImlzTm90VmFsTmF0dXJhbFBvc1wiKTtcbiAgICAgICAgY29uc3QgaFpfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwiaFpcIik7XG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcbiAgICAgICAgICBcImhaXCIsXG4gICAgICAgICAgaFpfX0FycmF5LFxuICAgICAgICAgIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIsXG4gICAgICAgICk7XG4gICAgICAgIC8vIGhfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KCdoJyxoX19BcnJheSxcImlzTm90VmFsTmF0dXJhbFBvc1dpdGhaZXJvXCIpOyFcblxuICAgICAgICByZXR1cm4gaV9fQXJyYXkubWFwKCh2YWxfaSwgaW5kZXgpID0+XG4gICAgICAgICAgaFpfX0FycmF5W2luZGV4XSAtICh2YWxfaSBhcyBudW1iZXIpXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdmFyOiBcImpcIixcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XG4gICAgICAgIGNvbnN0IGlfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwiaVwiKTtcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwiaVwiLCBpX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XG5cbiAgICAgICAgLy8gaF9fQXJyYXkgLSBuaWUgbWEgc3phbnMgYnlcdTAxMDcgdW5kZWZpbmVkLCBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoJ2gnLGhfX0FycmF5LFwiaXNOb3RWYWxOYXR1cmFsUG9zV2l0aFplcm9cIik7IVxuXG4gICAgICAgIHJldHVybiBpX19BcnJheS5tYXAoKHZhbF9pLCBpbmRleCkgPT5cbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEuNSwgMSwgLTEsIE1hdGhGLmZsb29yTG9nMih2YWxfaSBhcyBudW1iZXIpKSAtXG4gICAgICAgICAgKHZhbF9pIGFzIG51bWJlcilcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB2YXI6IFwia2lcIixcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XG4gICAgICAgIGNvbnN0IGlfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwiaVwiKTtcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwiaVwiLCBpX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxuICAgICAgICByZXR1cm4gaV9fQXJyYXkubWFwKCh2YWxfaSwgX2luZGV4KSA9PiBNYXRoRi52YWwyQWRpYyh2YWxfaSBhcyBudW1iZXIpKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB2YXI6IFwia2pcIixcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XG4gICAgICAgIGNvbnN0IGpfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwialwiKTtcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwialwiLCBqX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxuICAgICAgICByZXR1cm4gal9fQXJyYXkubWFwKCh2YWxfaiwgX2luZGV4KSA9PiBNYXRoRi52YWwyQWRpYyh2YWxfaiBhcyBudW1iZXIpKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB2YXI6IFwia2lBXCIsXG4gICAgICB2YWw6IChjdXJyZW50TSkgPT4ge1xuICAgICAgICBjb25zdCBpX19BcnJheSA9IGN1cnJlbnRNLmdldChcImlcIik7XG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcImlcIiwgaV9fQXJyYXksIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpO1xuICAgICAgICAvLyBpX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIGJvIGtvbnRyb2xhIGplc3QgdyBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoJ2knLGlfX0FycmF5LFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpOyFcbiAgICAgICAgcmV0dXJuIGlfX0FycmF5Lm1hcCgodmFsX2ksIF9pbmRleCkgPT5cbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDAsIDAsIHZhbF9pIGFzIG51bWJlciwgTWF0aEYudmFsMkFkaWMpXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdmFyOiBcImtqQVwiLFxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcbiAgICAgICAgY29uc3Qgal9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJqXCIpO1xuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXCJqXCIsIGpfX0FycmF5LCBcImlzTm90VmFsTmF0dXJhbFBvc1wiKTtcbiAgICAgICAgLy8gaV9fQXJyYXkgLSBuaWUgbWEgc3phbnMgYnlcdTAxMDcgdW5kZWZpbmVkLCBibyBrb250cm9sYSBqZXN0IHcgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KCdpJyxpX19BcnJheSxcImlzTm90VmFsTmF0dXJhbFBvc1wiKTshXG4gICAgICAgIHJldHVybiBqX19BcnJheS5tYXAoKHZhbF9qLCBfaW5kZXgpID0+XG4gICAgICAgICAgTWF0aEYucG93MkFmZmluZSgxLCAwLCAwLCB2YWxfaiBhcyBudW1iZXIsIE1hdGhGLnZhbDJBZGljKVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAge1xuICAgICAgdmFyOiBcImtpWlwiLFxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcbiAgICAgICAgY29uc3QgaV9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJpXCIpO1xuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXCJpXCIsIGlfX0FycmF5LCBcImlzTm90VmFsTmF0dXJhbFBvc1wiKTtcbiAgICAgICAgLy8gaV9fQXJyYXkgLSBuaWUgbWEgc3phbnMgYnlcdTAxMDcgdW5kZWZpbmVkLCBibyBrb250cm9sYSBqZXN0IHcgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KCdpJyxpX19BcnJheSxcImlzTm90VmFsTmF0dXJhbFBvc1wiKTshXG4gICAgICAgIHJldHVybiBpX19BcnJheS5tYXAoKHZhbF9pLCBfaW5kZXgpID0+XG4gICAgICAgICAgTWF0aEYucG93MkFmZmluZSgxLCAxLCAtMSwgdmFsX2kgYXMgbnVtYmVyLCBNYXRoRi52YWwyQWRpYylcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB2YXI6IFwia2paXCIsXG4gICAgICB2YWw6IChjdXJyZW50TSkgPT4ge1xuICAgICAgICBjb25zdCBqX19BcnJheSA9IGN1cnJlbnRNLmdldChcImpcIik7XG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcImpcIiwgal9fQXJyYXksIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpO1xuICAgICAgICAvLyBpX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIGJvIGtvbnRyb2xhIGplc3QgdyBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoJ2knLGlfX0FycmF5LFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpOyFcbiAgICAgICAgcmV0dXJuIGpfX0FycmF5Lm1hcCgodmFsX2osIF9pbmRleCkgPT5cbiAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDEsIC0xLCB2YWxfaiBhcyBudW1iZXIsIE1hdGhGLnZhbDJBZGljKVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAge1xuICAgICAgdmFyOiBcImxpXCIsXG4gICAgICB2YWw6IChjdXJyZW50TSkgPT4ge1xuICAgICAgICBjb25zdCBpX19BcnJheSA9IGN1cnJlbnRNLmdldChcImlcIik7XG4gICAgICAgIE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheShcImlcIiwgaV9fQXJyYXksIFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpO1xuICAgICAgICAvLyBpX19BcnJheSAtIG5pZSBtYSBzemFucyBieVx1MDEwNyB1bmRlZmluZWQsIGJvIGtvbnRyb2xhIGplc3QgdyBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoJ2knLGlfX0FycmF5LFwiaXNOb3RWYWxOYXR1cmFsUG9zXCIpOyFcbiAgICAgICAgcmV0dXJuIGlfX0FycmF5Lm1hcCgodmFsX2ksIF9pbmRleCkgPT5cbiAgICAgICAgICAodmFsX2kgYXMgbnVtYmVyKSAvXG4gICAgICAgICAgTWF0aEYucG93MkFmZmluZSgxLCAwLCAwLCB2YWxfaSBhcyBudW1iZXIsIE1hdGhGLnZhbDJBZGljKVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHZhcjogXCJsalwiLFxuICAgICAgdmFsOiAoY3VycmVudE0pID0+IHtcbiAgICAgICAgY29uc3Qgal9fQXJyYXkgPSBjdXJyZW50TS5nZXQoXCJqXCIpO1xuICAgICAgICBNYXRoRi50ZXN0U29tTm90T2ZWYWxzQXJyYXkoXCJqXCIsIGpfX0FycmF5LCBcImlzTm90VmFsTmF0dXJhbFBvc1wiKTtcbiAgICAgICAgLy8gaV9fQXJyYXkgLSBuaWUgbWEgc3phbnMgYnlcdTAxMDcgdW5kZWZpbmVkLCBibyBrb250cm9sYSBqZXN0IHcgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KCdpJyxpX19BcnJheSxcImlzTm90VmFsTmF0dXJhbFBvc1wiKTshXG4gICAgICAgIHJldHVybiBqX19BcnJheS5tYXAoKHZhbF9qLCBfaW5kZXgpID0+XG4gICAgICAgICAgKHZhbF9qIGFzIG51bWJlcikgL1xuICAgICAgICAgIE1hdGhGLnBvdzJBZmZpbmUoMSwgMCwgMCwgdmFsX2ogYXMgbnVtYmVyLCBNYXRoRi52YWwyQWRpYylcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB2YXI6IFwibWlcIixcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XG4gICAgICAgIGNvbnN0IGlfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwiaVwiKTtcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwiaVwiLCBpX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxuICAgICAgICByZXR1cm4gaV9fQXJyYXkubWFwKCh2YWxfaSwgX2luZGV4KSA9PlxuICAgICAgICAgICgodmFsX2kgYXMgbnVtYmVyKSAvXG4gICAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDAsIDAsIHZhbF9pIGFzIG51bWJlciwgTWF0aEYudmFsMkFkaWMpKSArIDFcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB2YXI6IFwid2pcIixcbiAgICAgIHZhbDogKGN1cnJlbnRNKSA9PiB7XG4gICAgICAgIGNvbnN0IGpfX0FycmF5ID0gY3VycmVudE0uZ2V0KFwialwiKTtcbiAgICAgICAgTWF0aEYudGVzdFNvbU5vdE9mVmFsc0FycmF5KFwialwiLCBqX19BcnJheSwgXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7XG4gICAgICAgIC8vIGlfX0FycmF5IC0gbmllIG1hIHN6YW5zIGJ5XHUwMTA3IHVuZGVmaW5lZCwgYm8ga29udHJvbGEgamVzdCB3IE1hdGhGLnRlc3RTb21Ob3RPZlZhbHNBcnJheSgnaScsaV9fQXJyYXksXCJpc05vdFZhbE5hdHVyYWxQb3NcIik7IVxuICAgICAgICByZXR1cm4gal9fQXJyYXkubWFwKCh2YWxfaiwgX2luZGV4KSA9PlxuICAgICAgICAgICgodmFsX2ogYXMgbnVtYmVyKSAvXG4gICAgICAgICAgICBNYXRoRi5wb3cyQWZmaW5lKDEsIDAsIDAsIHZhbF9qIGFzIG51bWJlciwgTWF0aEYudmFsMkFkaWMpKSArIDJcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgXTtcblxuICByZXR1cm4gRXhjZWwobWF0aEVudGVyLCBtYXRoQ2FsY3MpO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIkFBRUEsT0FBUyxVQUFBQSxPQUFjLGdDQ0F2QixPQUFpQixhQUFBQyxNQUFpQix1Q0NDbEMsT0FDRSxlQUFBQyxFQUNBLGFBQUFDLEdBQ0EsVUFBQUMsT0FDSyxzQ0FRTCxPQUdBLFlBQUFDLEdBSEEsT0FBQUMsRUFHQSxRQUFBQyxNQUhBLDRDQURGLElBQU1DLEdBQ0pGLEVBQUMsUUFBSyxFQUFFLElBQUksRUFBRSxLQUFLLE1BQU0sS0FBSyxPQUFPLElBQUksR0FBRyxJQUFJLEVBRTVDRyxHQUNKRixFQUFBRixHQUFBLENBQ0UsVUFBQUMsRUFBQyxRQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksTUFBTSxJQUFJLE9BQU8sS0FBSyxHQUFHLElBQUksRUFDaERBLEVBQUMsUUFBSyxFQUFFLElBQUksRUFBRSxLQUFLLE1BQU0sS0FBSyxPQUFPLElBQUksR0FBRyxJQUFJLEdBQ2xELEVBb0NJSSxFQUFnQixDQUNwQixpQkFBa0IsSUFDbEIsa0JBQW1CLEdBQ25CLFFBQVMsQ0FDUCxPQUFRLENBQ04sS0FBTSxhQUNOLE1BQU8sQ0FDTCxDQUNFLFNBQVUsV0FDVixFQUFHLDBMQUNILFlBQWEsU0FDZixFQUNBLENBQ0UsU0FBVSxrQkFDVixFQUFHLGdXQUNILFlBQ0UsU0FDSixDQUNGLENBQ0YsRUFDQSxVQUFXLENBQ1QsS0FBTSxnQkFDTixNQUFPLENBQ0wsQ0FDRSxTQUFVLFdBQ1YsRUFBRyxrR0FDSCxZQUFh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Q1BBLEVBQUMsTUFBRywyRUFBMkMsRUFDL0NBLEVBQUMsTUFBRyw2REFBa0MsRUFDdENBLEVBQUMsTUFBRyxtRUFBd0MsRUFDNUNBLEVBQUMsTUFBRyxrRkFBdUQsRUFDM0RBLEVBQUMsTUFBRyx5REFBZSxFQUNuQkEsRUFBQyxNQUFHLHlEQUFlLEVBQ25CQSxFQUFDLE1BQUcseURBQWUsR0FDckIsRUFDRixFQUNBQSxFQUFDLEtBQ0MsU0FBQUMsRUFBQyxNQUNDLFVBQUFELEVBQUMsTUFBRyxpRkFFSixFQUNBQSxFQUFDLE1BQUcsaUZBRUosRUFDQUEsRUFBQyxNQUFHLCtDQUFlLEVBQ25CQSxFQUFDLE1BQUcsK0NBQWUsRUFDbkJBLEVBQUMsTUFBRyx5REFBZSxFQUNuQkEsRUFBQyxNQUFHLHlEQUFlLEVBQ25CQSxFQUFDLE1BQUcsMkNBQVcsRUFDZkEsRUFBQyxNQUFHLDJDQUFXLEdBQ2pCLEVBQ0YsR0FDRixDQUVKLENEblFPLGNBQUF5QixPQUFBLDRDQUFQQyxHQUFPRCxHQUFDRSxHQUFBLEVBQUksRUFBSSxTQUFTLGVBQWUsTUFBTSxDQUFFIiwKICAibmFtZXMiOiBbInJlbmRlciIsICJ1c2VTaWduYWwiLCAidXNlQ2FsbGJhY2siLCAidXNlRWZmZWN0IiwgInVzZVJlZiIsICJGcmFnbWVudCIsICJqc3giLCAianN4cyIsICJEZWZhdWx0RGVjcmVtZW50SWNvblN2Z0NvbnRlbnQiLCAiRGVmYXVsdEluY3JlbWVudEljb25TdmdDb250ZW50IiwgInN2Z0xheW91dERhdGEiLCAiQ09OVEFJTkVSX0NMQVNTX05BTUUiLCAiU1ZHX0NMQVNTX05BTUUiLCAiU1ZHX0JVVFRPTl9DTEFTU19OQU1FIiwgIkhUTUxfSU5QVVRfQ0xBU1NfTkFNRSIsICJJbnB1dE51bWJlciIsICJwcm9wcyIsICJ2YWx1ZSIsICJkZWZhdWx0VmFsdWUiLCAiZGVmIiwgIm1pbiIsICJtYXgiLCAic3RlcCIsICJwbGFjZWhvbGRlciIsICJyZXF1aXJlZCIsICJkaXNhYmxlZCIsICJuYW1lIiwgImlkIiwgInJlYWRPbmx5IiwgIm9uQ2hhbmdlIiwgIm9uVmFsdWVDaGFuZ2UiLCAicmF0aW9TSVpFIiwgIndyYXBwZXJDbGFzc05hbWUiLCAic3ZnQ2xhc3NOYW1lIiwgImlucHV0Q2xhc3NOYW1lIiwgInN0eWxlIiwgInNlbGVjdEJ1dHRvblN0eWxlIiwgImluY3JlbWVudEJ1dHRvblN0eWxlIiwgImRlY3JlbWVudEJ1dHRvblN0eWxlIiwgImlucHV0QXJlYVN0eWxlIiwgInNlbGVjdEJ1dHRvbkZpbGwiLCAiaW5jcmVtZW50QnV0dG9uRmlsbCIsICJkZWNyZW1lbnRCdXR0b25GaWxsIiwgImlucHV0QXJlYVJlY3RGaWxsIiwgImlucHV0QXJlYUJvcmRlckZpbGwiLCAicmVzdERpdlByb3BzIiwgImlucHV0UmVmIiwgImhhbmRsZVN0ZXAiLCAiZGlyZWN0aW9uIiwgImV2ZW50IiwgImhhbmRsZURlY3JlbWVudCIsICJoYW5kbGVJbmNyZW1lbnQiLCAiaGFuZGxlQ2hvb3NlQ2xpY2siLCAibmV3VmFsdWUiLCAiaGFuZGxlSW5wdXRDaGFuZ2UiLCAiZSIsICJyYXdWYWx1ZSIsICJudW1lcmljVmFsdWUiLCAicGFyc2VkIiwgImNvbnRhaW5lcldpZHRoIiwgImNvbnRhaW5lckhlaWdodCIsICJodG1sSW5wdXRTdHlsZSIsICJpY29uVmlld0JveFNpemUiLCAiaWNvbkFjdHVhbFNjYWxlIiwgImRpc3BsYXlWYWx1ZSIsICJjb21tb25TdmdCdXR0b25TdHlsZSIsICJwIiwgImkiLCAidXNlRWZmZWN0IiwgInVzZVJlZiIsICJ1c2VTdGF0ZSIsICJ1c2VTaWduYWwiLCAiRnJhZ21lbnQiLCAianN4IiwgImpzeHMiLCAiSW5wdXRDaGlwc01vZGUiLCAiVmlldyIsICJEcmFnIiwgIkNsaWNrIiwgIklucHV0Q2hpcHNMaXN0IiwgInByb3BzIiwgInRpdGxlQXZhaWxhYmxlIiwgInRpdGxlU2VsZWN0ZWQiLCAidGl0bGVNb2RlQnV0dG9uIiwgInRpdGxlTW9kZSIsICJhdmFpbGFibGVWYWx1ZXMiLCAidmFsdWVzIiwgImRlZmF1bHRWYWx1ZXMiLCAib25DaGFuZ2UiLCAibW9kZTMiLCAic2VsZWN0ZWQiLCAic2V0U2VsZWN0ZWQiLCAicmVtYWluaW5nIiwgInVzZWRDb3VudCIsICJ2YWwiLCAicmVzdWx0IiwgImtleSIsICJ0b3RhbCIsICJ1c2VkIiwgImkiLCAidG9nZ2xlTW9kZSIsICJoYW5kbGVBZGQiLCAiaGFuZGxlUmVtb3ZlIiwgImluZGV4IiwgInByZXYiLCAiY29weSIsICJoYW5kbGVNb3ZlTGVmdCIsICJoYW5kbGVNb3ZlUmlnaHQiLCAiZHJhZ0luZGV4IiwgImRyYWdBdmFpbGFibGVDaGlwIiwgIm9uRHJhZ1N0YXJ0QXZhaWxhYmxlIiwgImUiLCAiY2hpcCIsICJvbkRyYWdFbmRBdmFpbGFibGUiLCAib25EcmFnU3RhcnRTZWxlY3RlZCIsICJvbkRyYWdFbmRTZWxlY3RlZCIsICJvbkRyb3BTZWxlY3RlZCIsICJ0YXJnZXRJbmRleCIsICJuZXdTZWxlY3RlZCIsICJmcm9tSW5kZXgiLCAidG9JbmRleCIsICJtb3ZlZCIsICJvbkRyYWdPdmVyU2VsZWN0ZWQiLCAib25Ecm9wQXZhaWxhYmxlIiwgImluZGV4VG9SZW1vdmUiLCAib25EcmFnT3ZlckF2YWlsYWJsZSIsICJFeGNlbCIsICJpbnB1dFZhbHVlcyIsICJjYWxjc1ZhbHVlcyIsICJNIiwgIml0ZW0iLCAiY2FsY0l0ZW0iLCAicmVzdWx0VmFsdWUiLCAiZXJyb3IiLCAiaW5pdFJhbmdlRmlyc3RTdGVwU2l6ZSIsICJzdGFydEF0IiwgInN0ZXAiLCAiaXRlbXMiLCAicmVzdWx0IiwgImkiLCAiaW5pdFJhbmdlRmlyc3RTdGVwTGFzdCIsICJlbmRBdCIsICJjdXJyZW50VmFsdWUiLCAiRXhjZWxSZXN1bHRTb3J0aW5nT3V0cHV0QXRUYWJsZSIsICJtb2RlIiwgInNvcnQiLCAiZGF0YSIsICJwYXJ0IiwgIlRSSU0iLCAiaGVhZGVycyIsICJrZXkiLCAicm93Q291bnQiLCAibGFzdFRyaW1WYWx1ZSIsICJyb3ciLCAicm93RGF0YSIsICJjb2xEYXRhIiwgImN1cnJlbnRUcmltVmFsdWUiLCAidHJhbnNwb3NlVEFCTEUiLCAibWF0cml4IiwgInJvd3MiLCAiY29scyIsICJqIiwgIkZyYWdtZW50IiwgImpzeCIsICJqc3hzIiwgIlBsb3RIdG1sVGFibGUiLCAicHJvcHMiLCAiZGF0YSIsICJtb2RlIiwgInRhYmxlQ2xhc3NOYW1lIiwgImNhcHRpb24iLCAidGhDbGFzc05hbWUiLCAidGRDbGFzc05hbWUiLCAiaXNDb2xNb2RlIiwgImhlYWRlclJvdyIsICJyb3ciLCAiYm9keVJvd3MiLCAia2V5SUQiLCAia2V5IiwgImlmTlVMTCIsICJ2YWx1ZUNlbGwiLCAiY29sSW5kZXgiLCAia2V5U3RyIiwgInJvd0luZGV4IiwgImNlbGwiLCAiZmxvb3JMb2cyIiwgIngiLCAicG93MkFmZmluZSIsICJiIiwgImMiLCAieCIsICJmIiwgInByb2Nlc3NlZFgiLCAidmFsMkFkaWMiLCAiaXNOb3RWYWxOYXR1cmFsUG9zIiwgInZhbCIsICJpc05vdFZhbE5hdHVyYWxQb3NXaXRoWmVybyIsICJ0ZXN0U29tTm90T2ZWYWxzQXJyYXkiLCAidiIsICJhcnIiLCAidGVzdCIsICJnZW5lclRhYmxlMSIsICJpRGF0YSIsICJFeGNlbCIsICJjdXJyZW50TSIsICJpX19BcnJheSIsICJ0ZXN0U29tTm90T2ZWYWxzQXJyYXkiLCAidmFsX2kiLCAiX2luZGV4IiwgImZsb29yTG9nMiIsICJoX19BcnJheSIsICJ2YWxfaCIsICJwb3cyQWZmaW5lIiwgImhBX19BcnJheSIsICJpbmRleCIsICJoWl9fQXJyYXkiLCAidmFsMkFkaWMiLCAial9fQXJyYXkiLCAidmFsX2oiLCAiRnJhZ21lbnQiLCAianN4IiwgImpzeHMiLCAiQXBwIiwgImZyb20iLCAidXNlU2lnbmFsIiwgInRvIiwgInJlc3VsdE0iLCAicmVzdWx0UyIsICJnZW5lclRhYmxlMSIsICJpbml0UmFuZ2VGaXJzdFN0ZXBTaXplIiwgInBsb3RSb3ciLCAicGxvdFNwbGl0IiwgInBsb3RTZXQiLCAiY2FsY3VsYXRlIiwgImluaXRSYW5nZUZpcnN0U3RlcExhc3QiLCAiY2hhbmdlUG9zIiwgImNoYW5nZVNwbGl0IiwgImhhbmRsZUZyb21DaGFuZ2UiLCAibmV3VmFsdWUiLCAiaGFuZGxlVG9DaGFuZ2UiLCAiSW5wdXROdW1iZXIiLCAiSW5wdXRDaGlwc0xpc3QiLCAidmFsIiwgIlBsb3RIdG1sVGFibGUiLCAiRXhjZWxSZXN1bHRTb3J0aW5nT3V0cHV0QXRUYWJsZSIsICJqc3giLCAicmVuZGVyIiwgIkFwcCJdCn0K
