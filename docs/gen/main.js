import{render as Te}from"https://esm.sh/preact@10.26.8";import{useSignal as I}from"https://esm.sh/@preact/signals@2.2.0";import{useCallback as Z,useEffect as we,useRef as Se}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as Ve,jsx as S,jsxs as O}from"https://esm.sh/preact@10.26.8/jsx-runtime";var xe=S("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"}),Me=O(Ve,{children:[S("rect",{x:"11",y:"5",width:"2",height:"14",rx:"1"}),S("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"})]}),g={baseViewBoxWidth:174,baseViewBoxHeight:72,buttons:{choose:{name:"btn-choose",paths:[{dataName:"btn-fill",d:"M115.75,71.62c-10.03,0-19.93-1.62-28.63-4.67l-.12-.04-.12.04c-8.7,3.06-18.59,4.67-28.63,4.67-13.06,0-25.81-2.75-36.02-7.75l26.96-15.21h75.61l26.96,15.21c-10.2,5-22.96,7.75-36.02,7.75Z",defaultFill:"#919191"},{dataName:"btn-border-fill",d:"M124.71,49.04l26.25,14.81c-10.04,4.78-22.48,7.4-35.21,7.4-9.99,0-19.84-1.61-28.5-4.65l-.25-.09-.25.09c-8.66,3.04-18.51,4.65-28.5,4.65-12.73,0-25.16-2.62-35.21-7.4l26.25-14.81h75.41M124.9,48.29H49.1l-27.66,15.6c10.03,5.06,22.85,8.11,36.82,8.11,10.46,0,20.27-1.71,28.75-4.69,8.48,2.98,18.29,4.69,28.75,4.69,13.97,0,26.78-3.04,36.82-8.11l-27.66-15.6h0Z",defaultFill:"#505050"}]},increment:{name:"btn-increment",paths:[{dataName:"btn-fill",d:"M127.38,43.51V1.1c26.83,3.37,46.25,18.01,46.25,34.9,0,9.19-5.68,17.91-16.01,24.57l-30.24-17.06Z",defaultFill:"#21597f"},{dataName:"btn-border-fill",d:"M127.75,1.53c26.42,3.45,45.5,17.86,45.5,34.47,0,9-5.55,17.56-15.65,24.13l-29.85-16.84V1.53M127,.68v43.05l30.63,17.28c10.13-6.48,16.37-15.29,16.37-25.01,0-17.5-20.21-32.08-47-35.32h0Z",defaultFill:"#104060"}],iconAnchorX:150,iconAnchorY:30},decrement:{name:"btn-decrement",paths:[{dataName:"btn-fill",d:"M16.38,60.57C6.06,53.91.38,45.19.38,36,.38,19.11,19.8,4.47,46.62,1.1v42.41l-30.24,17.06Z",defaultFill:"#b21010"},{dataName:"btn-border-fill",d:"M46.25,1.53v41.76h0s-29.85,16.84-29.85,16.84C6.3,53.56.75,45,.75,36,.75,19.39,19.83,4.97,46.25,1.53M47,.68C20.21,3.92,0,18.5,0,36c0,9.72,6.24,18.53,16.37,25.01l30.63-17.28V.68h0Z",defaultFill:"#800000"}],iconAnchorX:25,iconAnchorY:30}},inputArea:{name:"input",rect:{x:52.38,y:.38,width:69.25,height:42.54,defaultFill:"#fff"},borderPath:{d:"M121.25.75v41.79H52.75V.75h68.5M122,0H52v43.29h70V0h0Z",defaultFill:"#333"}}},Ce="inputnumber-container",Ee="inputnumber-svg",ne="inputnumber-svg-button",ke="inputnumber-html-input";function ae(a){let{value:o,defaultValue:u,def:t=1,min:e,max:n,step:c=1,placeholder:h,required:A,disabled:r=!1,name:d,id:p,readOnly:f=!1,onChange:N,onValueChange:E,ratioSIZE:y=1,wrapperClassName:L,svgClassName:W,inputClassName:H,style:F,selectButtonStyle:_,incrementButtonStyle:X,decrementButtonStyle:J,inputAreaStyle:G,selectButtonFill:U,incrementButtonFill:R,decrementButtonFill:Y,inputAreaRectFill:q,inputAreaBorderFill:K,...l}=a,i=Se(null);we(()=>{i.current&&(o!==void 0?i.current.value=String(o):u!==void 0?i.current.value=String(u):i.current.value="")},[o,u]);let s=Z(v=>{if(i.current&&!r&&!f){v==="up"?i.current.stepUp():i.current.stepDown();let C=new Event("input",{bubbles:!0,cancelable:!0});i.current.dispatchEvent(C)}},[r,f]),w=Z(()=>s("down"),[s]),T=Z(()=>s("up"),[s]),P=Z(()=>{if(i.current&&!r&&!f){let v=t??1;if(i.current.value=String(v),E&&E(v,d),N){let C=new Event("change",{bubbles:!0});Object.defineProperty(C,"target",{writable:!1,value:i.current}),Object.defineProperty(C,"currentTarget",{writable:!1,value:i.current}),N(C)}console.log("Choose button clicked, value set to 1")}},[r,f,d,E,N]),z=v=>{let oe=v.currentTarget.value,te;if(oe==="")te=void 0;else{let se=parseFloat(oe);te=isNaN(se)?void 0:se}E&&E(te,d),N&&N(v)},ye=g.baseViewBoxWidth*y,Ae=g.baseViewBoxHeight*y,Ne={position:"absolute",left:`${g.inputArea.rect.x*y}px`,top:`${g.inputArea.rect.y*y}px`,width:`${g.inputArea.rect.width*y}px`,height:`${g.inputArea.rect.height*y}px`,border:"none",backgroundColor:"transparent",color:"#333",textAlign:"center",fontSize:`${Math.max(8,18*y)}px`,outline:"none",padding:`0 ${Math.max(1,2*y)}px`,margin:0,boxSizing:"border-box",MozAppearance:"textfield",WebkitAppearance:"none",appearance:"none",zIndex:2},x=24,ie=1.5*(g.baseViewBoxHeight*.25*(y>.5?1:y*2)/x),Q="";o!==void 0?Q=String(o):u!==void 0&&(Q=String(u));let ee={cursor:r||f?"default":"pointer"};return O("div",{className:`${Ce} ${L||""}`,style:{width:`${ye}px`,height:`${Ae}px`,position:"relative",overflow:"hidden",...F},...l,children:[O("svg",{className:`${Ee} ${W||""}`,"data-name":"input-number",xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${g.baseViewBoxWidth} ${g.baseViewBoxHeight}`,style:{display:"block",width:"100%",height:"100%",position:"absolute",top:0,left:0},"aria-hidden":"true",children:[S("g",{className:ne,"data-name":g.buttons.choose.name,onClick:r?void 0:P,style:{...ee,..._||{}},pointerEvents:r?"none":"auto",children:g.buttons.choose.paths.map((v,C)=>S("path",{"data-name":v.dataName,d:v.d,fill:U||v.defaultFill},`choose-path-${C}`))}),O("g",{"data-name":g.inputArea.name,style:G||{},children:[S("rect",{x:g.inputArea.rect.x,y:g.inputArea.rect.y,width:g.inputArea.rect.width,height:g.inputArea.rect.height,fill:q||g.inputArea.rect.defaultFill}),S("path",{d:g.inputArea.borderPath.d,fill:K||g.inputArea.borderPath.defaultFill})]}),O("g",{className:ne,"data-name":g.buttons.decrement.name,onClick:!r&&!f?w:void 0,style:{...ee,...J||{}},pointerEvents:r||f?"none":"auto",children:[g.buttons.decrement.paths.map((v,C)=>S("path",{"data-name":v.dataName,d:v.d,fill:Y||v.defaultFill},`dec-path-${C}`)),S("g",{transform:`translate(${g.buttons.decrement.iconAnchorX}, ${g.buttons.decrement.iconAnchorY}) scale(${ie}) translate(-${x/2}, -${x/2})`,style:{pointerEvents:"none"},children:S("svg",{viewBox:`0 0 ${x} ${x}`,width:x,height:x,fill:"white",overflow:"visible",children:xe})})]}),O("g",{className:ne,"data-name":g.buttons.increment.name,onClick:!r&&!f?T:void 0,style:{...ee,...X||{}},pointerEvents:r||f?"none":"auto",children:[g.buttons.increment.paths.map((v,C)=>S("path",{"data-name":v.dataName,d:v.d,fill:R||v.defaultFill},`inc-path-${C}`)),S("g",{transform:`translate(${g.buttons.increment.iconAnchorX}, ${g.buttons.increment.iconAnchorY}) scale(${ie}) translate(-${x/2}, -${x/2})`,style:{pointerEvents:"none"},children:S("svg",{viewBox:`0 0 ${x} ${x}`,width:x,height:x,fill:"white",overflow:"visible",children:Me})})]})]}),S("input",{ref:i,className:`${ke} ${H||""}`,type:"number",name:d,id:p,value:Q,min:e,max:n,step:c,placeholder:h,required:A,disabled:r,readOnly:f,onInput:z,style:Ne,"aria-label":a["aria-label"]||"Warto\u015B\u0107 liczbowa",...l})]})}import{useEffect as Fe,useRef as ue,useState as De}from"https://esm.sh/preact@10.26.8/hooks";import{useSignal as _e}from"https://esm.sh/@preact/signals@2.2.0";import{Fragment as ce,jsx as k,jsxs as j}from"https://esm.sh/preact@10.26.8/jsx-runtime";function je(a="View",o="Drag",u="Click"){return new Map([["View",a],["Drag",o],["Click",u]])}function pe(a){let{titleAvailable:o,titleSelected:u,titleModeButton:t="Mode",titleMode:e=je(),availableValues:n,values:c,defaultValues:h=[],onChange:A=()=>{}}=a,r=_e("View"),[d,p]=De([...h]),N=(()=>{let l=new Map;d.forEach(s=>{l.set(s,(l.get(s)??0)+1)});let i=[];for(let[s,w]of n.entries()){let T=l.get(s)??0,P=w-T;for(let z=0;z<P;z++)i.push(s)}return i})();Fe(()=>{A([...d])},[d]);let E=()=>{r.value==="View"?r.value="Drag":r.value==="Drag"?r.value="Click":r.value="View"},y=l=>{r.value==="Click"&&p([...d,l])},L=l=>{r.value==="Click"&&p(i=>{let s=[...i];return s.splice(l,1),s})},W=l=>{r.value==="Click"&&(l<=0||p(i=>{let s=[...i];return[s[l-1],s[l]]=[s[l],s[l-1]],s}))},H=l=>{r.value==="Click"&&(l>=d.length-1||p(i=>{let s=[...i];return[s[l],s[l+1]]=[s[l+1],s[l]],s}))},F=ue(null),_=ue(null),X=(l,i)=>{if(r.value!=="Drag"){l.preventDefault();return}_.current=i,l.dataTransfer?.setData("text/plain",i),l.dataTransfer.effectAllowed="copy"},J=l=>{_.current=null},G=(l,i)=>{if(r.value!=="Drag"){l.preventDefault();return}F.current=i,l.dataTransfer?.setData("text/plain",d[i]),l.dataTransfer.effectAllowed="move"},U=l=>{F.current=null},R=(l,i=null)=>{if(l.preventDefault(),r.value==="Drag"){if(_.current!==null){p(s=>{let w=[...s];return i===null||i>=w.length?w.push(_.current):w.splice(i,0,_.current),w}),_.current=null;return}if(F.current!==null){let s=F.current,w=i!==null?i:d.length-1;if(s===w)return;p(T=>{let P=[...T],[z]=P.splice(s,1);return P.splice(w,0,z),P}),F.current=null}}},Y=l=>{r.value==="Drag"&&l.preventDefault()},q=l=>{if(l.preventDefault(),r.value==="Drag"){if(F.current!==null){let i=F.current;p(s=>{let w=[...s];return w.splice(i,1),w}),F.current=null}_.current=null}},K=l=>{r.value==="Drag"&&l.preventDefault()};return j("div",{class:"inputchips-container",style:{maxWidth:"600px"},children:[k("div",{class:"inputchips-mode",children:j("button",{onClick:E,class:"inputchips-mode-button",children:[t,":",k("br",{}),e.get(r.value)]})}),j("div",{class:"inputchips-container-list",children:[j("div",{class:"inputchips-list",children:[o&&k("div",{class:"inputchips-list-title",children:o}),k("div",{class:"inputchips-list-box",onDrop:q,onDragOver:K,children:N.map((l,i)=>j("span",{"data-input-edit":r.value==="View"?"View":r.value==="Drag"?"Drag":"Click",draggable:r.value==="Drag",onDragStart:s=>X(s,l),onDragEnd:s=>J(s),class:"inputchips-chips inputchips-chips-available",children:[l,r.value==="Click"&&k("button",{onClick:()=>y(l),class:"inputchips-chips-button inputchips-chips-button-add",children:"+"})]},`rem-${l}-${i}`))})]}),j("div",{class:"inputchips-list",children:[u&&k("div",{class:"inputchips-list-title",children:u}),k("div",{class:"inputchips-list-box",onDrop:l=>R(l),onDragOver:Y,children:d.map((l,i)=>j("span",{draggable:r.value==="Drag","data-input-edit":r.value==="View"?"View":r.value==="Drag"?"Drag":"Click",onDragStart:s=>G(s,i),onDragEnd:s=>U(s),onDrop:s=>{r.value==="Drag"&&(s.preventDefault(),R(s,i))},onDragOver:s=>{r.value==="Drag"&&s.preventDefault()},class:"inputchips-chips inputchips-chips-selected",children:[r.value==="Click"&&j(ce,{children:[i>0&&k("button",{onClick:()=>W(i),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2190"}),i<d.length-1&&k("button",{onClick:()=>H(i),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2192"})]}),l,r.value==="Click"&&k(ce,{children:k("button",{onClick:()=>L(i),class:"inputchips-chips-button inputchips-chips-button-del",children:"x"})})]},`sel-${l}-${i}`))})]})]})]})}function de(a,o){let u=new Map;return(Array.isArray(a)?a:[a]).forEach(e=>{u.set(e.var,e.val)}),o&&(Array.isArray(o)?o:[o]).forEach(n=>{try{let c=n.val(u);u.set(n.var,c)}catch(c){console.error(`B\u0142\u0105d podczas obliczania zmiennej "${n.var}":`,c instanceof Error?c.message:String(c)),u.set(n.var,void 0)}}),u}function me(a,o,u){if(u<=0)return[];let t=[];for(let e=0;e<u;e++)t.push(a+e*o);return t}function he(a,o,u){let t=[];if(o===0)return a===u&&t.push(a),t;if(o>0){if(a>u)return t;for(let e=a;e<=u;e+=o)t.push(e)}else{if(a<u)return t;for(let e=a;e>=u;e+=o)t.push(e)}return t}function ge(a,o,u){let t=[],e=o.map(h=>h==="=||"?"":`\u3010${h}\u3011`);t.push(e);let n=Math.max(...o.map(h=>Array.isArray(u.get(h))?u.get(h).length:0));for(let h=0;h<n;h++){let A=[];for(let r of o)if(r==="=||")A.push("");else{let d=u.get(r);Array.isArray(d)?A.push(d[h]??""):A.push("")}t.push(A)}function c(h){if(h.length===0)return[];let A=h.length,r=h[0].length,d=Array.from({length:r},()=>new Array(A));for(let p=0;p<A;p++)for(let f=0;f<r;f++)d[f][p]=h[p][f];return d}return a!="COL"?c(t):t}import{Fragment as fe,jsx as D,jsxs as re}from"https://esm.sh/preact@10.26.8/jsx-runtime";function be(a){let{data:o,mode:u,tableClassName:t,caption:e,thClassName:n,tdClassName:c}=a,h=u==="COL";if(o.length===0)return D("table",{className:t??""});let A=h?o[0]:o.map(p=>p[0]),r=h?o.slice(1):o.map(p=>p.slice(1));function d(p){return p=`${p}`,typeof p=="string"&&p!=="=||"&&p!==""?p.replaceAll("\u3010","").replaceAll("\u3011",""):"noneNONE"}return re("table",{className:`${h?"plot-col-data1":"plot-row-data1"} ${t??""}`,children:[e&&D("caption",{children:e}),D("tbody",{children:h?re(fe,{children:[D("tr",{children:A.map((p,f)=>{let N=d(p);return D("th",{className:`table-val-type--${N} ${n??""}`,children:p},N)})}),r.map((p,f)=>D("tr",{children:p.map((N,E)=>{let y=d(A[E]);return D("td",{className:`table-val-type--${y} ${c??""}`,children:N},`${y}-row-${f}`)})},`row-${f}`))]}):D(fe,{children:o.map((p,f)=>{let N=d(p[0]);return re("tr",{className:`table-val-type--${N}`,children:[D("th",{scope:"row",className:n,children:p[0]}),p.slice(1).map((E,y)=>D("td",{className:c,children:E},`${N}-col-${y}`))]},`series-row-${N}`)})})})]})}function le(a){return Math.floor(Math.log2(a))}function M(a,o,u,t,e){let n=e?e(t):t;return a*2**(n+o)+u}function V(a){if(a<=0||!Number.isInteger(a))throw new Error("Argument musi by\u0107 dodatni\u0105 liczb\u0105 ca\u0142kowit\u0105.");return Math.log2(a&-a)}function Pe(a){return typeof a!="number"||isNaN(a)||!Number.isInteger(a)||a<=0}function $e(a){return typeof a!="number"||isNaN(a)||!Number.isInteger(a)||a<0}function b(a,o,u){if(!Array.isArray(o))throw new Error(`Zmienne ${a}  musz\u0105 by\u0107 tablicami.`);switch(u){case"isNotValNaturalPos":if(o.some(Pe))throw new Error(`Wszystkie elementy w tablicy ${a} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi (wi\u0119kszymi od 0).`);break;case"isNotValNaturalPosWithZero":if(o.some($e))throw new Error(`Wszystkie elementy w tablicy ${a} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi z zero (wi\u0119kszymi od -1).`);break}}function B(a){return de([{var:"i",val:a}],[{var:"h",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((n,c)=>le(n))}},{var:"hA",val:t=>{let e=t.get("h");return b("h",e,"isNotValNaturalPosWithZero"),e.map((n,c)=>M(1,0,0,n))}},{var:"hZ",val:t=>{let e=t.get("h");return b("h",e,"isNotValNaturalPosWithZero"),e.map((n,c)=>M(1,1,-1,n))}},{var:"hAZ",val:t=>{let e=t.get("h");return b("h",e,"isNotValNaturalPosWithZero"),e.map((n,c)=>M(1.5,1,-1,n))}},{var:"hi",val:t=>{let e=t.get("i");b("i",e,"isNotValNaturalPos");let n=t.get("hA");return b("hA",n,"isNotValNaturalPos"),e.map((c,h)=>c-n[h])}},{var:"hj",val:t=>{let e=t.get("i");b("i",e,"isNotValNaturalPos");let n=t.get("hZ");return b("hZ",n,"isNotValNaturalPos"),e.map((c,h)=>n[h]-c)}},{var:"j",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((n,c)=>M(1.5,1,-1,le(n))-n)}},{var:"ki",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((n,c)=>V(n))}},{var:"kj",val:t=>{let e=t.get("j");return b("j",e,"isNotValNaturalPos"),e.map((n,c)=>V(n))}},{var:"kiA",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((n,c)=>M(1,0,0,n,V))}},{var:"kjA",val:t=>{let e=t.get("j");return b("j",e,"isNotValNaturalPos"),e.map((n,c)=>M(1,0,0,n,V))}},{var:"kiZ",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((n,c)=>M(1,1,-1,n,V))}},{var:"kjZ",val:t=>{let e=t.get("j");return b("j",e,"isNotValNaturalPos"),e.map((n,c)=>M(1,1,-1,n,V))}},{var:"li",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((n,c)=>n/M(1,0,0,n,V))}},{var:"lj",val:t=>{let e=t.get("j");return b("j",e,"isNotValNaturalPos"),e.map((n,c)=>n/M(1,0,0,n,V))}},{var:"mi",val:t=>{let e=t.get("i");return b("i",e,"isNotValNaturalPos"),e.map((n,c)=>n/M(1,0,0,n,V)+1)}},{var:"wj",val:t=>{let e=t.get("j");return b("j",e,"isNotValNaturalPos"),e.map((n,c)=>n/M(1,0,0,n,V)+2)}}])}import{Fragment as Oe,jsx as m,jsxs as $}from"https://esm.sh/preact@10.26.8/jsx-runtime";function ve(){let a=I(1),o=I(10),u=I(new Map),t=B(me(1,1,15));console.log("RES_MAP",t);let e=I(!0),n=I([]),c=()=>{if(isNaN(Number(a.value))||isNaN(Number(o.value))){console.error("Warto\u015Bci 'from' lub 'to' nie s\u0105 liczbami."),u.value=new Map;return}u.value=B(he(Number(a.value),1,Number(o.value)))},h=()=>{e.value=!e.value},A=d=>{d!==void 0?a.value=d:a.value=0},r=d=>{d!==void 0?o.value=d:o.value=0};return $("main",{children:[m("h1",{children:"Matematyka w genealogii."}),$("div",{style:{display:"flex",alignItems:"stretch",gap:"40px",marginBottom:"20px",flexFlow:"row nowrap"},children:[m("button",{onClick:c,style:{padding:"0.5rem 1rem",fontSize:"1rem"},children:"Policz"}),$("fieldset",{class:"fieldset-inputs-number",style:{border:"3px solid #6c757d",borderRadius:"8px",padding:"20px",marginTop:"0",marginBottom:"0",display:"flex",alignItems:"flex-start",gap:"40px"},children:[m("legend",{style:{backgroundColor:"#000",color:"#fff",padding:"3px 6px"},children:"Choose range of \u3010i\u3011"}),m(ae,{name:"input1",value:a.value,onValueChange:A,def:1,min:1,step:1,placeholder:"Od","aria-label":"Warto\u015B\u0107 pocz\u0105tkowa przedzia\u0142u"}),m(ae,{name:"input2",value:o.value,onValueChange:r,def:7,min:a.value>=1?a.value:1,step:1,placeholder:"Do","aria-label":"Warto\u015B\u0107 ko\u0144cowa przedzia\u0142u"})]}),m(pe,{availableValues:new Map([["h",1],["i",1],["j",1],["hi",1],["hj",1],["ki",1],["mi",1],["li",1],["lj",1],["wj",1],["kj",1],["hA",1],["hZ",1],["hAZ",1],["kiA",1],["kjA",1],["kiZ",1],["kjZ",1],["=||",20]]),defaultValues:["ki","mi","li","i","hi","kiA","kiZ","=||","h","hA","hZ","hAZ","=||","kjZ","kjA","hj","j","lj","wj","kj"],values:n.value,titleAvailable:"Dost\u0119pne:",titleSelected:"Wybrane:",onChange:d=>{n.value=d,console.log(n.value)}})]}),$("div",{children:[m("input",{type:"checkbox",id:"PlotPosition",name:"PlotPosition",checked:e.value,onClick:h}),m("label",{for:"PlotPosition",children:e.value?"Row":"Col"})]}),m("br",{}),m("br",{}),m("br",{}),u.value.size>0&&$(Oe,{children:[m("h3",{children:"Rezultat oblicze\u0144:"}),m(be,{data:ge(e.value?"ROW":"COL",n.value,u.value),mode:e.value?"ROW":"COL",caption:"Wyniki oblicze\u0144."})]}),m("p",{children:$("ul",{children:[m("li",{children:"\u3010i\u3011"}),m("li",{children:"\u3010h\u3011 = floor(log\u2082(i)) ||| dla przedzia\u0142u [i]"}),m("li",{children:"\u3010hA\u3011 = 2**h ||| dla przedzia\u0142u [h]"}),m("li",{children:"\u3010hZ\u3011 = 2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),m("li",{children:"\u3010hAZ\u3011 =3*2**h-1 = 1.5*2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),m("li",{children:"\u3010hi\u3011 =\u3010i\u3011 -\u3010hA\u3011"}),m("li",{children:"\u3010hj\u3011 =\u3010hZ\u3011 -\u3010i\u3011"}),m("li",{children:"\u3010j\u3011 =\u3010hAZ\u3011 -\u3010i\u3011"})]})}),m("p",{children:$("ul",{children:[m("li",{children:"\u3010ki\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [i]"}),m("li",{children:"\u3010kj\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [j]"}),m("li",{children:"\u3010kiA\u3011 = 2**\u3010ki\u3011"}),m("li",{children:"\u3010kjA\u3011 = 2**\u3010kj\u3011"}),m("li",{children:"\u3010li\u3011 =\u3010i\u3011/\u3010kiA\u3011"}),m("li",{children:"\u3010lj\u3011 =\u3010j\u3011/\u3010kjA\u3011"}),m("li",{children:"\u3010m\u3011 =\u3010li\u3011+1"}),m("li",{children:"\u3010w\u3011 =\u3010lj\u3011+2"})]})})]})}import{jsx as Ie}from"https://esm.sh/preact@10.26.8/jsx-runtime";Te(Ie(ve,{}),document.getElementById("root"));
//# sourceMappingURL=data:application/json;base64,
