import{render as Re}from"https://esm.sh/preact@10.26.8";import{useSignal as R}from"https://esm.sh/@preact/signals@2.2.0";import{useCallback as B,useEffect as we,useRef as Se}from"https://esm.sh/preact@10.26.8/hooks";import{Fragment as Ve,jsx as S,jsxs as T}from"https://esm.sh/preact@10.26.8/jsx-runtime";var xe=S("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"}),Me=T(Ve,{children:[S("rect",{x:"11",y:"5",width:"2",height:"14",rx:"1"}),S("rect",{x:"5",y:"11",width:"14",height:"2",rx:"1"})]}),m={baseViewBoxWidth:174,baseViewBoxHeight:72,buttons:{choose:{name:"btn-choose",paths:[{dataName:"btn-fill",d:"M115.75,71.62c-10.03,0-19.93-1.62-28.63-4.67l-.12-.04-.12.04c-8.7,3.06-18.59,4.67-28.63,4.67-13.06,0-25.81-2.75-36.02-7.75l26.96-15.21h75.61l26.96,15.21c-10.2,5-22.96,7.75-36.02,7.75Z",defaultFill:"#919191"},{dataName:"btn-border-fill",d:"M124.71,49.04l26.25,14.81c-10.04,4.78-22.48,7.4-35.21,7.4-9.99,0-19.84-1.61-28.5-4.65l-.25-.09-.25.09c-8.66,3.04-18.51,4.65-28.5,4.65-12.73,0-25.16-2.62-35.21-7.4l26.25-14.81h75.41M124.9,48.29H49.1l-27.66,15.6c10.03,5.06,22.85,8.11,36.82,8.11,10.46,0,20.27-1.71,28.75-4.69,8.48,2.98,18.29,4.69,28.75,4.69,13.97,0,26.78-3.04,36.82-8.11l-27.66-15.6h0Z",defaultFill:"#505050"}]},increment:{name:"btn-increment",paths:[{dataName:"btn-fill",d:"M127.38,43.51V1.1c26.83,3.37,46.25,18.01,46.25,34.9,0,9.19-5.68,17.91-16.01,24.57l-30.24-17.06Z",defaultFill:"#21597f"},{dataName:"btn-border-fill",d:"M127.75,1.53c26.42,3.45,45.5,17.86,45.5,34.47,0,9-5.55,17.56-15.65,24.13l-29.85-16.84V1.53M127,.68v43.05l30.63,17.28c10.13-6.48,16.37-15.29,16.37-25.01,0-17.5-20.21-32.08-47-35.32h0Z",defaultFill:"#104060"}],iconAnchorX:150,iconAnchorY:30},decrement:{name:"btn-decrement",paths:[{dataName:"btn-fill",d:"M16.38,60.57C6.06,53.91.38,45.19.38,36,.38,19.11,19.8,4.47,46.62,1.1v42.41l-30.24,17.06Z",defaultFill:"#b21010"},{dataName:"btn-border-fill",d:"M46.25,1.53v41.76h0s-29.85,16.84-29.85,16.84C6.3,53.56.75,45,.75,36,.75,19.39,19.83,4.97,46.25,1.53M47,.68C20.21,3.92,0,18.5,0,36c0,9.72,6.24,18.53,16.37,25.01l30.63-17.28V.68h0Z",defaultFill:"#800000"}],iconAnchorX:25,iconAnchorY:30}},inputArea:{name:"input",rect:{x:52.38,y:.38,width:69.25,height:42.54,defaultFill:"#fff"},borderPath:{d:"M121.25.75v41.79H52.75V.75h68.5M122,0H52v43.29h70V0h0Z",defaultFill:"#333"}}},Ce="inputnumber-container",Ee="inputnumber-svg",ne="inputnumber-svg-button",ke="inputnumber-html-input";function ae(a){let{value:i,defaultValue:u,def:n=1,min:e,max:t,step:p=1,placeholder:A,required:E,disabled:r=!1,name:h,id:g,readOnly:o=!1,onChange:N,onValueChange:v,ratioSIZE:y=1,wrapperClassName:_,svgClassName:W,inputClassName:H,style:F,selectButtonStyle:P,incrementButtonStyle:X,decrementButtonStyle:J,inputAreaStyle:G,selectButtonFill:U,incrementButtonFill:Z,decrementButtonFill:Y,inputAreaRectFill:q,inputAreaBorderFill:K,...l}=a,s=Se(null);we(()=>{s.current&&(i!==void 0?s.current.value=String(i):u!==void 0?s.current.value=String(u):s.current.value="")},[i,u]);let c=B(b=>{if(s.current&&!r&&!o){b==="up"?s.current.stepUp():s.current.stepDown();let C=new Event("input",{bubbles:!0,cancelable:!0});s.current.dispatchEvent(C)}},[r,o]),w=B(()=>c("down"),[c]),I=B(()=>c("up"),[c]),j=B(()=>{if(s.current&&!r&&!o){let b=n??1;if(s.current.value=String(b),v&&v(b,h),N){let C=new Event("change",{bubbles:!0});Object.defineProperty(C,"target",{writable:!1,value:s.current}),Object.defineProperty(C,"currentTarget",{writable:!1,value:s.current}),N(C)}console.log("Choose button clicked, value set to 1")}},[r,o,h,v,N]),O=b=>{let oe=b.currentTarget.value,te;if(oe==="")te=void 0;else{let se=parseFloat(oe);te=isNaN(se)?void 0:se}v&&v(te,h),N&&N(b)},ye=m.baseViewBoxWidth*y,Ae=m.baseViewBoxHeight*y,Ne={position:"absolute",left:`${m.inputArea.rect.x*y}px`,top:`${m.inputArea.rect.y*y}px`,width:`${m.inputArea.rect.width*y}px`,height:`${m.inputArea.rect.height*y}px`,border:"none",backgroundColor:"transparent",color:"#333",textAlign:"center",fontSize:`${Math.max(8,18*y)}px`,outline:"none",padding:`0 ${Math.max(1,2*y)}px`,margin:0,boxSizing:"border-box",MozAppearance:"textfield",WebkitAppearance:"none",appearance:"none",zIndex:2},x=24,ie=1.5*(m.baseViewBoxHeight*.25*(y>.5?1:y*2)/x),Q="";i!==void 0?Q=String(i):u!==void 0&&(Q=String(u));let ee={cursor:r||o?"default":"pointer"};return T("div",{className:`${Ce} ${_||""}`,style:{width:`${ye}px`,height:`${Ae}px`,position:"relative",overflow:"hidden",...F},...l,children:[T("svg",{className:`${Ee} ${W||""}`,"data-name":"input-number",xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${m.baseViewBoxWidth} ${m.baseViewBoxHeight}`,style:{display:"block",width:"100%",height:"100%",position:"absolute",top:0,left:0},"aria-hidden":"true",children:[S("g",{className:ne,"data-name":m.buttons.choose.name,onClick:r?void 0:j,style:{...ee,...P||{}},pointerEvents:r?"none":"auto",children:m.buttons.choose.paths.map((b,C)=>S("path",{"data-name":b.dataName,d:b.d,fill:U||b.defaultFill},`choose-path-${C}`))}),T("g",{"data-name":m.inputArea.name,style:G||{},children:[S("rect",{x:m.inputArea.rect.x,y:m.inputArea.rect.y,width:m.inputArea.rect.width,height:m.inputArea.rect.height,fill:q||m.inputArea.rect.defaultFill}),S("path",{d:m.inputArea.borderPath.d,fill:K||m.inputArea.borderPath.defaultFill})]}),T("g",{className:ne,"data-name":m.buttons.decrement.name,onClick:!r&&!o?w:void 0,style:{...ee,...J||{}},pointerEvents:r||o?"none":"auto",children:[m.buttons.decrement.paths.map((b,C)=>S("path",{"data-name":b.dataName,d:b.d,fill:Y||b.defaultFill},`dec-path-${C}`)),S("g",{transform:`translate(${m.buttons.decrement.iconAnchorX}, ${m.buttons.decrement.iconAnchorY}) scale(${ie}) translate(-${x/2}, -${x/2})`,style:{pointerEvents:"none"},children:S("svg",{viewBox:`0 0 ${x} ${x}`,width:x,height:x,fill:"white",overflow:"visible",children:xe})})]}),T("g",{className:ne,"data-name":m.buttons.increment.name,onClick:!r&&!o?I:void 0,style:{...ee,...X||{}},pointerEvents:r||o?"none":"auto",children:[m.buttons.increment.paths.map((b,C)=>S("path",{"data-name":b.dataName,d:b.d,fill:Z||b.defaultFill},`inc-path-${C}`)),S("g",{transform:`translate(${m.buttons.increment.iconAnchorX}, ${m.buttons.increment.iconAnchorY}) scale(${ie}) translate(-${x/2}, -${x/2})`,style:{pointerEvents:"none"},children:S("svg",{viewBox:`0 0 ${x} ${x}`,width:x,height:x,fill:"white",overflow:"visible",children:Me})})]})]}),S("input",{ref:s,className:`${ke} ${H||""}`,type:"number",name:h,id:g,value:Q,min:e,max:t,step:p,placeholder:A,required:E,disabled:r,readOnly:o,onInput:O,style:Ne,"aria-label":a["aria-label"]||"Warto\u015B\u0107 liczbowa",...l})]})}import{useEffect as Fe,useRef as ue,useState as De}from"https://esm.sh/preact@10.26.8/hooks";import{useSignal as Pe}from"https://esm.sh/@preact/signals@2.2.0";import{Fragment as ce,jsx as k,jsxs as $}from"https://esm.sh/preact@10.26.8/jsx-runtime";function _e(a="View",i="Drag",u="Click"){return new Map([["View",a],["Drag",i],["Click",u]])}function pe(a){let{titleAvailable:i,titleSelected:u,titleModeButton:n="Mode",titleMode:e=_e(),availableValues:t,values:p,defaultValues:A=[],onChange:E=()=>{}}=a,r=Pe("View"),[h,g]=De([...A]),N=(()=>{let l=new Map;h.forEach(c=>{l.set(c,(l.get(c)??0)+1)});let s=[];for(let[c,w]of t.entries()){let I=l.get(c)??0,j=w-I;for(let O=0;O<j;O++)s.push(c)}return s})();Fe(()=>{E([...h])},[h]);let v=()=>{r.value==="View"?r.value="Drag":r.value==="Drag"?r.value="Click":r.value="View"},y=l=>{r.value==="Click"&&g([...h,l])},_=l=>{r.value==="Click"&&g(s=>{let c=[...s];return c.splice(l,1),c})},W=l=>{r.value==="Click"&&(l<=0||g(s=>{let c=[...s];return[c[l-1],c[l]]=[c[l],c[l-1]],c}))},H=l=>{r.value==="Click"&&(l>=h.length-1||g(s=>{let c=[...s];return[c[l],c[l+1]]=[c[l+1],c[l]],c}))},F=ue(null),P=ue(null),X=(l,s)=>{if(r.value!=="Drag"){l.preventDefault();return}P.current=s,l.dataTransfer?.setData("text/plain",s),l.dataTransfer.effectAllowed="copy"},J=l=>{P.current=null},G=(l,s)=>{if(r.value!=="Drag"){l.preventDefault();return}F.current=s,l.dataTransfer?.setData("text/plain",h[s]),l.dataTransfer.effectAllowed="move"},U=l=>{F.current=null},Z=(l,s=null)=>{if(l.preventDefault(),r.value==="Drag"){if(P.current!==null){g(c=>{let w=[...c];return s===null||s>=w.length?w.push(P.current):w.splice(s,0,P.current),w}),P.current=null;return}if(F.current!==null){let c=F.current,w=s!==null?s:h.length-1;if(c===w)return;g(I=>{let j=[...I],[O]=j.splice(c,1);return j.splice(w,0,O),j}),F.current=null}}},Y=l=>{r.value==="Drag"&&l.preventDefault()},q=l=>{if(l.preventDefault(),r.value==="Drag"){if(F.current!==null){let s=F.current;g(c=>{let w=[...c];return w.splice(s,1),w}),F.current=null}P.current=null}},K=l=>{r.value==="Drag"&&l.preventDefault()};return $("div",{class:"inputchips-container",style:{maxWidth:"600px"},children:[k("div",{class:"inputchips-mode",children:$("button",{onClick:v,class:"inputchips-mode-button",children:[n,":",k("br",{}),e.get(r.value)]})}),$("div",{class:"inputchips-container-list",children:[$("div",{class:"inputchips-list",children:[i&&k("div",{class:"inputchips-list-title",children:i}),k("div",{class:"inputchips-list-box",onDrop:q,onDragOver:K,children:N.map((l,s)=>$("span",{"data-input-edit":r.value==="View"?"View":r.value==="Drag"?"Drag":"Click",draggable:r.value==="Drag",onDragStart:c=>X(c,l),onDragEnd:c=>J(c),class:"inputchips-chips inputchips-chips-available",children:[l,r.value==="Click"&&k("button",{onClick:()=>y(l),class:"inputchips-chips-button inputchips-chips-button-add",children:"+"})]},`rem-${l}-${s}`))})]}),$("div",{class:"inputchips-list",children:[u&&k("div",{class:"inputchips-list-title",children:u}),k("div",{class:"inputchips-list-box",onDrop:l=>Z(l),onDragOver:Y,children:h.map((l,s)=>$("span",{draggable:r.value==="Drag","data-input-edit":r.value==="View"?"View":r.value==="Drag"?"Drag":"Click",onDragStart:c=>G(c,s),onDragEnd:c=>U(c),onDrop:c=>{r.value==="Drag"&&(c.preventDefault(),Z(c,s))},onDragOver:c=>{r.value==="Drag"&&c.preventDefault()},class:"inputchips-chips inputchips-chips-selected",children:[r.value==="Click"&&$(ce,{children:[s>0&&k("button",{onClick:()=>W(s),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2190"}),s<h.length-1&&k("button",{onClick:()=>H(s),class:"inputchips-chips-button inputchips-chips-button-ord",children:"\u2192"})]}),l,r.value==="Click"&&k(ce,{children:k("button",{onClick:()=>_(s),class:"inputchips-chips-button inputchips-chips-button-del",children:"x"})})]},`sel-${l}-${s}`))})]})]})]})}function de(a,i){let u=new Map;return(Array.isArray(a)?a:[a]).forEach(e=>{u.set(e.var,e.val)}),i&&(Array.isArray(i)?i:[i]).forEach(t=>{try{let p=t.val(u);u.set(t.var,p)}catch(p){console.error(`B\u0142\u0105d podczas obliczania zmiennej "${t.var}":`,p instanceof Error?p.message:String(p)),u.set(t.var,void 0)}}),u}function me(a,i,u){if(u<=0)return[];let n=[];for(let e=0;e<u;e++)n.push(a+e*i);return n}function he(a,i,u){let n=[];if(i===0)return a===u&&n.push(a),n;if(i>0){if(a>u)return n;for(let e=a;e<=u;e+=i)n.push(e)}else{if(a<u)return n;for(let e=a;e>=u;e+=i)n.push(e)}return n}function ge(a,i,u,n=!1){let e=[],t=u.get("h"),p=i.map(r=>r==="=||"?"":`\u3010${r}\u3011`);e.push(p);let A=Math.max(...i.map(r=>Array.isArray(u.get(r))?u.get(r).length:0)),E=t?.[0];for(let r=0;r<A;r++){let h=[];for(let g of i)if(g==="=||")h.push("");else{let o=u.get(g);Array.isArray(o)?h.push(o[r]??""):h.push("")}if(n&&t!==void 0&&r>0){let g=t[r];g!==E&&e.push(new Array(p.length).fill("")),E=g}e.push(h)}return e=a!="COL"?$e(e):e,console.log("result",e),e}function $e(a){if(a.length===0)return[];let i=a.length,u=a[0].length,n=Array.from({length:u},()=>new Array(i));for(let e=0;e<i;e++)for(let t=0;t<u;t++)n[t][e]=a[e][t];return n}import{Fragment as fe,jsx as D,jsxs as re}from"https://esm.sh/preact@10.26.8/jsx-runtime";function be(a){let{data:i,mode:u,tableClassName:n,caption:e,thClassName:t,tdClassName:p}=a,A=u==="COL";if(i.length===0)return D("table",{className:n??""});let E=A?i[0]:i.map(o=>o[0]),r=A?i.slice(1):i.map(o=>o.slice(1));function h(o){return o=`${o}`,typeof o=="string"&&o!=="=||"&&o!==""?o.replaceAll("\u3010","").replaceAll("\u3011",""):"noneNONE"}function g(o,N){return typeof o=="number"||o=="string"&&o.length>0?N:"noneNONE"}return re("table",{className:`${A?"plot-col-data1":"plot-row-data1"} ${n??""}`,children:[e&&D("caption",{children:e}),D("tbody",{children:A?re(fe,{children:[D("tr",{children:E.map((o,N)=>{let v=g(o,h(o));return D("th",{className:`table-val-type--${v} ${t??""}`,children:o},v)})}),r.map((o,N)=>D("tr",{children:o.map((v,y)=>{let _=g(v,h(E[y]));return D("td",{className:`table-val-type--${_} ${p??""}`,children:v},`${_}-row-${N}`)})},`row-${N}`))]}):D(fe,{children:i.map((o,N)=>{let v=h(o[0]);return re("tr",{children:[D("th",{scope:"row",className:`table-val-type--${g(o[0],v)} ${t??""}`,children:o[0]}),o.slice(1).map((y,_)=>D("td",{className:`table-val-type--${g(y,v)} ${p??""}`,children:y},`${v}-col-${_}`))]},`series-row-${v}`)})})})]})}function le(a){return Math.floor(Math.log2(a))}function M(a,i,u,n,e){let t=e?e(n):n;return a*2**(t+i)+u}function V(a){if(a<=0||!Number.isInteger(a))throw new Error("Argument musi by\u0107 dodatni\u0105 liczb\u0105 ca\u0142kowit\u0105.");return Math.log2(a&-a)}function je(a){return typeof a!="number"||isNaN(a)||!Number.isInteger(a)||a<=0}function ze(a){return typeof a!="number"||isNaN(a)||!Number.isInteger(a)||a<0}function f(a,i,u){if(!Array.isArray(i))throw new Error(`Zmienne ${a}  musz\u0105 by\u0107 tablicami.`);switch(u){case"isNotValNaturalPos":if(i.some(je))throw new Error(`Wszystkie elementy w tablicy ${a} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi (wi\u0119kszymi od 0).`);break;case"isNotValNaturalPosWithZero":if(i.some(ze))throw new Error(`Wszystkie elementy w tablicy ${a} musz\u0105 by\u0107 liczbami naturalnymi dodatnimi z zero (wi\u0119kszymi od -1).`);break}}function L(a){return de([{var:"i",val:a}],[{var:"h",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>le(t))}},{var:"hA",val:n=>{let e=n.get("h");return f("h",e,"isNotValNaturalPosWithZero"),e.map((t,p)=>M(1,0,0,t))}},{var:"hZ",val:n=>{let e=n.get("h");return f("h",e,"isNotValNaturalPosWithZero"),e.map((t,p)=>M(1,1,-1,t))}},{var:"hAZ",val:n=>{let e=n.get("h");return f("h",e,"isNotValNaturalPosWithZero"),e.map((t,p)=>M(1.5,1,-1,t))}},{var:"hi",val:n=>{let e=n.get("i");f("i",e,"isNotValNaturalPos");let t=n.get("hA");return f("hA",t,"isNotValNaturalPos"),e.map((p,A)=>p-t[A])}},{var:"hj",val:n=>{let e=n.get("i");f("i",e,"isNotValNaturalPos");let t=n.get("hZ");return f("hZ",t,"isNotValNaturalPos"),e.map((p,A)=>t[A]-p)}},{var:"j",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>M(1.5,1,-1,le(t))-t)}},{var:"ki",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>V(t))}},{var:"kj",val:n=>{let e=n.get("j");return f("j",e,"isNotValNaturalPos"),e.map((t,p)=>V(t))}},{var:"kiA",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>M(1,0,0,t,V))}},{var:"kjA",val:n=>{let e=n.get("j");return f("j",e,"isNotValNaturalPos"),e.map((t,p)=>M(1,0,0,t,V))}},{var:"kiZ",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>M(1,1,-1,t,V))}},{var:"kjZ",val:n=>{let e=n.get("j");return f("j",e,"isNotValNaturalPos"),e.map((t,p)=>M(1,1,-1,t,V))}},{var:"li",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>t/M(1,0,0,t,V))}},{var:"lj",val:n=>{let e=n.get("j");return f("j",e,"isNotValNaturalPos"),e.map((t,p)=>t/M(1,0,0,t,V))}},{var:"mi",val:n=>{let e=n.get("i");return f("i",e,"isNotValNaturalPos"),e.map((t,p)=>t/M(1,0,0,t,V)+1)}},{var:"wj",val:n=>{let e=n.get("j");return f("j",e,"isNotValNaturalPos"),e.map((t,p)=>t/M(1,0,0,t,V)+2)}}])}import{Fragment as Te,jsx as d,jsxs as z}from"https://esm.sh/preact@10.26.8/jsx-runtime";function ve(){let a=R(1),i=R(10),u=R(new Map),n=L(me(1,1,15));console.log("RES_MAP",n);let e=R(!0),t=R(!0),p=R([]),A=()=>{if(isNaN(Number(a.value))||isNaN(Number(i.value))){console.error("Warto\u015Bci 'from' lub 'to' nie s\u0105 liczbami."),u.value=new Map;return}u.value=L(he(Number(a.value),1,Number(i.value)))},E=()=>{e.value=!e.value},r=()=>{t.value=!t.value},h=o=>{o!==void 0?a.value=o:a.value=0},g=o=>{o!==void 0?i.value=o:i.value=0};return z("main",{children:[d("h1",{children:"Matematyka w genealogii."}),z("div",{style:{display:"flex",alignItems:"stretch",gap:"40px",marginBottom:"20px",flexFlow:"row nowrap"},children:[d("button",{onClick:A,style:{padding:"0.5rem 1rem",fontSize:"1rem"},children:"Policz"}),z("fieldset",{class:"fieldset-inputs-number",style:{border:"3px solid #6c757d",borderRadius:"8px",padding:"20px",marginTop:"0",marginBottom:"0",display:"flex",alignItems:"flex-start",gap:"40px"},children:[d("legend",{style:{backgroundColor:"#000",color:"#fff",padding:"3px 6px"},children:"Choose range of \u3010i\u3011"}),d(ae,{name:"input1",value:a.value,onValueChange:h,def:1,min:1,step:1,placeholder:"Od","aria-label":"Warto\u015B\u0107 pocz\u0105tkowa przedzia\u0142u"}),d(ae,{name:"input2",value:i.value,onValueChange:g,def:7,min:a.value>=1?a.value:1,step:1,placeholder:"Do","aria-label":"Warto\u015B\u0107 ko\u0144cowa przedzia\u0142u"})]})]}),d(pe,{availableValues:new Map([["h",1],["i",1],["j",1],["hi",1],["hj",1],["ki",1],["mi",1],["li",1],["lj",1],["wj",1],["kj",1],["hA",1],["hZ",1],["hAZ",1],["kiA",1],["kjA",1],["kiZ",1],["kjZ",1],["=||",20]]),defaultValues:["ki","mi","li","i","hi","kiA","kiZ","=||","h","hA","hZ","hAZ","=||","kjZ","kjA","hj","j","lj","wj","kj"],values:p.value,titleAvailable:"Dost\u0119pne:",titleSelected:"Wybrane:",onChange:o=>{p.value=o,console.log(p.value)}}),z("div",{children:[d("input",{type:"checkbox",id:"PlotPosition",name:"PlotPosition",checked:e.value,onClick:E}),d("label",{for:"PlotPosition",children:e.value?"Row":"Col"}),d("input",{type:"checkbox",id:"PlotSplitGeneration",name:"PlotSplitGeneration",checked:t.value,onClick:r}),d("label",{for:"PlotSplitGeneration",children:e.value?"split-h":"nonstop"})]}),d("br",{}),d("br",{}),d("br",{}),u.value.size>0&&z(Te,{children:[d("h3",{children:"Rezultat oblicze\u0144:"}),d(be,{data:ge(e.value?"ROW":"COL",p.value,u.value,t.value),mode:e.value?"ROW":"COL",caption:"Wyniki oblicze\u0144."})]}),d("p",{children:z("ul",{children:[d("li",{children:"\u3010i\u3011"}),d("li",{children:"\u3010h\u3011 = floor(log\u2082(i)) ||| dla przedzia\u0142u [i]"}),d("li",{children:"\u3010hA\u3011 = 2**h ||| dla przedzia\u0142u [h]"}),d("li",{children:"\u3010hZ\u3011 = 2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),d("li",{children:"\u3010hAZ\u3011 =3*2**h-1 = 1.5*2**(h+1)-1 ||| dla przedzia\u0142u [h]"}),d("li",{children:"\u3010hi\u3011 =\u3010i\u3011 -\u3010hA\u3011"}),d("li",{children:"\u3010hj\u3011 =\u3010hZ\u3011 -\u3010i\u3011"}),d("li",{children:"\u3010j\u3011 =\u3010hAZ\u3011 -\u3010i\u3011"})]})}),d("p",{children:z("ul",{children:[d("li",{children:"\u3010ki\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [i]"}),d("li",{children:"\u3010kj\u3011 = waluacja dwu-adyczna liczby naturalnej dodatniej [j]"}),d("li",{children:"\u3010kiA\u3011 = 2**\u3010ki\u3011"}),d("li",{children:"\u3010kjA\u3011 = 2**\u3010kj\u3011"}),d("li",{children:"\u3010li\u3011 =\u3010i\u3011/\u3010kiA\u3011"}),d("li",{children:"\u3010lj\u3011 =\u3010j\u3011/\u3010kjA\u3011"}),d("li",{children:"\u3010m\u3011 =\u3010li\u3011+1"}),d("li",{children:"\u3010w\u3011 =\u3010lj\u3011+2"})]})})]})}import{jsx as Ie}from"https://esm.sh/preact@10.26.8/jsx-runtime";Re(Ie(ve,{}),document.getElementById("root"));
//# sourceMappingURL=data:application/json;base64,
